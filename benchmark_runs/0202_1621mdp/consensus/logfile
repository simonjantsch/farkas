PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 16:21:56 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel 'system.tra,lab' -mdp /tmp/tmpswfra5l9

Importing model from "system.tra", "system.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpswfra5l9"...

1 property:
(1) "precond": Pmin=? [ F ("target"|"fail") ]

---------------------------------------------------------------------

Model checking: "precond": Pmin=? [ F ("target"|"fail") ]

Building model...

Computing reachable states...

Reachability (BFS): 73 iterations in 0.00 seconds (average 0.000055, setup 0.00)

Time for model construction: 0.071 seconds.

Warning: Deadlocks detected and fixed in 1 states

Type:        MDP
States:      529 (1 initial)
Transitions: 973
Choices:     785

Transition matrix: 458 nodes (3 terminal), 973 minterms, vars: 10r/10c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 1 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 529, no = 0, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.007 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Academic license - for non-commercial use only
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   1.000000e-01   0.000000e+00      0s
     496    1.6300000e+01   0.000000e+00   0.000000e+00      0s

Solved in 496 iterations and 0.02 seconds
Optimal objective  1.630000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24     65.6 MiB     65.6 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26     65.6 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27     69.1 MiB      3.5 MiB       m2 = m.construct()
    28     69.1 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29     69.1 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30     69.1 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31     69.1 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32     69.1 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33     69.1 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34     69.1 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43     69.1 MiB      0.0 MiB       m2.update()
    44     69.1 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46     69.1 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50     69.1 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54     69.1 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64     71.3 MiB      2.2 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67     71.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68     71.3 MiB      0.0 MiB       j = 0
    69     71.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71     71.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73     71.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75     71.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77     71.3 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79     71.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80     71.3 MiB      0.0 MiB           result.solution = True
    81     71.3 MiB      0.0 MiB           result.feasible = True
    82     71.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83     71.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84     71.3 MiB      0.0 MiB           for v in current_vars:
    85     71.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86     71.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87     71.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90     71.3 MiB      0.0 MiB                   j = j+1
    91                             
    92     71.3 MiB      0.0 MiB       return result, res_vec



subsystem size:121

probability: 0.1
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 16:21:57 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.tra,lab' -mdp /tmp/tmp28z56rvq

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp28z56rvq"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 30 iterations in 0.00 seconds (average 0.000133, setup 0.00)

Time for model construction: 0.028 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      122 (1 initial)
Transitions: 154
Choices:     123

Transition matrix: 345 nodes (3 terminal), 154 minterms, vars: 7r/7c/2nd

Prob0A: 27 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 119 iterations in 0.00 seconds (average 0.000034, setup 0.00)

yes = 11, no = 1, maybe = 110

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=7, nodes=335] [15.7 KB]
Adding sparse bits... [levels=7-7, num=2, compact=2/2] [0.8 KB]
Creating vector for yes... [dist=2, compact] [0.3 KB]
Allocating iteration vectors... [3 x 1.0 KB]
TOTAL: [19.6 KB]

Starting iterations...

Iterative method: 688 iterations in 0.00 seconds (average 0.000006, setup 0.00)

Value in the initial state: 0.10213357977485693

Time for model checking: 0.011 seconds.

Result: 0.10213357977485693 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   1.000000e-01   0.000000e+00      0s
     496    1.6300000e+01   0.000000e+00   0.000000e+00      0s

Solved in 496 iterations and 0.02 seconds
Optimal objective  1.630000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24     71.8 MiB     71.8 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26     71.8 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27     71.8 MiB      0.0 MiB       m2 = m.construct()
    28     71.8 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29     71.8 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30     71.8 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31     71.8 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32     71.8 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33     71.8 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34     71.8 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43     71.8 MiB      0.0 MiB       m2.update()
    44     71.8 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46     71.8 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50     71.8 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54     71.8 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64     71.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67     71.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68     71.9 MiB      0.0 MiB       j = 0
    69     71.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71     71.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73     71.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75     71.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77     71.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79     71.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80     71.9 MiB      0.0 MiB           result.solution = True
    81     71.9 MiB      0.0 MiB           result.feasible = True
    82     71.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83     71.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84     71.9 MiB      0.0 MiB           for v in current_vars:
    85     71.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86     71.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87     71.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90     71.9 MiB      0.0 MiB                   j = j+1
    91                             
    92     71.9 MiB      0.0 MiB       return result, res_vec



subsystem size:121

probability: 0.1
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   1.000000e-01   0.000000e+00      0s
     119    1.1200815e+02   0.000000e+00   0.000000e+00      0s

Solved in 119 iterations and 0.01 seconds
Optimal objective  1.120081484e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24     71.9 MiB     71.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26     71.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27     71.9 MiB      0.0 MiB       m2 = m.construct()
    28     71.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29     71.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30     71.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31     71.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32     71.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33     71.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34     71.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43     71.9 MiB      0.0 MiB       m2.update()
    44     71.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46     71.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50     71.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54     71.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64     71.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67     71.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68     71.9 MiB      0.0 MiB       j = 0
    69     71.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71     71.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73     71.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75     71.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77     71.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79     71.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80     71.9 MiB      0.0 MiB           result.solution = True
    81     71.9 MiB      0.0 MiB           result.feasible = True
    82     71.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83     71.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84     71.9 MiB      0.0 MiB           for v in current_vars:
    85     71.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86     71.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87     71.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90     71.9 MiB      0.0 MiB                   j = j+1
    91                             
    92     71.9 MiB      0.0 MiB       return result, res_vec



subsystem size:117

probability: 0.1
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 16:21:59 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.tra,lab' -mdp /tmp/tmpzzwbj8um

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpzzwbj8um"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 32 iterations in 0.00 seconds (average 0.000125, setup 0.00)

Time for model construction: 0.028 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      119 (1 initial)
Transitions: 149
Choices:     119

Transition matrix: 333 nodes (3 terminal), 149 minterms, vars: 7r/7c/1nd

Prob0A: 27 iterations in 0.00 seconds (average 0.000148, setup 0.00)

Prob1E: 119 iterations in 0.00 seconds (average 0.000034, setup 0.00)

yes = 11, no = 1, maybe = 107

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=7, nodes=322] [15.1 KB]
Adding sparse bits... [levels=7-7, num=1, compact=1/1] [0.7 KB]
Creating vector for yes... [dist=2, compact] [0.2 KB]
Allocating iteration vectors... [3 x 0.9 KB]
TOTAL: [18.8 KB]

Starting iterations...

Iterative method: 687 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 0.10069817335760049

Time for model checking: 0.011 seconds.

Result: 0.10069817335760049 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 287 rows and 572 columns
Presolve time: 0.00s
Presolved: 242 rows, 484 columns, 1076 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -8.0800000e+32   1.800000e+32   8.080000e+02      0s
     517   -2.4400000e+02   0.000000e+00   0.000000e+00      0s

Solved in 517 iterations and 0.01 seconds
Optimal objective -2.440000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24     71.9 MiB     71.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26     71.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27     71.9 MiB      0.0 MiB       m2 = m.construct()
    28     71.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29     71.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30     71.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31     71.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32     71.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33     71.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34     71.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43     71.9 MiB      0.0 MiB       m2.update()
    44     71.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46     71.9 MiB      0.0 MiB       if(zero_vars):
    47     71.9 MiB      0.0 MiB           for x in zero_vars:
    48     71.9 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50     71.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54     71.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64     71.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67     71.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68     71.9 MiB      0.0 MiB       j = 0
    69     71.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71     71.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73     71.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75     71.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77     71.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79     71.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80     71.9 MiB      0.0 MiB           result.solution = True
    81     71.9 MiB      0.0 MiB           result.feasible = True
    82     71.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83     71.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84     71.9 MiB      0.0 MiB           for v in current_vars:
    85     71.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86     71.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87     71.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90     71.9 MiB      0.0 MiB                   j = j+1
    91                             
    92     71.9 MiB      0.0 MiB       return result, res_vec


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 2112 columns and 3868 nonzeros
Variable types: 1056 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 2e+02]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e-01, 1e+00]
Presolve removed 428 rows and 700 columns
Presolve time: 0.01s
Presolved: 1157 rows, 1412 columns, 3016 nonzeros
Variable types: 704 continuous, 708 integer (708 binary)

Root relaxation: objective 3.066455e+00, 1295 iterations, 0.10 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.06645    0  148          -    3.06645      -     -    0s
H    0     0                     164.0000000    3.06645  98.1%     -    0s
     0     2    3.06645    0  148  164.00000    3.06645  98.1%     -    0s
H    2     4                     141.0000000    3.06979  97.8%   124    1s
H    3     8                      93.0000000    3.07628  96.7%   130    1s
H    4     8                      79.0000000    3.07766  96.1%  98.2    1s
H    4     8                      54.0000000    3.07766  94.3%  98.2    1s
H   24    32                      53.0000000    3.18443  94.0%   130    2s
H   31    48                      46.0000000    3.18443  93.1%   149    3s
H  267   266                      40.0000000    3.18689  92.0%  41.1    4s
   424   413 infeasible   25        40.00000    3.18689  92.0%  31.8    5s
H  434   420                      36.0000000    3.18689  91.1%  31.1    5s
  1741  1475    6.07254   11   65   36.00000    3.18689  91.1%  34.7   10s
  2621  2116    8.12671   15  147   36.00000    3.18689  91.1%  31.7   15s
  2950  2329    9.09964   19  101   36.00000    3.60201  90.0%  31.3   20s
  4787  3278 infeasible   67        36.00000    4.17805  88.4%  30.0   26s
  7348  4326    5.17478   27   60   36.00000    4.18461  88.4%  29.8   30s
 11409  6869   21.13272   63   82   36.00000    5.07254  85.9%  28.1   35s
H11805  7017                      35.0000000    5.07254  85.5%  28.0   39s
 12606  7660   12.06738   53   73   35.00000    5.07254  85.5%  27.6   40s
 16930 10756   33.05716   88   89   35.00000    5.12174  85.4%  28.5   45s
 21173 13768   30.04389   77   39   35.00000    5.15447  85.3%  28.5   50s
 25472 16885   23.03825   59   33   35.00000    5.19527  85.2%  28.5   57s
 27750 18434   18.07002   47   55   35.00000    5.20779  85.1%  28.3   60s
 34281 23295   14.05307   34   47   35.00000    5.64955  83.9%  27.8   65s
 39639 27432   29.06148   78  109   35.00000    6.07058  82.7%  28.2   71s
 42505 29409   33.14802   77  115   35.00000    6.07459  82.6%  28.7   75s
 47548 33071   15.10365   50   74   35.00000    6.09306  82.6%  28.6   82s
 51104 35651 infeasible   87        35.00000    6.09716  82.6%  28.6   86s
 54046 37648 infeasible   59        35.00000    6.10324  82.6%  29.0   91s
 57016 39689   31.25599   80  112   35.00000    6.10447  82.6%  29.4   98s
 57598 40039   32.82208   77   77   35.00000    6.11680  82.5%  29.5  100s
 62576 43692   30.63427   75   99   35.00000    6.12172  82.5%  29.6  106s
 66428 46366   20.13733   49   44   35.00000    6.12172  82.5%  29.6  111s
 70214 49046   33.93951   86  151   35.00000    6.12172  82.5%  29.4  115s
 75857 53127   23.13040   59  127   35.00000    6.15447  82.4%  29.1  120s
 81087 57077   33.07067   92   64   35.00000    6.15447  82.4%  28.9  125s
 84540 59753   29.04086   69   32   35.00000    6.15447  82.4%  28.7  130s
 88270 62506   17.39313   44  113   35.00000    6.16494  82.4%  28.6  136s
 93343 66083   15.56677   49   36   35.00000    6.16740  82.4%  28.5  144s
 94207 66672   31.04263   72   36   35.00000    6.16808  82.4%  28.4  145s
 97569 69106   27.07281   59   28   35.00000    6.17043  82.4%  28.4  150s
 102202 72384   12.21631   38   69   35.00000    6.17091  82.4%  28.3  156s
 105823 74984   30.06612   68   68   35.00000    6.17527  82.4%  28.3  161s
 111270 78873   30.61041   73   68   35.00000    6.18379  82.3%  28.2  166s
 114949 81485 infeasible   67        35.00000    6.18851  82.3%  28.1  170s
 119583 84643   31.04918   67   45   35.00000    6.19527  82.3%  28.2  176s
 124317 87942   28.10223   58   33   35.00000    6.20182  82.3%  28.3  181s
 127239 89759 infeasible   65        35.00000    6.20205  82.3%  28.5  186s
 130238 91622   33.52211   72   65   35.00000    6.20205  82.3%  28.5  190s
 135639 95037   26.04102   76   33   35.00000    6.25101  82.1%  28.4  196s
 141466 98862    9.59267   34  135   35.00000    6.31707  82.0%  28.2  201s
 146517 101960   33.17693   62   58   35.00000    6.32519  81.9%  28.1  206s
 150759 104640   29.64180   72   83   35.00000    6.33342  81.9%  28.2  211s
 155793 108019   20.53672   65   22   35.00000    6.53440  81.3%  28.2  216s
 161359 111765   31.76171   59  118   35.00000    6.58937  81.2%  28.0  220s
 166932 115631   29.03651   65   31   35.00000    6.59306  81.2%  27.8  225s
 172290 119499   15.24223   52  129   35.00000    6.62619  81.1%  27.7  230s
 178384 123672   24.04881   58   33   35.00000    6.65095  81.0%  27.7  236s
 182876 126775   19.55766   57  114   35.00000    6.88443  80.3%  27.7  240s
 189827 131982   15.48761   60   54   35.00000    7.06516  79.8%  27.6  246s
 194612 135638   23.20718   58  126   35.00000    7.06657  79.8%  27.6  251s
 199663 139663   13.49236   49   56   35.00000    7.06680  79.8%  27.7  255s
 205983 144464   24.07833   60   46   35.00000    7.06762  79.8%  27.8  261s
 210641 148002   12.81359   48   93   35.00000    7.06926  79.8%  27.9  266s
 215291 151399   27.09213   66   74   35.00000    7.07008  79.8%  28.0  271s
 219849 154872   15.55598   50   36   35.00000    7.07107  79.8%  28.1  276s
 224732 158290   22.07653   50   57   35.00000    7.07254  79.8%  28.2  280s
 229298 161369   32.04778   81   60   35.00000    7.07463  79.8%  28.3  285s
 233851 164489   21.07828   51   66   35.00000    7.08512  79.8%  28.5  291s
 239052 168450   27.09199   57   41   35.00000    7.08892  79.7%  28.5  296s
 244060 172091    9.50209   42   62   35.00000    7.09138  79.7%  28.5  301s
 249661 176197 infeasible   86        35.00000    7.09365  79.7%  28.5  306s
 254992 179988   28.07383   59  101   35.00000    7.09536  79.7%  28.5  311s
 259843 183399   11.08084   34   68   35.00000    7.09668  79.7%  28.5  315s
 264071 186422   14.06310   52  149   35.00000    7.09754  79.7%  28.4  320s
 269192 189951   13.12766   33   76   35.00000    7.09940  79.7%  28.4  325s
 273986 193153   10.11721   31   75   35.00000    7.09940  79.7%  28.5  330s
 278194 195919 infeasible   86        35.00000    7.10396  79.7%  28.6  335s
 282436 198546   22.06047   52   50   35.00000    7.10779  79.7%  28.8  340s
 287931 202365   22.07131   51   65   35.00000    7.11025  79.7%  28.8  345s
 292807 205921   23.06803   55   68   35.00000    7.11230  79.7%  28.9  350s
 297845 209332   12.12414   39   52   35.00000    7.11291  79.7%  28.9  356s
 303181 213152   14.07766   44   69   35.00000    7.11436  79.7%  28.9  361s
 308260 216848    8.16226   37  108   35.00000    7.11436  79.7%  29.0  365s
 312607 220030   17.07254   35   53   35.00000    7.11598  79.7%  29.1  370s
 316491 222844   33.53257   76  157   35.00000    7.11680  79.7%  29.1  376s
 321662 226564   29.43681   76   88   35.00000    7.11780  79.7%  29.2  381s
 326806 230231   20.45975   64   96   35.00000    7.11906  79.7%  29.2  386s
 331593 233489   23.36684   62   79   35.00000    7.11926  79.7%  29.3  391s
 336222 236731   30.35156   58   81   35.00000    7.11926  79.7%  29.4  397s
 339381 238883 infeasible   62        35.00000    7.11926  79.7%  29.4  400s
 344667 242733   33.14105   75   82   35.00000    7.12172  79.7%  29.5  405s
 349362 246020   31.53318   66   27   35.00000    7.12172  79.7%  29.6  411s
 354114 249246    7.59948   40  176   35.00000    7.12869  79.6%  29.6  417s
 356320 250647   23.07369   53  121   35.00000    7.12869  79.6%  29.7  420s
 359571 252707   25.05189   76   36   35.00000    7.13197  79.6%  29.8  425s
 365870 257032   19.13320   49   48   35.00000    7.13890  79.6%  29.7  430s
 371684 261306   13.15364   44  124   35.00000    7.14136  79.6%  29.7  435s
 376309 264240   33.32153   64   87   35.00000    7.14146  79.6%  29.7  440s
 381412 267796   26.06076   55   54   35.00000    7.14521  79.6%  29.6  445s
 386958 271775   29.05623   65   43   35.00000    7.14697  79.6%  29.6  450s
 392428 275615     cutoff   85        35.00000    7.14697  79.6%  29.5  455s
 398731 279943   23.09177   49   64   35.00000    7.14812  79.6%  29.5  461s
 403631 283336    8.14423   33   86   35.00000    7.14962  79.6%  29.5  465s
 408574 287010   14.10706   41   60   35.00000    7.15065  79.6%  29.4  470s
 415208 291727   15.56602   47   70   35.00000    7.15207  79.6%  29.4  476s
 420290 295356   25.05290   55   45   35.00000    7.15207  79.6%  29.3  481s
 423889 297970   28.37626   68   77   35.00000    7.15259  79.6%  29.3  486s
 429217 301691   15.44908   57  132   35.00000    7.15447  79.6%  29.3  490s
 435742 306384   25.62393   63   80   35.00000    7.15447  79.6%  29.2  496s
 440960 310131   24.03228   70   25   35.00000    7.15447  79.6%  29.1  500s
 445646 313245   21.05045   56   56   35.00000    7.15592  79.6%  29.1  505s
 450430 316714   33.25400   78  105   35.00000    7.15773  79.5%  29.1  511s
 455162 320164   28.08062   53   31   35.00000    7.15794  79.5%  29.1  516s
 460107 323693   11.12576   24   42   35.00000    7.15920  79.5%  29.1  521s
 465185 327443    7.67507   33  205   35.00000    7.16043  79.5%  29.1  526s
 470216 330920   27.63506   66  116   35.00000    7.16166  79.5%  29.0  531s
 474327 333815 infeasible   41        35.00000    7.16330  79.5%  29.0  535s
 480131 337955   33.53224   75   55   35.00000    7.16453  79.5%  28.9  540s
 484535 340976   27.04368   63   33   35.00000    7.16576  79.5%  29.0  546s
 489554 344608   20.10510   46   35   35.00000    7.16658  79.5%  28.9  550s
 494771 348347 infeasible   63        35.00000    7.16801  79.5%  28.9  555s
 501404 352998   17.11658   39   41   35.00000    7.16963  79.5%  28.8  561s
 504430 355150   12.16931   36   71   35.00000    7.16986  79.5%  28.8  565s
 508681 358074   29.69362   82  101   35.00000    7.16986  79.5%  28.8  570s
 514173 361978   28.09937   55   35   35.00000    7.17257  79.5%  28.8  575s
 520709 366487   20.53508   57   21   35.00000    7.17365  79.5%  28.7  581s
 526094 370330   23.59819   65   53   35.00000    7.17478  79.5%  28.7  586s
 530932 373676   20.10113   49   59   35.00000    7.17706  79.5%  28.7  590s
 537663 378313 infeasible   37        35.00000    7.17805  79.5%  28.6  595s
 543950 382515   29.12249   66  113   35.00000    7.17990  79.5%  28.6  600s
 549148 386213   30.09286   65   40   35.00000    7.18051  79.5%  28.6  605s
 553729 389297   19.04020   57   22   35.00000    7.18236  79.5%  28.6  610s
 558455 392575 infeasible   43        35.00000    7.18405  79.5%  28.6  615s
 563100 395643    7.70362   40  139   35.00000    7.18456  79.5%  28.6  620s
 568376 399243 infeasible   95        35.00000    7.18607  79.5%  28.6  626s
 573174 402552   27.60392   75   71   35.00000    7.18607  79.5%  28.6  630s
 578019 405806 infeasible   55        35.00000    7.18871  79.5%  28.6  635s
 584635 410373    9.17314   36   82   35.00000    7.18912  79.5%  28.5  641s
 590046 414062   17.13051   38   48   35.00000    7.19035  79.5%  28.5  646s
 594902 417327   33.61574   69   80   35.00000    7.19281  79.4%  28.5  651s
 599480 420344   21.04296   53  180   35.00000    7.19303  79.4%  28.5  657s
 601474 421636    9.70434   33  123   35.00000    7.19322  79.4%  28.5  661s
 607179 425492   10.22174   43  105   35.00000    7.19527  79.4%  28.5  666s
 612317 428943   18.04799   51   26   35.00000    7.19691  79.4%  28.5  671s
 616952 431826   16.58743   49   59   35.00000    7.19855  79.4%  28.5  676s
 622048 435224   19.19332   60  111   35.00000    7.19855  79.4%  28.5  680s
 626533 438015   10.18904   43   78   35.00000    7.20182  79.4%  28.5  685s
 631880 441455   27.55045   73   39   35.00000    7.20182  79.4%  28.5  690s
 636713 444663   10.17583   29   91   35.00000    7.20182  79.4%  28.5  695s
 641566 447983    8.65848   40  136   35.00000    7.20205  79.4%  28.5  700s
 648048 452275 infeasible   68        35.00000    7.20205  79.4%  28.6  705s
 654556 456515 infeasible   83        35.00000    7.20697  79.4%  28.6  711s
 659738 459910   11.58582   47   59   35.00000    7.20779  79.4%  28.6  715s
 663236 462165   25.54138   55   36   35.00000    7.20779  79.4%  28.6  720s
 668408 465430   18.56349   54   45   35.00000    7.20779  79.4%  28.7  725s
 673590 468633    8.17173   38   64   35.00000    7.22544  79.4%  28.7  731s
 679191 472189   32.56368   66   77   35.00000    7.24568  79.3%  28.7  736s
 684016 475295   22.55803   57   55   35.00000    7.24896  79.3%  28.7  741s
 689100 478599   32.67104   71  137   35.00000    7.27478  79.2%  28.7  745s
 695476 482505   28.14853   58   67   35.00000    7.28157  79.2%  28.7  750s
 700374 485665   15.56948   52  115   35.00000    7.28157  79.2%  28.7  755s
 706020 489176 infeasible   58        35.00000    7.29749  79.2%  28.7  761s
 711844 492774   33.56834   82   55   35.00000    7.30920  79.1%  28.6  765s
 718507 496738   18.21125   39   76   35.00000    7.31248  79.1%  28.6  771s
 723633 499920   28.20546   65   86   35.00000    7.31576  79.1%  28.6  775s
 729027 503394   18.24411   45   65   35.00000    7.31740  79.1%  28.5  780s
 734133 506589    8.69393   33   92   35.00000    7.31904  79.1%  28.5  785s
 739485 509912   18.22177   40   58   35.00000    7.31986  79.1%  28.5  791s
 744638 512964   15.23666   37   72   35.00000    7.32068  79.1%  28.4  796s
 750113 516230   28.63286   73   90   35.00000    7.32232  79.1%  28.4  800s
 754591 518706   30.57647   59   53   35.00000    7.32519  79.1%  28.4  805s
 760824 522303   10.30510   35  107   35.00000    7.32642  79.1%  28.3  812s
 763899 524216   30.07872   76   53   35.00000    7.32665  79.1%  28.3  815s
 770732 528102   14.56944   41   52   35.00000    7.32904  79.1%  28.3  821s
 776122 531162   30.59867   70   97   35.00000    7.33033  79.1%  28.3  826s
 777818 532135   10.30101   39   83   35.00000    7.33215  79.1%  28.3  830s
 783269 535452   20.57594   53   55   35.00000    7.33215  79.1%  28.3  835s
 788134 538401   25.57066   66   63   35.00000    7.33238  79.1%  28.3  840s
 793212 541557 infeasible   84        35.00000    7.34222  79.0%  28.3  845s
 798714 545035   27.39053   64  114   35.00000    7.40246  78.9%  28.3  851s
 802096 547134   26.52307   67  165   35.00000    7.41978  78.8%  28.3  855s
 806853 550084   23.23931   65  115   35.00000    7.43602  78.8%  28.3  860s
 812137 553335   14.24568   36   90   35.00000    7.44255  78.7%  28.3  865s
 816736 556003    7.67500   34  214   35.00000    7.44255  78.7%  28.3  870s
 821743 558905   20.04672   46   49   35.00000    7.48026  78.6%  28.3  875s
 826579 561820   16.54696   50   47   35.00000    7.52000  78.5%  28.4  881s
 830875 564295   21.18649   57  100   35.00000    7.52468  78.5%  28.4  886s
 833691 565971   33.55372   73   49   35.00000    7.52728  78.5%  28.4  890s
 839214 569361   17.25545   48  112   35.00000    7.52888  78.5%  28.4  895s
 844768 573021   14.07690   40   97   35.00000    7.56006  78.4%  28.4  901s
 849508 575942   16.07296   52   49   35.00000    7.56337  78.4%  28.4  906s
 854435 578900   11.56369   34  160   35.00000    7.57041  78.4%  28.4  910s
 861184 583183   26.04567   63   38   35.00000    7.57254  78.4%  28.4  915s
 867231 587577   20.60075   50   93   35.00000    7.58439  78.3%  28.4  921s
 872182 590979     cutoff   75        35.00000    7.58919  78.3%  28.4  926s
 877109 594352   33.10812   65   44   35.00000    7.59221  78.3%  28.3  930s
 881631 597200   18.56308   46   50   35.00000    7.59351  78.3%  28.3  935s
 886671 600550    7.61267   38   91   35.00000    7.59535  78.3%  28.3  940s
 893714 605006   17.65821   40  106   35.00000    7.59863  78.3%  28.3  946s
 897494 607229   11.57973   42  127   35.00000    7.60061  78.3%  28.3  950s
 902597 610454   17.19153   42   74   35.00000    7.60163  78.3%  28.2  955s
 907338 613560    8.60695   42  143   35.00000    7.61243  78.3%  28.2  961s
 912776 617065   15.58845   41   58   35.00000    7.61518  78.2%  28.2  965s
 918047 620524 infeasible   74        35.00000    7.61703  78.2%  28.2  970s
 924878 625052   33.61219   74   98   35.00000    7.63652  78.2%  28.1  975s
 929806 628390     cutoff   82        35.00000    7.63895  78.2%  28.1  980s
 936755 633188   10.89544   45  119   35.00000    7.64218  78.2%  28.1  985s
 943276 637507   14.56660   42  118   35.00000    7.64574  78.2%  28.0  990s
 949593 641891   16.19079   43  138   35.00000    7.64812  78.1%  28.0  995s
 956051 646308   22.58340   58   56   35.00000    7.65040  78.1%  28.0 1001s
 961728 650080 infeasible   56        35.00000    7.66021  78.1%  28.0 1006s
 966694 653305 infeasible   82        35.00000    7.66257  78.1%  28.0 1010s
 973039 657287   33.41020   76   64   35.00000    7.67455  78.1%  28.0 1015s
 979466 661495   22.61975   57   70   35.00000    7.70109  78.0%  28.0 1020s
 984920 664839   21.63459   64   65   35.00000    7.71517  78.0%  27.9 1025s
 991512 668987   32.56241   68   69   35.00000    7.75609  77.8%  27.9 1031s
 994080 670535   15.57693   49   52   35.00000    7.76162  77.8%  27.9 1035s
 998226 673191 infeasible   71        35.00000    7.79566  77.7%  27.9 1040s
 1003563 676521    9.43174   39  221   35.00000    7.82490  77.6%  27.9 1045s
 1008667 679914   20.55212   55   51   35.00000    7.85368  77.6%  27.9 1050s
 1014029 683436   12.56403   33   82   35.00000    7.89038  77.5%  27.9 1055s
 1018387 686154   14.32653   44  121   35.00000    7.95524  77.3%  27.9 1060s
 1025488 690633   28.84662   75  144   35.00000    7.97603  77.2%  27.9 1066s
 1028577 692631   31.54327   67   28   35.00000    7.97603  77.2%  27.9 1070s
 1033898 696467   33.39637   52   82   35.00000    8.06066  77.0%  27.9 1076s
 1036549 698497   33.04628   84  105   35.00000    8.06137  77.0%  27.9 1081s
 1042162 702628   25.56800   69   72   35.00000    8.06190  77.0%  27.9 1086s
 1047400 706432   17.04899   39   34   35.00000    8.06255  77.0%  27.9 1091s
 1050450 708676   31.02064   68   26   35.00000    8.06315  77.0%  27.9 1095s
 1055664 712597 infeasible   79        35.00000    8.06386  77.0%  27.9 1101s
 1060710 716345   27.05663   65   55   35.00000    8.06393  77.0%  27.9 1106s
 1064429 719028   23.36795   69  102   35.00000    8.06434  77.0%  27.9 1110s
 1069408 722803 infeasible   79        35.00000    8.06434  77.0%  27.9 1115s
 1074755 726980   20.06570   57   70   35.00000    8.06476  77.0%  27.9 1120s
 1079071 730328   32.34511   69  118   35.00000    8.06518  77.0%  27.9 1125s
 1084478 734360   33.04665   81   39   35.00000    8.06539  77.0%  27.9 1130s
 1089711 738442   15.22042   48  126   35.00000    8.06571  77.0%  27.9 1135s
 1096310 743367   30.49814   72  111   35.00000    8.06624  77.0%  27.9 1141s
 1101463 747221   16.48542   45   57   35.00000    8.06672  77.0%  27.9 1146s
 1106942 751451   20.07279   55   65   35.00000    8.06680  77.0%  27.9 1151s
 1109601 753343   26.07075   72   84   35.00000    8.06681  77.0%  27.9 1155s
 1114749 757064   10.06260   37   59   35.00000    8.06709  77.0%  27.9 1160s
 1120484 761450   25.02522   58   20   35.00000    8.06753  76.9%  27.9 1165s
 1126031 765437   27.44835   67   94   35.00000    8.06762  76.9%  28.0 1170s
 1130852 769007   28.05432   81   72   35.00000    8.06789  76.9%  28.0 1175s
 1135793 772632   28.25646   64   54   35.00000    8.06803  76.9%  28.0 1180s
 1140791 776418   11.06025   29   59   35.00000    8.06827  76.9%  28.0 1185s
 1146003 780209   32.77265   72   83   35.00000    8.06867  76.9%  28.0 1190s
 1150491 783416   14.08832   48   99   35.00000    8.06889  76.9%  28.1 1195s
 1156170 787544   11.09877   31   68   35.00000    8.06926  76.9%  28.1 1200s
 1161250 791417 infeasible   45        35.00000    8.06926  76.9%  28.1 1206s
 1166044 794670   33.50885   63   41   35.00000    8.06993  76.9%  28.1 1211s
 1171349 798433    8.11926   40   96   35.00000    8.07025  76.9%  28.1 1216s
 1176052 801836   19.04305   45   27   35.00000    8.07034  76.9%  28.1 1221s
 1180582 805049   31.25915   88   94   35.00000    8.07090  76.9%  28.2 1225s
 1183067 806736     cutoff   80        35.00000    8.07127  76.9%  28.2 1231s
 1188779 810836   32.03126   83   39   35.00000    8.07172  76.9%  28.2 1236s
 1193593 814030   33.40086   62   83   35.00000    8.07246  76.9%  28.2 1241s
 1197480 816656   23.02463   56   18   35.00000    8.07254  76.9%  28.2 1245s
 1203750 820802   22.08822   60   61   35.00000    8.07377  76.9%  28.3 1252s
 1206856 822942   25.43047   72   90   35.00000    8.07419  76.9%  28.3 1255s
 1211682 826197   11.08259   34   36   35.00000    8.07510  76.9%  28.3 1260s
 1215996 829172    9.11661   33   72   35.00000    8.07664  76.9%  28.4 1266s
 1219467 831358    8.09426   29   55   35.00000    8.07746  76.9%  28.4 1271s
 1224079 834496   11.09734   36   73   35.00000    8.07925  76.9%  28.4 1276s
 1227492 836667   20.07577   60  119   35.00000    8.08066  76.9%  28.4 1280s
 1232796 840059   22.04386   58   30   35.00000    8.08334  76.9%  28.5 1285s
 1238662 844223   27.05053   66   48   35.00000    8.08439  76.9%  28.5 1290s
 1244104 848140   33.58159   90   84   35.00000    8.08558  76.9%  28.5 1295s
 1249215 851710   31.07024   73   81   35.00000    8.08684  76.9%  28.5 1301s
 1254841 855691   15.21084   40   51   35.00000    8.08767  76.9%  28.5 1306s
 1260070 859534 infeasible   74        35.00000    8.08853  76.9%  28.5 1310s
 1265293 863327   29.28424   73  105   35.00000    8.08911  76.9%  28.5 1315s
 1270129 866781   33.02862   77   28   35.00000    8.08975  76.9%  28.5 1321s
 1274016 869419   32.54594   85   46   35.00000    8.09008  76.9%  28.5 1325s
 1279446 873347   28.04546   67   45   35.00000    8.09034  76.9%  28.5 1330s
 1284455 876976   28.03391   88   68   35.00000    8.09034  76.9%  28.5 1335s
 1289791 880804   30.61933   78   88   35.00000    8.09136  76.9%  28.5 1340s
 1294702 884225    8.09302   29  120   35.00000    8.09177  76.9%  28.5 1345s
 1299698 887794   32.65557   81  107   35.00000    8.09218  76.9%  28.5 1350s
 1304921 891469   19.09221   46   84   35.00000    8.09234  76.9%  28.5 1356s
 1308267 893871   16.28870   52   99   35.00000    8.09266  76.9%  28.5 1360s
 1313844 897880   13.08646   38   57   35.00000    8.09301  76.9%  28.5 1366s
 1318983 901564   19.55338   60   61   35.00000    8.09331  76.9%  28.5 1371s
 1321288 903333   31.04683   86   85   35.00000    8.09339  76.9%  28.5 1375s
 1326271 906702   14.15252   37   42   35.00000    8.09385  76.9%  28.5 1380s
 1331625 910333 infeasible   86        35.00000    8.09396  76.9%  28.5 1385s
 1337102 914153 infeasible   51        35.00000    8.09448  76.9%  28.5 1391s
 1342492 918077   13.50224   47   34   35.00000    8.09467  76.9%  28.5 1396s
 1347119 921166   14.07212   50   63   35.00000    8.09511  76.9%  28.5 1401s
 1351861 924302   16.06354   43   40   35.00000    8.09549  76.9%  28.5 1406s
 1355384 926748    8.16811   33   94   35.00000    8.09571  76.9%  28.5 1410s
 1361098 930661     cutoff   94        35.00000    8.09591  76.9%  28.5 1415s
 1363350 932286   11.08746   43   68   35.00000    8.09626  76.9%  28.5 1420s
 1368573 935823   22.24800   66  108   35.00000    8.09658  76.9%  28.5 1425s
 1373755 939079   14.95329   48  100   35.00000    8.09699  76.9%  28.5 1430s
 1378663 942390 infeasible   79        35.00000    8.09750  76.9%  28.5 1436s
 1384126 946110   32.43812   92  107   35.00000    8.09767  76.9%  28.5 1441s
 1389604 949852   18.06018   54  113   35.00000    8.09791  76.9%  28.5 1446s
 1394269 952886 infeasible   36        35.00000    8.09844  76.9%  28.5 1451s
 1397324 954803   29.05409   79   49   35.00000    8.09869  76.9%  28.6 1455s
 1402820 958517   21.07112   48   72   35.00000    8.09918  76.9%  28.6 1460s
 1407193 961227   12.23447   44  101   35.00000    8.09940  76.9%  28.6 1465s
 1411463 964085   27.03464   65   24   35.00000    8.09989  76.9%  28.6 1470s
 1416975 967693   25.10756   57   36   35.00000    8.10082  76.9%  28.6 1475s
 1422009 970865   24.24149   65  110   35.00000    8.10119  76.9%  28.6 1481s
 1426885 974060   27.04853   78   39   35.00000    8.10140  76.9%  28.7 1486s
 1430115 976279   10.08943   39  101   35.00000    8.10201  76.9%  28.7 1490s
 1435156 979642   30.04270   85   40   35.00000    8.10270  76.8%  28.7 1495s
 1439791 982536   25.69199   66  110   35.00000    8.10345  76.8%  28.7 1502s
 1442034 983918   15.54170   59  109   35.00000    8.10365  76.8%  28.7 1505s
 1447243 987377   28.10784   64   36   35.00000    8.10447  76.8%  28.8 1511s
 1452761 991217 infeasible   71        35.00000    8.10533  76.8%  28.8 1516s
 1457628 994590   14.08908   47  103   35.00000    8.10545  76.8%  28.8 1521s
 1460802 996875   19.09598   40   55   35.00000    8.10615  76.8%  28.8 1525s
 1466071 1000543   10.09549   32   67   35.00000    8.10697  76.8%  28.8 1531s
 1471533 1004361    9.10026   32   52   35.00000    8.10758  76.8%  28.8 1536s
 1476483 1007665   18.08438   47   70   35.00000    8.10764  76.8%  28.8 1541s
 1478615 1009108   28.07508   61   89   35.00000    8.10805  76.8%  28.8 1545s
 1484116 1012967   13.43031   51  142   35.00000    8.10861  76.8%  28.8 1551s
 1488931 1016300   22.58886   69   86   35.00000    8.10922  76.8%  28.8 1555s
 1495645 1020932   25.07213   69   69   35.00000    8.10967  76.8%  28.9 1561s
 1500968 1024650   19.47012   63   49   35.00000    8.11025  76.8%  28.9 1565s
 1506026 1028042   11.14894   44  116   35.00000    8.11025  76.8%  28.9 1570s
 1512709 1032570     cutoff   89        35.00000    8.11086  76.8%  28.9 1576s
 1518281 1036575     cutoff   66        35.00000    8.11107  76.8%  28.9 1580s
 1522176 1039112   10.51544   37  124   35.00000    8.11148  76.8%  28.9 1585s
 1527828 1043043   19.39252   67   83   35.00000    8.11173  76.8%  28.9 1591s
 1533810 1047335   12.09261   51  103   35.00000    8.11189  76.8%  28.9 1595s
 1540854 1052277   29.53938   65   35   35.00000    8.11247  76.8%  29.0 1601s
 1546324 1056123    9.24935   41  112   35.00000    8.11255  76.8%  29.0 1606s
 1551404 1059699   30.48052   66  104   35.00000    8.11311  76.8%  29.0 1610s
 1558305 1064439   19.62127   53   78   35.00000    8.11333  76.8%  29.0 1616s
 1563127 1067835   10.10041   35   64   35.00000    8.11337  76.8%  29.0 1620s
 1568309 1071392   32.21892   77   96   35.00000    8.11393  76.8%  29.0 1625s
 1573389 1074892   26.50882   62  103   35.00000    8.11414  76.8%  29.0 1631s
 1576022 1076602   33.57323   74   84   35.00000    8.11419  76.8%  29.0 1635s
 1581489 1080476   25.62728   66   93   35.00000    8.11434  76.8%  29.0 1640s
 1587120 1084653 infeasible   49        35.00000    8.11436  76.8%  29.0 1645s
 1590509 1086943   31.54461   74   47   35.00000    8.11436  76.8%  29.0 1650s
 1595738 1090649 infeasible   68        35.00000    8.11516  76.8%  29.1 1655s
 1600761 1094155     cutoff   78        35.00000    8.11516  76.8%  29.1 1660s
 1605275 1097139   11.10496   36   82   35.00000    8.11516  76.8%  29.1 1665s
 1610184 1100466   17.17088   43   62   35.00000    8.11598  76.8%  29.1 1672s
 1613727 1103011   28.03221   73   26   35.00000    8.11598  76.8%  29.1 1676s
 1618939 1106450   17.25969   58   50   35.00000    8.11619  76.8%  29.1 1682s
 1621353 1108076   33.05664   75   85   35.00000    8.11632  76.8%  29.1 1685s
 1626592 1111603   18.14679   46   96   35.00000    8.11680  76.8%  29.2 1691s
 1630177 1113942   14.07771   49   94   35.00000    8.11690  76.8%  29.2 1695s
 1635801 1117925   30.54553   71   52   35.00000    8.11721  76.8%  29.2 1701s
 1639457 1120512   26.04348   65   48   35.00000    8.11762  76.8%  29.2 1705s
 1644587 1124057   19.26364   57   93   35.00000    8.11762  76.8%  29.2 1711s
 1649898 1127723   25.11254   56   69   35.00000    8.11780  76.8%  29.2 1716s
 1653464 1130139   21.08055   57  102   35.00000    8.11780  76.8%  29.2 1721s
 1656930 1132432   16.17512   48  109   35.00000    8.11804  76.8%  29.2 1725s
 1662521 1136472   28.55536   74   49   35.00000    8.11843  76.8%  29.2 1730s
 1667281 1139736   26.07105   57  131   35.00000    8.11844  76.8%  29.2 1735s
 1672325 1143231   31.54184   72   51   35.00000    8.11885  76.8%  29.3 1741s
 1675755 1145560   21.55385   64   52   35.00000    8.11906  76.8%  29.3 1746s
 1681180 1149394   14.08234   41   99   35.00000    8.11926  76.8%  29.3 1751s
 1684550 1151730   33.54112   79   36   35.00000    8.11926  76.8%  29.3 1755s
 1689664 1155294   28.04389   70   30   35.00000    8.11926  76.8%  29.3 1761s
 1694732 1158704   30.36031   65   73   35.00000    8.11968  76.8%  29.3 1767s
 1697479 1160689   29.02548   71   32   35.00000    8.11968  76.8%  29.3 1771s
 1701321 1163411   16.64584   51  103   35.00000    8.11968  76.8%  29.3 1775s
 1706695 1167143   12.10579   34   86   35.00000    8.12008  76.8%  29.3 1781s
 1710191 1169556   33.28916   86   50   35.00000    8.12049  76.8%  29.3 1786s
 1713478 1171855   30.88817   68   96   35.00000    8.12049  76.8%  29.3 1790s
 1717195 1174433   28.84338   81  103   35.00000    8.12049  76.8%  29.3 1795s
 1721946 1177691   31.42563   77  137   35.00000    8.12172  76.8%  29.4 1800s

Explored 1722578 nodes (50580776 simplex iterations) in 1800.05 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 35 36 40 ... 164

Time limit reached
Best objective 3.500000000000e+01, best bound 9.000000000000e+00, gap 74.2857%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24     71.9 MiB     71.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26     71.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27     71.9 MiB      0.0 MiB       m2 = m.construct()
    28     71.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29     71.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30     71.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31     71.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32     71.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33     71.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34     71.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43     71.9 MiB      0.0 MiB       m2.update()
    44     71.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46     71.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50     71.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54     71.9 MiB      0.0 MiB       if(find_optimum):
    55     72.2 MiB      0.2 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56     72.2 MiB      0.0 MiB           m2.update()
    57     72.2 MiB      0.0 MiB           new_obj = LinExpr(0)
    58     72.2 MiB      0.0 MiB           for var in current_vars:
    59     72.2 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60     72.2 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61     72.2 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62     72.2 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1732.5 MiB   1660.4 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1732.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1732.5 MiB      0.0 MiB       j = 0
    69   1732.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1732.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1732.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1732.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1732.5 MiB      0.0 MiB       if m2.status == 9:
    78   1732.5 MiB      0.0 MiB           result.timeout = True
    79   1732.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1732.5 MiB      0.0 MiB           result.solution = True
    81   1732.5 MiB      0.0 MiB           result.feasible = True
    82   1732.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1732.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1732.5 MiB      0.0 MiB           for v in current_vars:
    85   1732.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1732.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1732.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89   1732.5 MiB      0.0 MiB                       res_vec[j] = 0
    90   1732.5 MiB      0.0 MiB                   j = j+1
    91                             
    92   1732.5 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 16:52:03 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.tra,lab' -mdp /tmp/tmpyoxor7gx

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpyoxor7gx"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000154, setup 0.00)

Time for model construction: 0.019 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      37 (1 initial)
Transitions: 45
Choices:     37

Transition matrix: 133 nodes (3 terminal), 45 minterms, vars: 6r/6c/1nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 146 iterations in 0.00 seconds (average 0.000027, setup 0.00)

yes = 6, no = 1, maybe = 30

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=6, nodes=128] [6.0 KB]
Adding sparse bits... [levels=6-6, num=1, compact=1/1] [0.2 KB]
Creating vector for yes... [dist=2, compact] [0.1 KB]
Allocating iteration vectors... [3 x 0.3 KB]
TOTAL: [7.2 KB]

Starting iterations...

Iterative method: 930 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 0.11111111022929832

Time for model checking: 0.008 seconds.

Result: 0.11111111022929832 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 1584 columns and 4117 nonzeros
Variable types: 528 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e-01, 2e+00]
Presolve removed 289 rows and 280 columns
Presolve time: 0.01s
Presolved: 1296 rows, 1304 columns, 3548 nonzeros
Variable types: 486 continuous, 818 integer (818 binary)

Root relaxation: objective 1.000000e-01, 1 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.10000    0    1          -    0.10000      -     -    0s
H    0     0                     173.0000000    0.10000   100%     -    0s
     0     2    1.20000    0    1  173.00000    1.20000  99.3%     -    0s
H   79    84                     104.0000000    3.20000  96.9%   2.3    0s
H   81    85                      53.0000000    3.20000  94.0%   2.3    0s
H   85    88                      50.0000000    3.20000  93.6%   2.4    0s
H   88    91                      49.0000000    3.20000  93.5%   2.4    0s
H  707   627                      48.0000000    3.40000  92.9%   5.6    1s
H 2396  1874                      41.0000000    3.40000  91.7%   5.9    2s
 10115  5769   38.60000   59   17   41.00000    5.20000  87.3%   7.4    5s
H15488  9187                      37.0000000    5.40000  85.4%   7.5    7s
 21619 13207     cutoff   58        37.00000    5.80000  84.3%   7.8   10s
 37961 24794   25.90833   60    5   37.00000    6.40000  82.7%   8.0   15s
 55268 36651 infeasible   64        37.00000    6.80000  81.6%   8.1   20s
 69538 45923   29.63758   71    4   37.00000    6.80000  81.6%   8.4   25s
 89357 59719   33.50909   53   15   37.00000    7.00000  81.1%   8.3   30s
 109998 74431   13.93333   38    3   37.00000    7.00000  81.1%   8.2   35s
 132847 89925   25.74048   58    4   37.00000    7.40000  80.0%   8.3   40s
 152840 103382     cutoff   52        37.00000    7.80000  78.9%   8.3   45s
 173072 116110     cutoff   53        37.00000    7.80000  78.9%   8.4   50s
 186380 124874   34.32917   50   12   37.00000    7.80000  78.9%   8.5   55s
 205867 137271   21.53333   50    7   37.00000    7.80000  78.9%   8.6   60s
 223432 148580    9.80000   30    2   37.00000    7.80000  78.9%   8.7   65s
 242815 162432   27.22000   64    6   37.00000    8.00000  78.4%   8.6   70s
 260521 174971   16.60000   43    2   37.00000    8.00000  78.4%   8.6   75s
 279113 187828     cutoff   57        37.00000    8.00000  78.4%   8.5   80s
 300889 203058   10.80000   37    2   37.00000    8.00000  78.4%   8.5   85s
 326275 220780   12.80000   36    2   37.00000    8.00000  78.4%   8.4   90s
 345363 233521     cutoff   61        37.00000    8.00000  78.4%   8.4   95s
 365791 246344   28.33333   56   12   37.00000    8.30000  77.6%   8.5  100s
 389553 261731 infeasible   53        37.00000    8.40000  77.3%   8.5  105s
 411500 276155    9.40000   33    1   37.00000    8.40000  77.3%   8.5  110s
 432659 289809 infeasible   70        37.00000    8.80000  76.2%   8.5  115s
 456537 304737   22.06667   53    9   37.00000    8.80000  76.2%   8.6  120s
 477361 317885   25.86667   39   10   37.00000    8.80000  76.2%   8.6  125s
 500642 332513 infeasible   48        37.00000    8.80000  76.2%   8.6  130s
 520857 345497   29.88571   46   13   37.00000    8.80000  76.2%   8.7  135s
 539896 357433   31.73333   69    5   37.00000    8.80000  76.2%   8.7  140s
 561444 370835     cutoff   86        37.00000    8.80000  76.2%   8.7  145s
 582351 384132   19.20000   42    8   37.00000    8.80000  76.2%   8.8  150s
 604954 398412   28.30000   67    6   37.00000    8.80000  76.2%   8.8  155s
 626236 411808   16.80000   35    7   37.00000    8.80000  76.2%   8.8  160s
 645901 424267   17.20000   38    9   37.00000    8.80000  76.2%   8.9  165s
 666679 437857 infeasible   55        37.00000    8.80000  76.2%   8.9  170s
 689844 452962   15.40000   37    6   37.00000    8.80000  76.2%   8.9  175s
 706790 464073   35.71111   57    9   37.00000    8.80000  76.2%   8.9  180s
 725725 475878   27.33333   41    8   37.00000    8.80000  76.2%   8.9  185s
 744767 488052    9.80000   35    2   37.00000    8.80000  76.2%   8.9  190s
 766580 502922 infeasible   50        37.00000    9.00000  75.7%   8.9  195s
 787245 516813   33.80000   54   13   37.00000    9.00000  75.7%   8.9  200s
 807002 530094   18.80000   44    7   37.00000    9.00000  75.7%   8.9  205s
 826458 543869   26.80000   49    7   37.00000    9.00000  75.7%   8.9  210s
 845898 557169 infeasible   52        37.00000    9.00000  75.7%   8.8  215s
 866783 571242   20.73333   45    5   37.00000    9.00000  75.7%   8.8  220s
 890779 587688   35.95000   64    7   37.00000    9.00000  75.7%   8.8  225s
 913120 602820 infeasible   52        37.00000    9.00000  75.7%   8.8  230s
 932543 615991   20.80000   48    7   37.00000    9.00000  75.7%   8.8  235s
 951816 629136   14.20000   38    3   37.00000    9.00000  75.7%   8.8  240s
 969200 641242   26.40000   62    3   37.00000    9.00000  75.7%   8.7  245s
 988147 654117 infeasible   78        37.00000    9.00000  75.7%   8.7  250s
 1010303 669147   11.20000   32    3   37.00000    9.00000  75.7%   8.7  255s
 1032737 684312   34.00000   51    8   37.00000    9.10000  75.4%   8.7  260s
 1050638 695085   20.13333   41    6   37.00000    9.20000  75.1%   8.7  265s
 1065248 703757     cutoff   44        37.00000    9.20000  75.1%   8.8  270s
 1082629 714002   10.20000   35    3   37.00000    9.20000  75.1%   8.8  275s
 1102448 726516   21.80000   56    4   37.00000    9.40000  74.6%   8.8  280s
 1120885 738646   17.60000   46    3   37.00000    9.40000  74.6%   8.8  285s
 1141754 752722   34.06667   63    8   37.00000    9.40000  74.6%   8.8  290s
H1158768 756938                      36.0000000    9.40000  73.9%   8.8  295s
 1178514 769919 infeasible   51        36.00000    9.40000  73.9%   8.8  300s
 1195199 780325   32.23333   53   12   36.00000    9.60000  73.3%   8.8  305s
 1214374 792292   27.40000   48   11   36.00000    9.60000  73.3%   8.8  310s
 1232175 803143   18.66667   37    7   36.00000    9.60000  73.3%   8.8  315s
 1249171 813481   27.93333   55   12   36.00000    9.60000  73.3%   8.8  320s
 1267301 824250   23.00000   49    4   36.00000    9.80000  72.8%   8.8  325s
 1281613 833463   32.92500   64   15   36.00000    9.80000  72.8%   8.8  330s
 1298210 843778   28.90000   48    9   36.00000    9.80000  72.8%   8.8  335s
 1315929 854601    9.80000   31    2   36.00000    9.80000  72.8%   8.8  340s
 1333071 865123   30.00000   57   10   36.00000    9.80000  72.8%   8.8  345s
 1344020 872083   14.60000   40    4   36.00000    9.80000  72.8%   8.9  350s
 1359852 881947   15.10000   41    3   36.00000    9.80000  72.8%   8.9  355s
 1377827 892913   32.20000   57   10   36.00000    9.80000  72.8%   8.9  360s
 1392493 901989   14.93333   40    3   36.00000    9.80000  72.8%   8.9  365s
 1407446 910938   26.86667   52   10   36.00000    9.80000  72.8%   8.9  370s
 1424563 921302   19.48889   42    9   36.00000    9.80000  72.8%   8.9  375s
 1443998 933311   33.50667   69   10   36.00000    9.80000  72.8%   8.9  380s
 1459245 942727   28.66667   45   12   36.00000    9.80000  72.8%   8.9  385s
 1478099 954212 infeasible   48        36.00000    9.80000  72.8%   8.9  390s
 1499232 967221   26.23333   44   13   36.00000    9.80000  72.8%   8.9  395s
 1517145 978647     cutoff   66        36.00000    9.80000  72.8%   8.9  400s
 1535976 990562   25.73333   59    5   36.00000    9.80000  72.8%   8.9  405s
 1551190 999990 infeasible   60        36.00000    9.80000  72.8%   8.9  410s
 1568308 1010671   21.20000   43    8   36.00000    9.80000  72.8%   8.9  415s
 1586245 1021769   28.68000   57    9   36.00000    9.80000  72.8%   8.9  420s
 1604748 1033182    9.80000   30    2   36.00000    9.80000  72.8%   8.9  425s
 1622450 1044395   32.80000   49   12   36.00000    9.80000  72.8%   8.9  430s
 1638229 1054415 infeasible   58        36.00000    9.80000  72.8%   8.9  435s
 1651418 1062731     cutoff   52        36.00000    9.80000  72.8%   8.9  440s
 1668343 1073148     cutoff   65        36.00000    9.80000  72.8%   8.9  445s
 1685922 1084126   18.40000   41    6   36.00000    9.80000  72.8%   8.9  450s
 1704469 1095474   12.20000   35    3   36.00000    9.80000  72.8%   8.9  455s
 1721653 1105893   14.60000   36    4   36.00000    9.80000  72.8%   8.9  460s
 1741389 1118036   10.80000   33    2   36.00000    9.80000  72.8%   8.9  465s
 1759767 1129384     cutoff   43        36.00000    9.80000  72.8%   8.9  470s
 1778278 1140881   16.03333   42    5   36.00000    9.80000  72.8%   8.9  475s
 1795616 1151553   20.53220   54    4   36.00000    9.80000  72.8%   8.9  480s
 1815098 1163834   25.63333   61    5   36.00000    9.80000  72.8%   8.9  485s
 1832714 1174353   10.80000   32    2   36.00000    9.80000  72.8%   8.9  490s
 1849024 1184236   18.60000   52    3   36.00000    9.80000  72.8%   8.9  495s
 1868139 1195860   34.00000   43   13   36.00000    9.80000  72.8%   8.9  500s
 1884246 1205849   25.40000   52    6   36.00000    9.80000  72.8%   8.9  505s
 1898660 1214897 infeasible   63        36.00000    9.80000  72.8%   8.9  510s
 1916295 1225696   20.13333   44    6   36.00000    9.80000  72.8%   8.9  515s
 1935995 1238026   14.10000   38    3   36.00000    9.80000  72.8%   8.9  520s
 1950763 1247192   16.86667   43    3   36.00000    9.80000  72.8%   9.0  525s
 1964619 1255903   15.60000   44    4   36.00000    9.80000  72.8%   9.0  530s
 1982433 1267077 infeasible   45        36.00000    9.80000  72.8%   9.0  535s
 1999715 1277850   30.88598   68    6   36.00000    9.80000  72.8%   9.0  540s
 2020847 1290710   32.20000   49   12   36.00000    9.80000  72.8%   9.0  545s
 2038854 1302124   15.10000   44    3   36.00000    9.80000  72.8%   9.0  550s
 2057577 1313618   34.55000   58   14   36.00000    9.80000  72.8%   9.0  555s
 2074295 1324233   13.40000   37    6   36.00000    9.80000  72.8%   9.0  560s
 2091471 1335040   28.43333   48   10   36.00000    9.80000  72.8%   9.0  565s
 2110404 1346722   31.33333   64    5   36.00000    9.80000  72.8%   9.0  570s
 2127910 1357228   27.11111   59    5   36.00000    9.80000  72.8%   9.0  575s
 2145483 1367900   33.15333   55   10   36.00000    9.80000  72.8%   9.0  580s
 2165544 1380529   17.86667   48    3   36.00000    9.80000  72.8%   9.0  585s
 2182479 1390778   17.60000   48    4   36.00000    9.80000  72.8%   9.0  590s
 2200874 1402165   25.93333   48    8   36.00000    9.80000  72.8%   9.0  595s
 2220601 1414353   24.00000   47    7   36.00000    9.80000  72.8%   9.0  600s
 2237842 1425063 infeasible   48        36.00000    9.80000  72.8%   9.0  605s
 2250681 1433177   32.80000   56    9   36.00000    9.80000  72.8%   9.0  610s
 2269245 1444670   29.56667   52    8   36.00000    9.80000  72.8%   9.0  615s
 2289555 1457631   23.73333   45    4   36.00000   10.00000  72.2%   9.0  620s
 2309328 1471071   19.00000   45    5   36.00000   10.00000  72.2%   9.0  625s
 2328212 1483684   25.68889   58    5   36.00000   10.00000  72.2%   8.9  630s
 2347946 1496786   23.80000   50    7   36.00000   10.00000  72.2%   8.9  635s
 2369016 1510419     cutoff   68        36.00000   10.00000  72.2%   8.9  640s
 2386243 1521915   26.20000   47    5   36.00000   10.00000  72.2%   8.9  645s
 2402404 1532501   19.20000   39    9   36.00000   10.00000  72.2%   8.9  650s
 2422076 1545090   23.23333   54    4   36.00000   10.00000  72.2%   8.9  655s
 2438322 1555695   15.60000   39    4   36.00000   10.00000  72.2%   8.9  660s
 2457969 1568665 infeasible   53        36.00000   10.00000  72.2%   8.9  665s
 2478752 1582529   22.66667   43    7   36.00000   10.00000  72.2%   8.9  670s
 2495502 1593719 infeasible   57        36.00000   10.00000  72.2%   8.9  675s
 2512454 1604861   30.98333   54    8   36.00000   10.00000  72.2%   8.9  680s
 2531230 1617315 infeasible   62        36.00000   10.00000  72.2%   8.8  685s
 2551198 1630801   33.10000   71   10   36.00000   10.00000  72.2%   8.8  690s
 2572331 1644710   28.63333   69    5   36.00000   10.00000  72.2%   8.8  695s
 2591811 1657861   15.93333   42    3   36.00000   10.00000  72.2%   8.8  700s
 2611754 1671344   11.30000   32    1   36.00000   10.00000  72.2%   8.8  705s
 2630734 1684100   33.64000   64    4   36.00000   10.00000  72.2%   8.8  710s
 2644297 1693153   17.00000   44    5   36.00000   10.00000  72.2%   8.8  715s
 2657671 1702390   31.58333   73    4   36.00000   10.00000  72.2%   8.8  720s
 2677780 1716094   23.63333   60    5   36.00000   10.00000  72.2%   8.8  725s
 2698450 1729951     cutoff   58        36.00000   10.00000  72.2%   8.8  730s
 2717918 1742944   31.00000   51   10   36.00000   10.00000  72.2%   8.8  735s
 2736828 1755616   13.80000   35    2   36.00000   10.00000  72.2%   8.8  740s
 2754335 1767063 infeasible   58        36.00000   10.00000  72.2%   8.8  745s
 2773937 1780330   17.80000   45    2   36.00000   10.00000  72.2%   8.7  750s
 2790432 1791306   10.40000   30    1   36.00000   10.00000  72.2%   8.7  755s
 2808459 1803143   32.75000   59    7   36.00000   10.00000  72.2%   8.7  760s
 2827657 1815877   10.40000   30    1   36.00000   10.00000  72.2%   8.7  765s
 2849415 1830564   12.80000   36    2   36.00000   10.00000  72.2%   8.7  770s
 2867258 1842465   34.40000   61   16   36.00000   10.00000  72.2%   8.7  775s
 2884331 1854060   12.80000   40    2   36.00000   10.00000  72.2%   8.7  780s
 2903459 1866748   27.73148   49    9   36.00000   10.06266  72.0%   8.7  785s
 2918712 1875737   31.38333   47   16   36.00000   10.20000  71.7%   8.7  790s
 2936073 1885584 infeasible   42        36.00000   10.20000  71.7%   8.7  795s
 2947147 1891926   30.71111   53   10   36.00000   10.20000  71.7%   8.7  800s
 2962510 1901073   29.04444   46    6   36.00000   10.20000  71.7%   8.7  805s
 2980466 1911397 infeasible   42        36.00000   10.20000  71.7%   8.7  810s
 2993966 1919119   23.86667   49   10   36.00000   10.20000  71.7%   8.8  815s
 3011684 1929287 infeasible   53        36.00000   10.20000  71.7%   8.8  820s
 3024102 1936302     cutoff   58        36.00000   10.20000  71.7%   8.8  825s
 3039650 1945109 infeasible   54        36.00000   10.20000  71.7%   8.8  830s
 3057350 1955043   33.46061   55    9   36.00000   10.20000  71.7%   8.8  835s
 3074429 1964940   17.48889   37    9   36.00000   10.20000  71.7%   8.8  840s
 3092859 1976859     cutoff   55        36.00000   10.30000  71.4%   8.8  845s
 3110265 1987635   13.20000   36    3   36.00000   10.40000  71.1%   8.8  850s
 3130359 2000860   33.66667   50   15   36.00000   10.40000  71.1%   8.8  855s
 3145554 2010732   34.20000   75    3   36.00000   10.40000  71.1%   8.8  860s
 3161668 2021323   34.20000   68    3   36.00000   10.40000  71.1%   8.8  865s
 3180811 2033756   32.20000   49   10   36.00000   10.40000  71.1%   8.8  870s
 3200612 2046686   18.82222   40    9   36.00000   10.40000  71.1%   8.8  875s
 3220117 2059351   33.36216   56   13   36.00000   10.40000  71.1%   8.8  880s
 3236143 2069489   12.80000   45    2   36.00000   10.40000  71.1%   8.8  885s
 3258106 2083619   33.53333   50   14   36.00000   10.40000  71.1%   8.8  890s
 3274762 2093428 infeasible   46        36.00000   10.60000  70.6%   8.8  895s
 3293424 2104608   34.51111   57   11   36.00000   10.60000  70.6%   8.8  900s
 3309895 2114601 infeasible   44        36.00000   10.60000  70.6%   8.8  905s
 3325588 2124063   29.50000   43   12   36.00000   10.60000  70.6%   8.8  910s
 3345389 2135808 infeasible   48        36.00000   10.60000  70.6%   8.8  915s
 3357895 2143511   21.60000   49    4   36.00000   10.60000  70.6%   8.8  920s
 3379902 2156925 infeasible   42        36.00000   10.60000  70.6%   8.8  925s
 3391093 2163572   28.30000   49   11   36.00000   10.60000  70.6%   8.8  930s
 3404758 2171775   26.30000   53    5   36.00000   10.60000  70.6%   8.8  935s
 3419853 2181042 infeasible   56        36.00000   10.60000  70.6%   8.8  940s
 3433947 2189837   26.34545   50    7   36.00000   10.60000  70.6%   8.8  945s
 3448958 2199335   33.20000   63    5   36.00000   10.60000  70.6%   8.8  950s
 3468712 2211595   17.40000   36    6   36.00000   10.60000  70.6%   8.8  955s
 3485444 2221698   18.30000   42    4   36.00000   10.60000  70.6%   8.8  960s
 3502612 2232383   33.18824   54   10   36.00000   10.60000  70.6%   8.8  965s
 3521830 2244175 infeasible   52        36.00000   10.60000  70.6%   8.8  970s
 3538351 2254136   14.80000   32    7   36.00000   10.60000  70.6%   8.8  975s
 3558806 2266668   26.80000   43    7   36.00000   10.60000  70.6%   8.8  980s
 3574768 2276706 infeasible   58        36.00000   10.60000  70.6%   8.8  985s
 3588970 2285742   32.60000   63    5   36.00000   10.60000  70.6%   8.8  990s
 3610124 2298359   32.72315   58   11   36.00000   10.80000  70.0%   8.8  995s
 3624626 2306467 infeasible   51        36.00000   10.80000  70.0%   8.8 1000s
 3642097 2316338   30.79167   53   10   36.00000   10.80000  70.0%   8.8 1005s
 3659188 2326131   30.80000   48   11   36.00000   10.80000  70.0%   8.8 1010s
 3674470 2334938   34.50000   56   13   36.00000   10.80000  70.0%   8.8 1015s
 3692394 2345718   20.20000   46    3   36.00000   10.80000  70.0%   8.8 1020s
 3709537 2356070   27.37500   51    6   36.00000   10.80000  70.0%   8.8 1025s
 3727395 2366996   31.73333   59   13   36.00000   10.80000  70.0%   8.8 1030s
 3747010 2379166     cutoff   58        36.00000   10.80000  70.0%   8.8 1035s
 3763655 2389378   34.20548   54   11   36.00000   10.80000  70.0%   8.8 1040s
 3778507 2398471   23.80000   53    8   36.00000   10.80000  70.0%   8.8 1045s
 3794755 2408520   33.20000   54   12   36.00000   10.80000  70.0%   8.8 1050s
 3810703 2418289   12.20000   36    3   36.00000   10.80000  70.0%   8.8 1055s
 3827692 2428326   29.22222   50    6   36.00000   10.80000  70.0%   8.8 1060s
 3839175 2435249   19.83333   42    4   36.00000   10.80000  70.0%   8.8 1065s
 3854956 2444875 infeasible   57        36.00000   10.80000  70.0%   8.8 1070s
 3870184 2454272   23.80000   42   13   36.00000   10.80000  70.0%   8.8 1075s
 3887777 2464586   14.10000   35    3   36.00000   10.80000  70.0%   8.8 1080s
 3905439 2475532   21.06667   41    8   36.00000   10.80000  70.0%   8.8 1085s
 3922442 2485706   33.20000   58    9   36.00000   10.80000  70.0%   8.8 1090s
 3939698 2496107   25.20000   44    9   36.00000   10.80000  70.0%   8.8 1095s
 3958758 2507755   21.17778   41   10   36.00000   10.80000  70.0%   8.8 1100s
 3977033 2519061   22.13333   56    3   36.00000   10.80000  70.0%   8.8 1105s
 3995983 2530624   17.20000   39    2   36.00000   10.80000  70.0%   8.8 1110s
 4015020 2542201 infeasible   50        36.00000   10.80000  70.0%   8.8 1115s
 4031754 2552158   21.46667   41    8   36.00000   10.80000  70.0%   8.8 1120s
 4051408 2564377   14.20000   39    3   36.00000   10.80000  70.0%   8.8 1125s
 4072193 2576978   20.13333   45    6   36.00000   10.80000  70.0%   8.8 1130s
 4089751 2587703 infeasible   50        36.00000   10.80000  70.0%   8.8 1135s
 4105640 2597406   31.45000   55    9   36.00000   10.80000  70.0%   8.8 1140s
 4119515 2605994     cutoff   61        36.00000   10.80000  70.0%   8.8 1145s
 4136530 2616479   29.60000   49   14   36.00000   10.80000  70.0%   8.8 1150s
 4153043 2626397   19.80000   47    7   36.00000   10.80000  70.0%   8.8 1155s
 4170860 2637323   22.60000   54    2   36.00000   10.80000  70.0%   8.8 1160s
 4187726 2647499   33.33333   48   14   36.00000   10.80000  70.0%   8.8 1165s
 4202950 2656684   30.20000   54    9   36.00000   10.80000  70.0%   8.8 1170s
 4219412 2666760 infeasible   50        36.00000   10.80000  70.0%   8.8 1175s
 4238172 2677979   19.73333   47    5   36.00000   10.80000  70.0%   8.8 1180s
 4257256 2689709   29.20000   47   11   36.00000   10.80000  70.0%   8.8 1185s
 4273867 2699755   33.20000   55   15   36.00000   10.80000  70.0%   8.8 1190s
 4293596 2711875   21.60000   55    4   36.00000   10.80000  70.0%   8.8 1195s
 4308422 2720969   29.06667   49    8   36.00000   10.80000  70.0%   8.8 1200s
 4326505 2731479     cutoff   59        36.00000   10.80000  70.0%   8.8 1205s
 4343713 2742111   27.63333   54   12   36.00000   10.80000  70.0%   8.8 1210s
 4360555 2752579   13.93333   43    3   36.00000   10.80000  70.0%   8.8 1215s
 4378760 2763543   23.80000   43    8   36.00000   10.80000  70.0%   8.8 1220s
 4397271 2774535   19.80000   40    7   36.00000   10.80000  70.0%   8.8 1225s
 4410315 2782299 infeasible   47        36.00000   10.80000  70.0%   8.8 1230s
 4430094 2794591   33.40000   58   12   36.00000   10.80000  70.0%   8.8 1235s
 4449157 2806281 infeasible   52        36.00000   10.80000  70.0%   8.8 1240s
 4465360 2815762   32.33333   55   13   36.00000   10.80000  70.0%   8.8 1245s
 4484661 2827301   27.40000   55   10   36.00000   10.80000  70.0%   8.8 1250s
 4506341 2840663   11.80000   35    2   36.00000   10.80000  70.0%   8.8 1255s
 4526411 2852938   11.86667   36    3   36.00000   10.80000  70.0%   8.8 1260s
 4543756 2863717 infeasible   50        36.00000   10.80000  70.0%   8.8 1265s
 4563898 2876206   24.40000   52    7   36.00000   10.80000  70.0%   8.8 1270s
 4579006 2885430   24.40000   51    6   36.00000   10.80000  70.0%   8.8 1275s
 4596307 2895728 infeasible   71        36.00000   10.80000  70.0%   8.8 1280s
 4612888 2905836   17.20000   45    3   36.00000   10.80000  70.0%   8.8 1285s
 4629462 2916364   18.80000   44    2   36.00000   10.80000  70.0%   8.8 1290s
 4646335 2926545   33.20000   50   13   36.00000   10.80000  70.0%   8.8 1295s
 4665442 2938241   33.38333   66    7   36.00000   10.80000  70.0%   8.8 1300s
 4683356 2949380 infeasible   40        36.00000   10.80000  70.0%   8.8 1305s
 4700267 2959769   32.86667   55   13   36.00000   10.80000  70.0%   8.8 1310s
 4716254 2969450   27.01905   47    8   36.00000   10.80000  70.0%   8.8 1315s
 4733559 2979923   22.40000   55    6   36.00000   10.80000  70.0%   8.8 1320s
 4751364 2990795   23.40000   49    6   36.00000   10.80000  70.0%   8.8 1325s
 4767788 3000784   13.20000   38    3   36.00000   10.80000  70.0%   8.8 1330s
 4783743 3010632   15.10000   41    3   36.00000   10.80000  70.0%   8.8 1335s
 4800740 3020897     cutoff   61        36.00000   10.80000  70.0%   8.8 1340s
 4818646 3031957   17.60000   41    4   36.00000   10.80000  70.0%   8.8 1345s
 4833261 3041105   11.80000   36    2   36.00000   10.80000  70.0%   8.8 1350s
 4850587 3051380   13.40000   36    6   36.00000   10.80000  70.0%   8.8 1355s
 4868131 3061969   13.20000   37    3   36.00000   10.80000  70.0%   8.8 1360s
 4887091 3073735   30.53333   48   12   36.00000   10.80000  70.0%   8.8 1365s
 4902506 3083160     cutoff   62        36.00000   10.80000  70.0%   8.8 1370s
 4919606 3093334   29.00000   59    4   36.00000   10.80000  70.0%   8.8 1375s
 4935125 3102869   20.80000   39    7   36.00000   10.80000  70.0%   8.8 1380s
 4950856 3112414   10.80000   39    2   36.00000   10.80000  70.0%   8.8 1385s
 4965650 3121465   30.41667   66    4   36.00000   10.80000  70.0%   8.8 1390s
 4981962 3131841   32.53333   57   11   36.00000   10.80000  70.0%   8.8 1395s
 4998882 3142493   16.20000   39    3   36.00000   10.80000  70.0%   8.8 1400s
 5014159 3152188   27.80000   49   10   36.00000   10.80000  70.0%   8.8 1405s
 5033756 3164335   26.80000   52    8   36.00000   10.80000  70.0%   8.8 1410s
 5048432 3173025   33.00000   55    9   36.00000   10.80000  70.0%   8.8 1415s
 5067592 3184753   11.80000   37    2   36.00000   10.80000  70.0%   8.8 1420s
 5084729 3195290   29.10000   57    8   36.00000   10.80000  70.0%   8.8 1425s
 5104449 3207140   17.73333   41    5   36.00000   10.80000  70.0%   8.8 1430s
 5121689 3217988 infeasible   51        36.00000   10.80000  70.0%   8.8 1435s
 5137163 3227274   13.40000   37    6   36.00000   10.80000  70.0%   8.8 1440s
 5153256 3237236   33.93759   55   16   36.00000   10.80000  70.0%   8.8 1445s
 5172914 3249189   14.00000   37    3   36.00000   10.80000  70.0%   8.8 1450s
 5190227 3259887 infeasible   51        36.00000   10.80000  70.0%   8.8 1455s
 5210536 3272422   32.93333   62    7   36.00000   10.80000  70.0%   8.8 1460s
 5223718 3280416   21.80000   42    7   36.00000   10.80000  70.0%   8.8 1465s
 5241430 3291261   30.03333   52   10   36.00000   10.80000  70.0%   8.8 1470s
 5252781 3298100     cutoff   53        36.00000   10.80000  70.0%   8.8 1475s
 5269822 3308551   22.28000   54    4   36.00000   10.80000  70.0%   8.8 1480s
 5285892 3318636 infeasible   63        36.00000   10.80000  70.0%   8.8 1485s
 5306605 3331374   19.60000   59    4   36.00000   10.80000  70.0%   8.8 1490s
 5321879 3340946   24.93333   47   11   36.00000   10.80000  70.0%   8.8 1495s
 5335814 3349766   18.51111   46    5   36.00000   10.80000  70.0%   8.8 1500s
 5352777 3360367   16.20000   36    3   36.00000   10.80000  70.0%   8.8 1505s
 5368397 3370238   13.80000   39    2   36.00000   10.80000  70.0%   8.8 1510s
 5388117 3382404   20.20000   50    3   36.00000   10.80000  70.0%   8.8 1515s
 5406779 3394017     cutoff   54        36.00000   10.80000  70.0%   8.8 1520s
 5424366 3405090   23.06667   42    8   36.00000   10.80000  70.0%   8.8 1525s
 5435645 3412060 infeasible   51        36.00000   10.80000  70.0%   8.8 1530s
 5453036 3422697   25.70514   60    6   36.00000   10.80000  70.0%   8.8 1535s
 5470866 3433720   32.40000   53    8   36.00000   10.80000  70.0%   8.8 1540s
 5489385 3445112 infeasible   59        36.00000   10.80000  70.0%   8.8 1545s
 5504718 3454748   16.10000   41    3   36.00000   10.80000  70.0%   8.8 1550s
 5522155 3465548     cutoff   51        36.00000   10.80000  70.0%   8.8 1555s
 5541434 3476971     cutoff   58        36.00000   10.80000  70.0%   8.8 1560s
 5558609 3487471   24.66667   45    7   36.00000   10.80000  70.0%   8.8 1565s
 5576363 3498033     cutoff   41        36.00000   10.80000  70.0%   8.8 1570s
 5595722 3510016   32.59976   70    6   36.00000   10.80000  70.0%   8.8 1575s
 5610826 3519563   15.10000   39    2   36.00000   10.80000  70.0%   8.8 1580s
 5627892 3530029   26.40000   59    5   36.00000   10.80000  70.0%   8.8 1585s
 5645476 3540746     cutoff   50        36.00000   10.80000  70.0%   8.8 1590s
 5661481 3550320 infeasible   56        36.00000   10.80000  70.0%   8.8 1595s
 5678666 3560439 infeasible   44        36.00000   10.80000  70.0%   8.8 1600s
 5694896 3570329   29.04444   51    8   36.00000   10.80000  70.0%   8.8 1605s
 5714699 3582395   23.60000   58    4   36.00000   10.80000  70.0%   8.8 1610s
 5732115 3593169   17.20000   47    4   36.00000   10.80000  70.0%   8.8 1615s
 5749142 3603403   15.20000   48    3   36.00000   10.80000  70.0%   8.8 1620s
 5766483 3614087   16.20000   42    3   36.00000   10.80000  70.0%   8.8 1625s
 5780650 3622809   30.06667   64    6   36.00000   10.80000  70.0%   8.8 1630s
 5795581 3631984   25.46667   44    9   36.00000   10.80000  70.0%   8.8 1635s
 5813949 3643594 infeasible   53        36.00000   10.80000  70.0%   8.8 1640s
 5832618 3654753   32.73333   52   14   36.00000   10.80000  70.0%   8.8 1645s
 5852135 3666795 infeasible   79        36.00000   10.80000  70.0%   8.8 1650s
 5871802 3678979     cutoff   56        36.00000   10.80000  70.0%   8.8 1655s
 5888036 3689139   23.40000   40    6   36.00000   10.80000  70.0%   8.8 1660s
 5903454 3698456 infeasible   55        36.00000   10.80000  70.0%   8.8 1665s
 5922892 3710368   32.52222   52   18   36.00000   10.80000  70.0%   8.8 1670s
 5940399 3721669   22.73333   53    5   36.00000   10.80000  70.0%   8.8 1675s
 5958847 3732941   15.80000   46    2   36.00000   10.80000  70.0%   8.8 1680s
 5976973 3743873   26.40000   58    6   36.00000   10.80000  70.0%   8.8 1685s
 5993855 3754314 infeasible   54        36.00000   10.80000  70.0%   8.8 1690s
 6014002 3766642   23.91111   54    5   36.00000   10.80000  70.0%   8.8 1695s
 6030611 3776851   11.60000   35    2   36.00000   10.80000  70.0%   8.8 1700s
 6049505 3788587   33.51111   53   20   36.00000   10.80000  70.0%   8.8 1705s
 6067378 3799892 infeasible   56        36.00000   10.80000  70.0%   8.8 1710s
 6081456 3808635   19.13333   39    6   36.00000   10.80000  70.0%   8.8 1715s
 6098723 3818876 infeasible   48        36.00000   10.80000  70.0%   8.8 1720s
 6115776 3829336   26.46667   51    9   36.00000   10.80000  70.0%   8.8 1725s
 6137385 3842487 infeasible   50        36.00000   10.80000  70.0%   8.8 1730s
 6153406 3852151   32.21111   49   11   36.00000   10.80000  70.0%   8.8 1735s
 6170803 3862830 infeasible   56        36.00000   10.80000  70.0%   8.8 1740s
 6186037 3872315 infeasible   46        36.00000   10.80000  70.0%   8.8 1745s
 6205229 3884021   32.71515   50   13   36.00000   10.80000  70.0%   8.8 1750s
 6223161 3895045   24.00000   42   10   36.00000   10.80000  70.0%   8.8 1755s
 6241227 3906182   32.00000   57    9   36.00000   10.80000  70.0%   8.8 1760s
 6256490 3915552   27.91111   64    5   36.00000   10.80000  70.0%   8.8 1765s
 6273986 3926419   33.86667   65    7   36.00000   10.80000  70.0%   8.8 1770s
 6293139 3938228   17.80000   39    7   36.00000   10.80000  70.0%   8.8 1775s
 6312305 3950067     cutoff   45        36.00000   10.80000  70.0%   8.8 1780s
 6329310 3960295   10.80000   36    2   36.00000   10.80000  70.0%   8.8 1785s
 6346979 3971209   19.20000   37    8   36.00000   10.80000  70.0%   8.8 1790s
 6363834 3981236   29.80000   56    5   36.00000   10.80000  70.0%   8.8 1795s
 6381207 3991918 infeasible   58        36.00000   10.80000  70.0%   8.8 1800s

Explored 6382675 nodes (56062163 simplex iterations) in 1800.03 seconds
Thread count was 16 (of 16 available processors)

Solution count 9: 36 37 41 ... 173

Time limit reached
Best objective 3.600000000000e+01, best bound 1.100000000000e+01, gap 69.4444%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    327.7 MiB    327.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    327.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    328.2 MiB      0.6 MiB       m2 = m.construct()
    28    328.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    328.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    328.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    328.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    328.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    328.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    328.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    328.2 MiB      0.0 MiB       m2.update()
    44    328.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    328.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    328.2 MiB      0.0 MiB       if(set_binary):
    51    328.2 MiB      0.0 MiB           for x in set_binary:
    52    328.2 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    328.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   4756.5 MiB   4428.2 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   4756.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   4756.5 MiB      0.0 MiB       j = 0
    69   4756.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   4756.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   4756.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   4756.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   4756.5 MiB      0.0 MiB       if m2.status == 9:
    78   4756.5 MiB      0.0 MiB           result.timeout = True
    79   4756.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   4756.5 MiB      0.0 MiB           result.solution = True
    81   4756.5 MiB      0.0 MiB           result.feasible = True
    82   4756.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   4756.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   4756.5 MiB      0.0 MiB           for v in current_vars:
    85   4756.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   4756.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   4756.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   4756.5 MiB      0.0 MiB                   j = j+1
    91                             
    92   4756.5 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 17:22:11 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.tra,lab' -mdp /tmp/tmpzch9v3hc

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.1.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpzch9v3hc"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.021 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      38 (1 initial)
Transitions: 80
Choices:     72

Transition matrix: 160 nodes (3 terminal), 80 minterms, vars: 6r/6c/2nd

Prob0A: 28 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 136 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 6, no = 1, maybe = 31

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=6, nodes=168] [7.9 KB]
Adding sparse bits... [levels=6-6, num=2, compact=2/2] [0.4 KB]
Creating vector for yes... [dist=2, compact] [0.1 KB]
Allocating iteration vectors... [3 x 0.3 KB]
TOTAL: [9.2 KB]

Starting iterations...

Iterative method: 929 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 0.11111111022929832

Time for model checking: 0.009 seconds.

Result: 0.11111111022929832 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [2e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   2.000000e-01   0.000000e+00      0s
     552    3.5400000e+01   0.000000e+00   0.000000e+00      0s

Solved in 552 iterations and 0.03 seconds
Optimal objective  3.540000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1154.1 MiB   1154.1 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1154.1 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1154.1 MiB      0.0 MiB       m2 = m.construct()
    28   1154.1 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1154.1 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1154.1 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1154.1 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1154.1 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1154.1 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1154.1 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1154.1 MiB      0.0 MiB       m2.update()
    44   1154.1 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1154.1 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1154.1 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1154.1 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1154.1 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1154.1 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1154.1 MiB      0.0 MiB       j = 0
    69   1154.1 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1154.1 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1154.1 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1154.1 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1154.1 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1154.1 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1154.1 MiB      0.0 MiB           result.solution = True
    81   1154.1 MiB      0.0 MiB           result.feasible = True
    82   1154.1 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1154.1 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1154.1 MiB      0.0 MiB           for v in current_vars:
    85   1154.1 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1154.1 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1154.1 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1154.1 MiB      0.0 MiB                   j = j+1
    91                             
    92   1154.1 MiB      0.0 MiB       return result, res_vec



subsystem size:209

probability: 0.2
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 17:22:12 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.tra,lab' -mdp /tmp/tmpkdi4_t_h

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpkdi4_t_h"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 79 iterations in 0.00 seconds (average 0.000051, setup 0.00)

Time for model construction: 0.038 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      210 (1 initial)
Transitions: 263
Choices:     211

Transition matrix: 572 nodes (3 terminal), 263 minterms, vars: 8r/8c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 262 iterations in 0.02 seconds (average 0.000061, setup 0.00)

yes = 76, no = 1, maybe = 133

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=477] [22.4 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [1.1 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.6 KB]
TOTAL: [28.8 KB]

Starting iterations...

Iterative method: 843 iterations in 0.00 seconds (average 0.000005, setup 0.00)

Value in the initial state: 0.2181459545152269

Time for model checking: 0.029 seconds.

Result: 0.2181459545152269 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [2e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   2.000000e-01   0.000000e+00      0s
     552    3.5400000e+01   0.000000e+00   0.000000e+00      0s

Solved in 552 iterations and 0.03 seconds
Optimal objective  3.540000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1154.1 MiB   1154.1 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1154.1 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1154.1 MiB      0.0 MiB       m2 = m.construct()
    28   1154.1 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1154.1 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1154.1 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1154.1 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1154.1 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1154.1 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1154.1 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1154.1 MiB      0.0 MiB       m2.update()
    44   1154.1 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1154.1 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1154.1 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1154.1 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1154.1 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1154.1 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1154.1 MiB      0.0 MiB       j = 0
    69   1154.1 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1154.1 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1154.1 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1154.1 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1154.1 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1154.1 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1154.1 MiB      0.0 MiB           result.solution = True
    81   1154.1 MiB      0.0 MiB           result.feasible = True
    82   1154.1 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1154.1 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1154.1 MiB      0.0 MiB           for v in current_vars:
    85   1154.1 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1154.1 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1154.1 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1154.1 MiB      0.0 MiB                   j = j+1
    91                             
    92   1154.1 MiB      0.0 MiB       return result, res_vec



subsystem size:209

probability: 0.2
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [9e-01, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [2e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   2.000000e-01   0.000000e+00      0s
     143    1.4717678e+02   0.000000e+00   0.000000e+00      0s

Solved in 143 iterations and 0.01 seconds
Optimal objective  1.471767820e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1153.9 MiB   1153.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1153.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1153.9 MiB      0.0 MiB       m2 = m.construct()
    28   1153.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1153.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1153.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1153.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1153.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1153.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1153.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1153.9 MiB      0.0 MiB       m2.update()
    44   1153.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1153.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1153.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1153.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1153.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1153.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1153.9 MiB      0.0 MiB       j = 0
    69   1153.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1153.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1153.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1153.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1153.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1153.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1153.9 MiB      0.0 MiB           result.solution = True
    81   1153.9 MiB      0.0 MiB           result.feasible = True
    82   1153.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1153.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1153.9 MiB      0.0 MiB           for v in current_vars:
    85   1153.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1153.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1153.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1153.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1153.9 MiB      0.0 MiB       return result, res_vec



subsystem size:142

probability: 0.2
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 17:22:14 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.tra,lab' -mdp /tmp/tmpbbli0j4f

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpbbli0j4f"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 38 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.031 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      144 (1 initial)
Transitions: 180
Choices:     144

Transition matrix: 408 nodes (3 terminal), 180 minterms, vars: 8r/8c/1nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 149 iterations in 0.00 seconds (average 0.000027, setup 0.00)

yes = 12, no = 1, maybe = 131

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=8, nodes=393] [18.4 KB]
Adding sparse bits... [levels=8-8, num=1, compact=1/1] [0.8 KB]
Creating vector for yes... [dist=2, compact] [0.3 KB]
Allocating iteration vectors... [3 x 1.1 KB]
TOTAL: [22.9 KB]

Starting iterations...

Iterative method: 837 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 0.20341880150180794

Time for model checking: 0.015 seconds.

Result: 0.20341880150180794 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 287 rows and 572 columns
Presolve time: 0.00s
Presolved: 242 rows, 484 columns, 1076 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -8.0800000e+32   1.800000e+32   8.080000e+02      0s
     517   -2.4400000e+02   0.000000e+00   0.000000e+00      0s

Solved in 517 iterations and 0.01 seconds
Optimal objective -2.440000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1153.9 MiB   1153.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1153.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1153.9 MiB      0.0 MiB       m2 = m.construct()
    28   1153.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1153.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1153.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1153.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1153.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1153.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1153.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1153.9 MiB      0.0 MiB       m2.update()
    44   1153.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1153.9 MiB      0.0 MiB       if(zero_vars):
    47   1153.9 MiB      0.0 MiB           for x in zero_vars:
    48   1153.9 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1153.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1153.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1153.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1153.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1153.9 MiB      0.0 MiB       j = 0
    69   1153.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1153.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1153.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1153.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1153.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1153.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1153.9 MiB      0.0 MiB           result.solution = True
    81   1153.9 MiB      0.0 MiB           result.feasible = True
    82   1153.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1153.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1153.9 MiB      0.0 MiB           for v in current_vars:
    85   1153.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1153.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1153.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1153.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1153.9 MiB      0.0 MiB       return result, res_vec


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 2112 columns and 3868 nonzeros
Variable types: 1056 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 2e+02]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [2e-01, 1e+00]
Presolve removed 428 rows and 700 columns
Presolve time: 0.01s
Presolved: 1157 rows, 1412 columns, 3016 nonzeros
Variable types: 704 continuous, 708 integer (708 binary)

Root relaxation: objective 3.143607e+00, 1377 iterations, 0.11 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.14361    0  204          -    3.14361      -     -    0s
H    0     0                     242.0000000    3.14361  98.7%     -    0s
H    0     2                     241.0000000    3.14361  98.7%     -    1s
     0     2    3.14361    0  203  241.00000    3.14361  98.7%     -    1s
H    2     4                     167.0000000    3.16335  98.1%   138    2s
H    4     8                      97.0000000    3.17521  96.7%   129    2s
H   13    16                      95.0000000    3.19243  96.6%   194    3s
H   19    32                      79.0000000    3.19243  96.0%   149    3s
H   25    32                      71.0000000    3.51444  95.1%   146    3s
H   34    48                      62.0000000    3.51444  94.3%   122    4s
H   79    83                      55.0000000    3.51444  93.6%   104    6s
H   85    87                      49.0000000    3.51444  92.8%  97.2    6s
H  164   162                      47.0000000    3.51444  92.5%  58.8    7s
H  178   178                      45.0000000    3.51444  92.2%  54.6    7s
  1594  1340   30.22552   76  103   45.00000    3.51803  92.2%  29.8   10s
H 2415  1894                      43.0000000    3.51803  91.8%  27.9   10s
  2683  2115   11.44180   21  204   43.00000    3.51803  91.8%  27.0   15s
  2689  2124    3.51803   12  149   43.00000    3.51803  91.8%  27.6   20s
H 2718  2048                      42.0000000    3.51803  91.6%  27.6   21s
H 2768  1968                      40.0000000    3.51803  91.2%  27.8   24s
H 2770  1873                      38.0000000    3.51803  90.7%  27.8   24s
  2968  2006    6.39548   22  116   38.00000    3.51803  90.7%  28.7   25s
  5047  3088   19.58915   84  121   38.00000    3.51803  90.7%  28.0   30s
  7869  4366   13.37901   39   80   38.00000    3.53234  90.7%  27.8   36s
 12047  7521    7.62751   30  115   38.00000    4.25160  88.8%  26.2   40s
 15719 10403   25.38444   71   74   38.00000    4.26650  88.8%  26.3   46s
 17645 11781   28.17360   73   60   38.00000    4.45175  88.3%  27.6   50s
 21245 14302   34.11437   74   51   38.00000    4.46781  88.2%  28.9   55s
 24290 16416   15.15160   50   58   38.00000    4.69873  87.6%  30.0   61s
 27146 18422   10.65756   40  135   38.00000    5.19652  86.3%  30.4   65s
 33354 22810 infeasible   96        38.00000    5.19873  86.3%  30.3   71s
 37659 25623   10.50157   46  146   38.00000    5.39751  85.8%  30.1   75s
 41931 28453   11.83863   41  116   38.00000    5.46067  85.6%  30.6   80s
 47748 32772   16.14030   50   93   38.00000    5.46528  85.6%  30.1   85s
 54502 37414 infeasible   62        38.00000    5.48234  85.6%  29.8   91s
 59270 40802     cutoff  109        38.00000    5.49529  85.5%  29.6   95s
 62853 43283   13.79733   42  101   38.00000    5.49529  85.5%  29.5  101s
 65754 45229     cutoff   77        38.00000    5.49730  85.5%  29.5  105s
 73012 50350   11.79425   49  125   38.00000    5.70915  85.0%  29.2  111s
 77447 53253 infeasible   89        38.00000    5.71239  85.0%  29.1  116s
 82155 56410   22.29616   50   79   38.00000    5.82516  84.7%  29.2  121s
 87618 60098   23.42933   56   61   38.00000    5.89573  84.5%  29.0  126s
 93357 64064   10.14467   52   36   38.00000    5.90573  84.5%  28.8  130s
 97799 67238   32.41358   83   68   38.00000    6.16020  83.8%  28.7  135s
 103335 71130   32.21024   70   69   38.00000    6.17569  83.7%  28.6  140s
 110012 75491   23.08732   64   39   38.00000    6.18397  83.7%  28.5  146s
 114593 78460   10.16721   38   51   38.00000    6.18397  83.7%  28.6  150s
 120064 82086   35.26622   83   78   38.00000    6.19381  83.7%  28.8  156s
 124879 85238   20.12787   51   39   38.00000    6.19537  83.7%  28.8  160s
 129947 88757   36.07333   83   49   38.00000    6.19836  83.7%  28.8  167s
 132807 90562   11.67386   34   88   38.00000    6.19836  83.7%  28.9  170s
 138079 94291    9.66885   30   41   38.00000    6.22843  83.6%  29.0  176s
 142635 97492     cutoff   79        38.00000    6.23364  83.6%  29.1  181s
 144578 98940   14.19454   53   93   38.00000    6.23443  83.6%  29.1  185s
 147397 100962     cutoff   79        38.00000    6.24043  83.6%  29.0  190s
 152443 104539   12.18933   34   99   38.00000    6.24331  83.6%  29.0  195s
 154242 105770 infeasible   86        38.00000    6.24721  83.6%  29.1  200s
 159621 109482    7.26149   24   58   38.00000    6.25191  83.5%  29.1  205s
 163490 112166   18.25482   45  162   38.00000    6.25666  83.5%  29.2  210s
 168349 115437   36.09362   72  148   38.00000    6.28388  83.5%  29.1  216s
 173325 118737   35.12951   78   76   38.00000    6.29165  83.4%  29.2  221s
 179268 122694   16.12603   44   45   38.00000    6.31226  83.4%  29.1  225s
 184972 126424   28.47291   68   99   38.00000    6.31635  83.4%  29.0  230s
 189140 129142     cutoff   84        38.00000    6.31885  83.4%  28.8  236s
 194198 132508 infeasible   48        38.00000    6.32905  83.3%  28.8  241s
 198329 135239   34.42683   76   81   38.00000    6.38485  83.2%  28.8  246s
 201551 137290    6.94291   33  136   38.00000    6.38989  83.2%  28.9  250s
 205979 140209   32.34365   67   63   38.00000    6.40669  83.1%  28.9  255s
 209338 142517   13.21615   47  173   38.00000    6.41060  83.1%  28.9  263s
 210191 143006   21.58167   64   81   38.00000    6.41060  83.1%  28.9  265s
 213855 145551    8.48070   42  129   38.00000    6.41902  83.1%  28.9  270s
 219261 149199   12.20492   42  121   38.00000    6.43122  83.1%  28.9  276s
 224214 152554    6.44383   34   85   38.00000    6.44383  83.0%  28.8  281s
 230031 156430   10.58823   48   92   38.00000    6.44649  83.0%  28.8  286s
 233413 158589   30.19263   61   57   38.00000    6.44649  83.0%  28.8  290s
 238319 162051   17.14231   51   85   38.00000    6.45469  83.0%  28.8  296s
 242621 165171   22.10495   49   29   38.00000    6.45683  83.0%  28.8  301s
 247582 168557   10.41390   24   91   38.00000    6.45906  83.0%  28.9  306s
 250830 170643    8.37043   39  227   38.00000    6.46021  83.0%  28.9  310s
 256458 174467   12.42954   41  120   38.00000    6.46275  83.0%  28.8  315s
 263143 179013   24.52868   53  122   38.00000    6.46787  83.0%  28.9  322s
 266520 181370   15.29573   39   78   38.00000    6.46900  83.0%  28.8  325s
 272480 185473   35.90349   68   83   38.00000    6.47279  83.0%  28.7  330s
 277484 189034   36.52731   70   95   38.00000    6.47279  83.0%  28.6  335s
 283587 193144   32.39830   71  133   38.00000    6.47279  83.0%  28.7  340s
 285502 194494   36.53033   79   73   38.00000    6.47279  83.0%  28.6  345s
 291243 198394   32.23890   57   68   38.00000    6.49300  82.9%  28.6  350s
 295729 201337   30.12826   60   58   38.00000    6.49300  82.9%  28.6  355s
 301564 205557    8.47090   31  109   38.00000    6.49300  82.9%  28.5  360s
 307712 209781   33.14207   81  101   38.00000    6.49824  82.9%  28.6  366s
 309897 211313   35.77447   73  122   38.00000    6.51923  82.8%  28.6  370s
 314080 214068   28.10779   69   52   38.00000    6.51923  82.8%  28.7  376s
 318962 217355    8.40583   32   76   38.00000    6.52250  82.8%  28.7  381s
 321911 219167    8.02842   36  190   38.00000    6.52250  82.8%  28.8  385s
 326519 222281   25.89724   66   78   38.00000    6.61453  82.6%  28.9  390s
 332401 226101   36.00932   55   22   38.00000    6.61646  82.6%  28.9  395s
 338491 230067   15.18495   39   79   38.00000    6.62847  82.6%  28.9  401s
 343896 233859   15.13599   58   58   38.00000    6.66134  82.5%  28.9  405s
 348938 237334   23.06619   64   36   38.00000    6.66241  82.5%  28.8  410s
 355214 241553   11.82937   45  109   38.00000    6.66928  82.4%  28.9  416s
 358271 243600   35.52273   74  111   38.00000    6.67227  82.4%  28.9  421s
 362776 246758   13.76663   46  139   38.00000    6.67227  82.4%  29.0  426s
 366140 248969   14.12959   49   91   38.00000    6.67495  82.4%  29.0  430s
 370580 251798   22.18840   48   93   38.00000    6.67594  82.4%  29.0  436s
 373422 253645   30.51157   76   92   38.00000    6.67917  82.4%  29.1  440s
 378109 256878 infeasible   81        38.00000    6.68055  82.4%  29.2  445s
 381438 259054   32.13098   81   66   38.00000    6.68115  82.4%  29.2  450s
 386069 262125   15.15236   40   59   38.00000    6.68219  82.4%  29.3  456s
 389573 264605   35.63658   72   92   38.00000    6.68219  82.4%  29.4  461s
 392818 266758   12.15287   41   61   38.00000    6.68737  82.4%  29.4  465s
 398038 270224   32.55798   67  105   38.00000    6.69175  82.4%  29.5  471s
 401307 272137     cutoff   83        38.00000    6.69175  82.4%  29.5  476s
 405152 274682   35.57909   80  104   38.00000    6.70915  82.3%  29.5  480s
 409847 277542   14.62127   34   87   38.00000    6.71180  82.3%  29.5  486s
 412030 278848    8.69652   38  154   38.00000    6.71180  82.3%  29.6  490s
 417027 282120     cutoff   91        38.00000    6.71341  82.3%  29.6  496s
 420432 284406   13.71062   40  131   38.00000    6.73132  82.3%  29.6  500s
 423807 286558    9.47496   28  129   38.00000    6.74549  82.2%  29.7  505s
 427236 288691   27.18233   73   66   38.00000    6.74549  82.2%  29.7  510s
 433796 293070    8.29604   38  219   38.00000    6.81246  82.1%  29.6  515s
 439562 296869   35.08425   86   53   38.00000    6.81689  82.1%  29.5  521s
 442592 298892   22.67855   49   81   38.00000    6.81738  82.1%  29.5  525s
 447826 302407   10.78873   36  128   38.00000    6.82085  82.1%  29.5  530s
 452950 305895   14.77315   41   89   38.00000    6.82332  82.0%  29.5  535s
 457476 308900   18.15075   50   98   38.00000    6.82643  82.0%  29.4  540s
 462320 311902   12.77859   44   87   38.00000    6.82869  82.0%  29.4  546s
 465170 313705   25.20946   62   60   38.00000    6.83149  82.0%  29.5  550s
 469256 316385   32.21415   73  102   38.00000    6.83415  82.0%  29.5  555s
 473917 319534   22.26012   50   91   38.00000    6.83888  82.0%  29.5  561s
 476984 321588   35.07987   82   45   38.00000    6.84197  82.0%  29.6  565s
 481471 324413   15.77096   39  112   38.00000    6.84402  82.0%  29.6  571s
 484669 326517   32.59610   59   93   38.00000    6.84485  82.0%  29.7  576s
 488152 328779   30.11618   61  197   38.00000    6.88152  81.9%  29.7  580s
 493929 332676   14.87382   45  100   38.00000    6.88957  81.9%  29.7  586s
 496844 334554   35.63642   70   72   38.00000    6.89171  81.9%  29.7  591s
 500475 336998   11.16690   42  129   38.00000    6.89842  81.8%  29.7  595s
 505313 340133   34.71391   74  103   38.00000    6.90273  81.8%  29.7  601s
 508438 342203 infeasible   69        38.00000    6.91213  81.8%  29.7  605s
 513093 345146   30.08340   64   32   38.00000    6.91236  81.8%  29.8  611s
 516799 347569   31.21118   57   39   38.00000    6.97471  81.6%  29.8  615s
 522109 350993   12.26242   52  179   38.00000    7.02639  81.5%  29.8  621s
 525529 353139   22.06028   58   22   38.00000    7.13299  81.2%  29.8  625s
 531552 357157   34.16847   86   50   38.00000    7.15039  81.2%  29.7  631s
 537915 361860   34.61191   77  106   38.00000    7.15164  81.2%  29.6  636s
 542831 365204   12.01255   45  141   38.00000    7.15856  81.2%  29.5  641s
 548040 368849 infeasible   74        38.00000    7.16148  81.2%  29.5  645s
 553320 372408   13.36993   50  131   38.00000    7.16184  81.2%  29.4  651s
 558318 375748   26.16926   60   43   38.00000    7.16512  81.1%  29.4  655s
 564792 380012   18.18025   56   91   38.00000    7.16758  81.1%  29.3  660s
 570937 383820   26.07213   60   28   38.00000    7.16967  81.1%  29.3  666s
 575976 387293   27.10815   61   41   38.00000    7.17004  81.1%  29.2  670s
 582118 391387   10.14672   41   54   38.00000    7.17209  81.1%  29.2  675s
 588521 395568    8.17496   42   71   38.00000    7.17496  81.1%  29.2  681s
 593068 398364   18.13494   41   42   38.00000    7.17619  81.1%  29.2  685s
 599965 402998   26.09870   71   91   38.00000    7.17701  81.1%  29.1  691s
 604780 406118   17.13484   48   62   38.00000    7.17905  81.1%  29.1  695s
 611418 410666   35.26997   85  111   38.00000    7.18069  81.1%  29.1  700s
 616037 413606   35.11666   92   76   38.00000    7.18151  81.1%  29.1  705s
 622561 417883    8.18934   38   54   38.00000    7.18151  81.1%  29.1  711s
 627059 420703    9.43854   50  131   38.00000    7.18361  81.1%  29.1  715s
 633239 424539   23.64930   65  107   38.00000    7.18443  81.1%  29.1  721s
 636211 426474   12.16516   40   75   38.00000    7.18508  81.1%  29.2  725s
 642711 430678   32.10524   79  104   38.00000    7.18668  81.1%  29.2  731s
 647747 433863   34.25718   82   73   38.00000    7.18760  81.1%  29.2  735s
 652690 436986   30.09254   72   38   38.00000    7.18852  81.1%  29.2  740s
 657766 440047   23.13332   64   53   38.00000    7.18893  81.1%  29.2  745s
 662810 443306   17.14027   52   56   38.00000    7.18934  81.1%  29.2  750s
 669203 447308   16.13692   53   51   38.00000    7.19151  81.1%  29.3  756s
 674005 450391   26.09511   78   40   38.00000    7.19160  81.1%  29.3  760s
 676904 452197 infeasible   82        38.00000    7.19180  81.1%  29.3  765s
 683737 456282    8.18811   42   67   38.00000    7.19283  81.1%  29.4  771s
 687883 458919     cutoff   80        38.00000    7.19385  81.1%  29.4  776s
 693136 462220   26.27023   71   90   38.00000    7.19426  81.1%  29.4  781s
 698176 465319   23.75302   65   70   38.00000    7.19483  81.1%  29.4  786s
 702830 468378   27.07254   64   24   38.00000    7.19508  81.1%  29.5  791s
 707660 471506   15.21885   55   94   38.00000    7.19631  81.1%  29.5  796s
 712315 474315 infeasible   95        38.00000    7.19836  81.1%  29.5  801s
 717574 477614 infeasible   88        38.00000    7.19836  81.1%  29.5  806s
 720666 479325   10.80975   53  107   38.00000    7.19836  81.1%  29.6  810s
 724798 481633    7.22678   25  122   38.00000    7.19836  81.1%  29.6  817s
 727973 483457 infeasible   90        38.00000    7.20098  81.1%  29.6  822s
 730950 485381   17.69032   38  100   38.00000    7.21053  81.0%  29.6  827s
 732551 486397    8.20951   37  122   38.00000    7.21053  81.0%  29.6  830s
 736325 488789   27.76688   62  133   38.00000    7.21053  81.0%  29.6  835s
 740173 491213 infeasible   59        38.00000    7.22043  81.0%  29.6  841s
 743759 493655     cutoff   83        38.00000    7.22057  81.0%  29.7  845s
 746597 495454    8.42119   30  209   38.00000    7.22268  81.0%  29.7  850s
 750164 497666   31.27088   78   75   38.00000    7.22311  81.0%  29.7  855s
 753536 499921   30.34137   74  110   38.00000    7.22470  81.0%  29.7  860s
 758405 503110   36.41575   75   80   38.00000    7.22689  81.0%  29.7  867s
 761861 505416   22.18195   41   65   38.00000    7.22725  81.0%  29.7  875s
 766070 508203   29.09545   65   35   38.00000    7.22983  81.0%  29.7  881s
 769692 510642     cutoff   71        38.00000    7.23033  81.0%  29.7  886s
 772833 512631   24.09832   58   43   38.00000    7.23229  81.0%  29.7  890s
 778047 516089   27.14109   67   77   38.00000    7.23360  81.0%  29.7  895s
 782536 519170   24.16197   61   92   38.00000    7.23364  81.0%  29.7  902s
 786140 521737   12.64672   42   33   38.00000    7.23552  81.0%  29.7  906s
 789574 524086   31.37355   73  100   38.00000    7.23624  81.0%  29.7  910s
 794071 527061   25.17073   55   51   38.00000    7.23842  81.0%  29.8  916s
 797463 529468   13.30464   41  192   38.00000    7.23892  81.0%  29.8  920s
 802537 532997   24.45121   48   67   38.00000    7.24021  80.9%  29.8  926s
 805959 535368   32.06057   67   34   38.00000    7.24066  80.9%  29.8  931s
 809562 537921   10.41148   37  119   38.00000    7.24066  80.9%  29.8  935s
 814034 540926   21.42604   57   93   38.00000    7.24282  80.9%  29.8  941s
 816261 542357    8.25451   33   86   38.00000    7.24455  80.9%  29.8  945s
 821600 545999 infeasible   83        38.00000    7.24504  80.9%  29.8  951s
 825403 548555   34.01885   58    9   38.00000    7.24584  80.9%  29.8  956s
 828525 550491   15.52091   54  117   38.00000    7.24832  80.9%  29.8  960s
 833722 554092    7.24925   34  133   38.00000    7.24925  80.9%  29.8  966s
 837139 556505   32.86925   73  104   38.00000    7.25064  80.9%  29.8  970s
 841557 559580   31.70816   66  127   38.00000    7.25212  80.9%  29.9  976s
 843756 560973   19.18106   43   74   38.00000    7.25216  80.9%  29.9  980s
 846896 563044   33.12198   70   58   38.00000    7.25452  80.9%  29.9  986s
 848657 564081   18.34053   41   44   38.00000    7.25458  80.9%  29.9  990s
 852368 566474   11.45719   43  104   38.00000    7.25708  80.9%  30.0  995s
 857766 570128   14.65106   48  140   38.00000    7.26005  80.9%  30.0 1002s
 861577 572742   22.75492   54   64   38.00000    7.26320  80.9%  30.0 1006s
 865223 575162   13.21067   34   68   38.00000    7.26704  80.9%  30.0 1010s
 868551 577392    8.24920   24   71   38.00000    7.26704  80.9%  30.0 1015s
 873126 580549   35.67417   68   74   38.00000    7.27401  80.9%  30.0 1021s
 876905 583044   13.21430   36   81   38.00000    7.27561  80.9%  30.0 1026s
 880255 585381   36.12254   81   68   38.00000    7.27610  80.9%  30.0 1030s
 885135 588732   16.61573   39   88   38.00000    7.28000  80.8%  30.0 1035s
 890126 592239   36.09166   71   78   38.00000    7.28207  80.8%  30.1 1042s
 893275 594303   35.53277   78   89   38.00000    7.28549  80.8%  30.1 1047s
 896226 596069   21.12483   53   42   38.00000    7.28549  80.8%  30.1 1051s
 899476 598110   36.02039   73  139   38.00000    7.28904  80.8%  30.1 1055s
 904778 601650    9.51456   39  127   38.00000    7.29165  80.8%  30.1 1061s
 906975 603015   22.08894   50   40   38.00000    7.29258  80.8%  30.1 1065s
 910525 605299   30.15662   53  104   38.00000    7.29272  80.8%  30.1 1070s
 914279 607708 infeasible   40        38.00000    7.29732  80.8%  30.2 1075s
 917268 609643   36.16778   72   65   38.00000    7.29893  80.8%  30.2 1080s
 921081 612081   31.06580   72   43   38.00000    7.29941  80.8%  30.2 1085s
 926803 615588 infeasible   54        38.00000    7.30459  80.8%  30.1 1091s
 930376 617876     cutoff   88        38.00000    7.30505  80.8%  30.1 1095s
 933944 620147    7.32905   36  103   38.00000    7.30692  80.8%  30.1 1100s
 939404 623701 infeasible   39        38.00000    7.30779  80.8%  30.1 1105s
 944418 626828   33.16041   70   60   38.00000    7.31025  80.8%  30.1 1111s
 947728 628849 infeasible   49        38.00000    7.31107  80.8%  30.1 1115s
 952157 631917   24.20041   53   48   38.00000    7.31286  80.8%  30.0 1120s
 955568 634148   36.61120   71  111   38.00000    7.31286  80.8%  30.0 1125s
 961446 637787   36.93795   79   66   38.00000    7.31430  80.8%  30.0 1130s
 966781 641182   24.19921   55   76   38.00000    7.31537  80.7%  30.0 1135s
 971531 644112   16.15222   54   97   38.00000    7.31680  80.7%  29.9 1140s
 976648 647390   28.08825   77  102   38.00000    7.31717  80.7%  29.9 1146s
 981210 650301 infeasible   62        38.00000    7.31770  80.7%  29.9 1151s
 984726 652528   31.16642   68   52   38.00000    7.31911  80.7%  29.9 1156s
 988932 655062   35.74384   83   91   38.00000    7.31987  80.7%  29.9 1161s
 992739 657341   36.80348   89   82   38.00000    7.32008  80.7%  29.9 1165s
 998617 661091   31.76545   80   68   38.00000    7.32172  80.7%  29.8 1171s
 1003641 664223   36.23871   84   86   38.00000    7.32278  80.7%  29.8 1176s
 1008293 667030   35.17029   78   60   38.00000    7.32493  80.7%  29.8 1181s
 1010070 668087   30.09347   67   35   38.00000    7.32493  80.7%  29.8 1185s
 1015303 671327   30.09019   75  101   38.00000    7.32664  80.7%  29.8 1190s
 1019126 673751    9.30720   41  117   38.00000    7.32869  80.7%  29.8 1195s
 1023805 676658   21.11356   47   34   38.00000    7.32905  80.7%  29.8 1200s
 1028621 679758     cutoff   78        38.00000    7.32905  80.7%  29.8 1205s
 1032846 682538 infeasible   43        38.00000    7.36024  80.6%  29.8 1210s
 1036541 684930   35.14955   78   69   38.00000    7.37004  80.6%  29.8 1215s
 1040933 687874   17.14066   48  145   38.00000    7.37380  80.6%  29.8 1221s
 1044259 690002   33.08397   77   36   38.00000    7.37586  80.6%  29.8 1225s
 1049798 693850 infeasible   81        38.00000    7.37911  80.6%  29.8 1231s
 1054477 697078    9.36376   37  140   38.00000    7.38285  80.6%  29.8 1236s
 1057728 699155 infeasible   75        38.00000    7.38493  80.6%  29.8 1240s
 1062796 702511    9.88413   33  118   38.00000    7.38552  80.6%  29.8 1247s
 1065884 704506   23.76500   49   87   38.00000    7.38885  80.6%  29.8 1251s
 1069111 706662   16.32520   43   77   38.00000    7.38944  80.6%  29.8 1255s
 1074330 710055   23.19458   53   64   38.00000    7.39252  80.5%  29.8 1260s
 1079358 713405     cutoff   74        38.00000    7.39506  80.5%  29.8 1265s
 1083600 716142   36.60390   68   66   38.00000    7.39520  80.5%  29.8 1273s
 1084042 716373   13.47764   45  151   38.00000    7.39629  80.5%  29.8 1275s
 1089356 719843   19.27797   43   65   38.00000    7.40064  80.5%  29.8 1281s
 1094378 723073    8.72814   37   91   38.00000    7.40372  80.5%  29.9 1286s
 1099491 726347    8.68934   39   74   38.00000    7.40598  80.5%  29.9 1291s
 1103484 729039   11.38515   35  120   38.00000    7.40857  80.5%  29.9 1295s
 1108785 732816   33.13683   78   94   38.00000    7.40940  80.5%  29.9 1301s
 1113551 736083    8.39350   32   72   38.00000    7.41105  80.5%  29.9 1305s
 1118319 739321   19.00048   49  121   38.00000    7.41327  80.5%  29.9 1310s
 1123581 742812   22.90821   49   90   38.00000    7.41902  80.5%  29.9 1315s
 1128759 746309   23.08443   47   37   38.00000    7.42045  80.5%  29.9 1321s
 1133719 749560   34.09734   71   41   38.00000    7.42129  80.5%  29.9 1325s
 1138813 752963   33.08187   65   44   38.00000    7.42567  80.5%  29.9 1330s
 1143402 756040   35.20537   75   73   38.00000    7.42832  80.5%  29.8 1335s
 1148894 759782   26.07831   63   21   38.00000    7.42832  80.5%  29.8 1341s
 1153794 763110   35.08930   84   45   38.00000    7.43249  80.4%  29.8 1346s
 1159211 766801    8.74747   32  131   38.00000    7.43351  80.4%  29.8 1350s
 1164426 770206   10.18366   46   74   38.00000    7.43464  80.4%  29.8 1355s
 1169705 773658   30.09168   71   72   38.00000    7.43579  80.4%  29.8 1360s
 1174506 776887   20.11066   59   53   38.00000    7.43736  80.4%  29.8 1365s
 1179652 780230   29.26619   64  160   38.00000    7.43784  80.4%  29.7 1370s
 1184484 783532     cutoff   60        38.00000    7.43951  80.4%  29.7 1376s
 1188470 786225   12.42167   50   92   38.00000    7.44054  80.4%  29.7 1381s
 1191463 788150   21.11771   61   73   38.00000    7.44054  80.4%  29.7 1385s
 1196368 791345   34.07093   80   32   38.00000    7.44222  80.4%  29.7 1391s
 1200019 793781   18.17896   51   88   38.00000    7.44260  80.4%  29.7 1395s
 1205148 797310   21.17123   46  113   38.00000    7.44316  80.4%  29.7 1400s
 1210210 800613    7.81780   25  141   38.00000    7.44462  80.4%  29.7 1405s
 1213156 802564    9.41923   27   70   38.00000    7.44540  80.4%  29.7 1410s
 1218063 805859 infeasible   83        38.00000    7.44637  80.4%  29.7 1415s
 1223287 809243     cutoff   68        38.00000    7.44715  80.4%  29.7 1420s
 1228488 812733   32.08889   69   42   38.00000    7.44723  80.4%  29.6 1426s
 1234149 816567   33.57554   75  108   38.00000    7.44879  80.4%  29.6 1433s
 1234663 816918   35.17167   76  115   38.00000    7.44879  80.4%  29.6 1435s
 1239658 820359   30.08953   60   67   38.00000    7.44955  80.4%  29.6 1440s
 1243268 822790   30.18966   62   64   38.00000    7.45088  80.4%  29.6 1446s
 1248008 825919   35.18992   61   48   38.00000    7.45153  80.4%  29.6 1451s
 1251498 828178 infeasible   36        38.00000    7.45180  80.4%  29.6 1455s
 1256317 831290   14.39811   34   85   38.00000    7.45237  80.4%  29.6 1461s
 1259898 833485   24.18596   50   49   38.00000    7.45330  80.4%  29.6 1465s
 1264910 836830   13.80425   47  184   38.00000    7.45365  80.4%  29.6 1470s
 1269496 839725    8.46339   34   85   38.00000    7.45469  80.4%  29.6 1476s
 1272669 841872   34.20173   72   57   38.00000    7.45529  80.4%  29.6 1480s
 1278242 845706   32.09627   75   50   38.00000    7.45585  80.4%  29.6 1486s
 1280895 847481   29.10336   57   50   38.00000    7.45674  80.4%  29.6 1491s
 1286278 851050   11.22011   33  136   38.00000    7.45701  80.4%  29.5 1496s
 1289113 852838   13.16393   46  145   38.00000    7.45701  80.4%  29.5 1500s
 1294300 856356    8.79077   44   69   38.00000    7.45826  80.4%  29.5 1505s
 1297560 858458   19.58989   52   75   38.00000    7.45826  80.4%  29.5 1510s
 1302992 861818   18.22790   44   81   38.00000    7.46037  80.4%  29.5 1516s
 1307434 864755   24.54466   70  107   38.00000    7.46103  80.4%  29.5 1521s
 1312463 867980   13.26389   47   85   38.00000    7.46185  80.4%  29.5 1526s
 1315577 870207 infeasible   85        38.00000    7.46275  80.4%  29.5 1530s
 1318793 872333 infeasible   70        38.00000    7.46296  80.4%  29.5 1535s
 1322473 874742   35.28695   68   64   38.00000    7.46374  80.4%  29.5 1541s
 1328448 878785   36.73141   71   79   38.00000    7.46487  80.4%  29.5 1546s
 1331721 880725   26.24843   51   65   38.00000    7.46487  80.4%  29.5 1550s
 1336556 883987   25.20549   60   64   38.00000    7.46521  80.4%  29.5 1556s
 1340188 886394   13.37665   33   64   38.00000    7.46521  80.4%  29.5 1560s
 1344723 889480   32.11495   72   99   38.00000    7.46677  80.4%  29.5 1566s
 1349296 892340   12.40208   39   78   38.00000    7.46900  80.3%  29.5 1571s
 1353052 894940   36.78639   77  128   38.00000    7.47005  80.3%  29.5 1575s
 1357167 897655    9.45760   40  141   38.00000    7.47010  80.3%  29.5 1581s
 1360309 899752 infeasible   68        38.00000    7.47168  80.3%  29.5 1585s
 1364012 902153   21.13374   55   78   38.00000    7.47279  80.3%  29.5 1590s
 1369812 905949   35.56373   64  108   38.00000    7.47279  80.3%  29.5 1595s
 1374306 909024   25.44571   65  115   38.00000    7.47431  80.3%  29.5 1601s
 1377761 911344   10.41654   33  108   38.00000    7.47595  80.3%  29.5 1605s
 1382421 914283   17.79452   54  120   38.00000    7.47660  80.3%  29.5 1611s
 1384274 915440 infeasible   62        38.00000    7.47660  80.3%  29.5 1615s
 1389867 919196    8.46594   23   56   38.00000    7.47988  80.3%  29.5 1621s
 1393170 921410    7.83753   25  126   38.00000    7.47988  80.3%  29.5 1625s
 1396152 923543   34.16839   76   45   38.00000    7.48059  80.3%  29.5 1630s
 1401210 927011 infeasible   61        38.00000    7.48193  80.3%  29.4 1636s
 1402786 928128   18.52540   40  160   38.00000    7.48290  80.3%  29.4 1640s
 1406404 930556   32.12459   57   54   38.00000    7.48341  80.3%  29.4 1648s
 1408471 931926   34.73106   75  100   38.00000    7.48341  80.3%  29.4 1650s
 1412166 934443   14.83226   42  107   38.00000    7.48398  80.3%  29.4 1655s
 1416806 937622 infeasible   69        38.00000    7.48660  80.3%  29.4 1661s
 1419726 939543   19.86410   41   93   38.00000    7.48664  80.3%  29.4 1666s
 1422706 941387   32.30414   59   70   38.00000    7.48766  80.3%  29.4 1670s
 1426060 943565   17.62773   41   98   38.00000    7.48873  80.3%  29.4 1675s
 1429396 945769   31.59128   72   82   38.00000    7.48906  80.3%  29.4 1681s
 1433017 948189   36.54578   76   89   38.00000    7.49013  80.3%  29.4 1686s
 1436165 950314 infeasible   37        38.00000    7.49177  80.3%  29.4 1690s
 1441306 953994    9.45585   30   79   38.00000    7.49300  80.3%  29.4 1695s
 1445226 956391   36.64414   63   79   38.00000    7.49414  80.3%  29.5 1701s
 1449368 959204   36.17692   63   58   38.00000    7.49423  80.3%  29.4 1706s
 1453008 961567   36.07346   80   26   38.00000    7.49545  80.3%  29.4 1712s
 1455033 962962 infeasible   52        38.00000    7.49709  80.3%  29.4 1716s
 1458485 965340    9.48275   33   98   38.00000    7.49709  80.3%  29.4 1720s
 1463716 968855   30.17105   65   88   38.00000    7.49709  80.3%  29.4 1725s
 1468183 971916   24.47543   49   80   38.00000    7.49914  80.3%  29.4 1731s
 1471524 974151   35.19841   76   99   38.00000    7.49914  80.3%  29.4 1736s
 1474960 976424   36.99389   73   84   38.00000    7.50201  80.3%  29.4 1740s
 1480405 980052   34.73437   77  102   38.00000    7.50283  80.3%  29.4 1746s
 1484296 982600 infeasible   68        38.00000    7.50546  80.2%  29.4 1750s
 1488946 985618   35.20024   68  106   38.00000    7.50546  80.2%  29.4 1755s
 1492451 988020   34.25465   63   64   38.00000    7.50734  80.2%  29.4 1760s
 1497234 991110   25.26143   49   49   38.00000    7.50857  80.2%  29.4 1766s
 1501812 994300   35.23720   57   44   38.00000    7.50857  80.2%  29.4 1771s
 1503480 995422   32.51199   65  103   38.00000    7.51081  80.2%  29.4 1775s
 1508590 998802   36.19893   63   39   38.00000    7.51081  80.2%  29.4 1781s
 1513898 1002207   23.33582   46   50   38.00000    7.51184  80.2%  29.4 1787s
 1517131 1004174 infeasible   33        38.00000    7.51184  80.2%  29.5 1790s
 1522263 1007587   35.06721   75   55   38.00000    7.51727  80.2%  29.5 1795s
 1527148 1010816   17.61618   38  117   38.00000    7.51840  80.2%  29.5 1800s

Explored 1528128 nodes (45022975 simplex iterations) in 1800.03 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 38 40 42 ... 71

Time limit reached
Best objective 3.800000000000e+01, best bound 8.000000000000e+00, gap 78.9474%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1153.9 MiB   1153.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1153.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1153.9 MiB      0.0 MiB       m2 = m.construct()
    28   1153.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1153.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1153.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1153.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1153.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1153.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1153.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1153.9 MiB      0.0 MiB       m2.update()
    44   1153.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1153.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1153.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1153.9 MiB      0.0 MiB       if(find_optimum):
    55   1153.9 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56   1153.9 MiB      0.0 MiB           m2.update()
    57   1153.9 MiB      0.0 MiB           new_obj = LinExpr(0)
    58   1154.1 MiB      0.0 MiB           for var in current_vars:
    59   1154.1 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60   1154.1 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61   1154.1 MiB      0.2 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62   1154.1 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1531.7 MiB    377.6 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1531.7 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1531.7 MiB      0.0 MiB       j = 0
    69   1531.7 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1531.7 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1531.7 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1531.7 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1531.7 MiB      0.0 MiB       if m2.status == 9:
    78   1531.7 MiB      0.0 MiB           result.timeout = True
    79   1531.7 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1531.7 MiB      0.0 MiB           result.solution = True
    81   1531.7 MiB      0.0 MiB           result.feasible = True
    82   1531.7 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1531.7 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1531.7 MiB      0.0 MiB           for v in current_vars:
    85   1531.7 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1531.7 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1531.7 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89   1531.7 MiB      0.0 MiB                       res_vec[j] = 0
    90   1531.7 MiB      0.0 MiB                   j = j+1
    91                             
    92   1531.7 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 17:52:18 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.tra,lab' -mdp /tmp/tmpd8oibump

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpd8oibump"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.02 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      40 (1 initial)
Transitions: 49
Choices:     40

Transition matrix: 153 nodes (3 terminal), 49 minterms, vars: 6r/6c/1nd

Prob0A: 31 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 178 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 6, no = 1, maybe = 33

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=6, nodes=145] [6.8 KB]
Adding sparse bits... [levels=6-6, num=1, compact=1/1] [0.2 KB]
Creating vector for yes... [dist=2, compact] [0.1 KB]
Allocating iteration vectors... [3 x 0.3 KB]
TOTAL: [8.0 KB]

Starting iterations...

Iterative method: 1136 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 0.19999999810819508

Time for model checking: 0.01 seconds.

Result: 0.19999999810819508 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 1584 columns and 4117 nonzeros
Variable types: 528 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [2e-01, 2e+00]
Presolve removed 289 rows and 280 columns
Presolve time: 0.01s
Presolved: 1296 rows, 1304 columns, 3548 nonzeros
Variable types: 486 continuous, 818 integer (818 binary)

Root relaxation: objective 2.000000e-01, 1 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.20000    0    1          -    0.20000      -     -    0s
H    0     0                     157.0000000    0.20000   100%     -    0s
     0     2    1.40000    0    1  157.00000    1.40000  99.1%     -    0s
H   81    84                      90.0000000    2.80000  96.9%   3.1    0s
H   82    86                      62.0000000    2.80000  95.5%   3.1    0s
H   87    90                      51.0000000    3.40000  93.3%   3.0    0s
H 2378  1896                      47.0000000    3.80000  91.9%   7.2    2s
H 2385  1800                      45.0000000    3.80000  91.6%   7.1    2s
H 6189  3323                      42.0000000    4.40000  89.5%   8.3    3s
 10443  5950   16.86667   31   10   42.00000    5.40000  87.1%   8.8    5s
 21781 14036   13.93333   39    3   42.00000    5.80000  86.2%   9.0   10s
 42146 28130   35.55000   48   28   42.00000    6.80000  83.8%   9.3   15s
 65757 44968 infeasible   65        42.00000    6.80000  83.8%   9.1   20s
 84727 58073   12.40000   30    6   42.00000    7.40000  82.4%   9.3   25s
 105826 72396     cutoff   47        42.00000    7.80000  81.4%   9.5   30s
H116304 76614                      39.0000000    7.80000  80.0%   9.5   32s
 126741 83486 infeasible   58        39.00000    7.80000  80.0%   9.5   35s
 150835 100089     cutoff   50        39.00000    7.80000  80.0%   9.5   40s
 170957 113935   36.03333   61   12   39.00000    7.80000  80.0%   9.5   45s
 191227 127780   29.63077   65    3   39.00000    8.20000  79.0%   9.5   50s
 212614 141799   24.65000   42   15   39.00000    8.40000  78.5%   9.6   55s
 228321 152315   30.66667   60    5   39.00000    8.60000  77.9%   9.6   60s
 247739 165337   24.28000   44    8   39.00000    8.60000  77.9%   9.6   65s
 264419 176357   16.10769   35    6   39.00000    8.80000  77.4%   9.6   70s
 279631 186382   27.13333   59    3   39.00000    8.80000  77.4%   9.6   75s
 299608 199911   29.86667   56    8   39.00000    8.80000  77.4%   9.6   80s
 319000 213129   33.76000   68   10   39.00000    8.80000  77.4%   9.6   85s
 335736 224536   33.20000   56    8   39.00000    8.80000  77.4%   9.6   90s
 354786 237302     cutoff   69        39.00000    8.80000  77.4%   9.6   95s
 372540 249396 infeasible   54        39.00000    8.80000  77.4%   9.5  100s
 389704 261254   34.33333   69    6   39.00000    8.80000  77.4%   9.5  105s
 408580 274139   13.40000   34    6   39.00000    8.80000  77.4%   9.5  110s
 428063 287264   24.46667   59    4   39.00000    9.04444  76.8%   9.5  115s
 449622 301767   15.80000   36    7   39.00000    9.10000  76.7%   9.5  120s
 468071 313330   36.93333   52   16   39.00000    9.20000  76.4%   9.6  125s
 487010 325176 infeasible   55        39.00000    9.20000  76.4%   9.6  130s
 502035 334393   34.57143   49   20   39.00000    9.40000  75.9%   9.6  135s
 516232 343468   35.43333   56   14   39.00000    9.40000  75.9%   9.7  140s
 532864 354109   18.73333   45    4   39.00000    9.60000  75.4%   9.7  145s
 547530 363905    9.93333   31    3   39.00000    9.60000  75.4%   9.7  150s
 569587 378342   36.82353   67   10   39.00000    9.60000  75.4%   9.7  155s
 589052 390916   23.93333   41   10   39.00000    9.60000  75.4%   9.7  160s
 610093 404796   16.73333   36    5   39.00000    9.60000  75.4%   9.7  165s
 630441 418161   31.82222   63    8   39.00000    9.60000  75.4%   9.7  170s
 654497 434107   17.63333   38    5   39.00000    9.60000  75.4%   9.7  175s
 675107 447640   15.40000   38    6   39.00000    9.60000  75.4%   9.7  180s
 695173 460790   25.86667   46    8   39.00000    9.60000  75.4%   9.7  185s
 716639 474478   31.13333   49   12   39.00000    9.80000  74.9%   9.7  190s
 735914 487125   15.90000   39    7   39.00000    9.80000  74.9%   9.7  195s
 759001 502664   27.80000   47   12   39.00000    9.80000  74.9%   9.7  200s
 780213 516814   17.40000   42    6   39.00000    9.80000  74.9%   9.7  205s
 800785 530947   18.48889   39    9   39.00000    9.80000  74.9%   9.7  210s
 817295 542049   34.76667   55   13   39.00000    9.80000  74.9%   9.7  215s
 835086 553909 infeasible   58        39.00000    9.80000  74.9%   9.7  220s
 852475 565878   35.46667   61   10   39.00000    9.80000  74.9%   9.7  225s
 868533 576863     cutoff   55        39.00000    9.80000  74.9%   9.7  230s
 887922 589879   28.53333   49   11   39.00000    9.80000  74.9%   9.7  235s
 902069 599353   16.20000   41    4   39.00000    9.80000  74.9%   9.7  240s
 923857 613924   16.40000   36    6   39.00000    9.80000  74.9%   9.7  245s
 944870 628032   37.55238   62   15   39.00000    9.80000  74.9%   9.7  250s
 966278 642671   17.96667   38    7   39.00000    9.80000  74.9%   9.7  255s
 986344 655889   15.86667   44    6   39.00000   10.10000  74.1%   9.6  260s
 1007230 669797   21.73333   50    5   39.00000   10.10000  74.1%   9.6  265s
 1027352 682998   37.44444   63   10   39.00000   10.20000  73.8%   9.6  270s
 1041695 691680   35.42121   60   11   39.00000   10.20000  73.8%   9.7  275s
 1057966 701849   26.98384   43   11   39.00000   10.20000  73.8%   9.7  280s
 1066989 707350   18.13333   43    6   39.00000   10.20000  73.8%   9.7  285s
 1085447 718994   24.37143   50    7   39.00000   10.20000  73.8%   9.7  290s
 1102213 729436 infeasible   56        39.00000   10.20000  73.8%   9.8  295s
 1118153 739692 infeasible   47        39.00000   10.30000  73.6%   9.8  300s
 1134129 749894   28.86011   44   13   39.00000   10.40000  73.3%   9.8  305s
 1154096 762313   14.20000   33    9   39.00000   10.40000  73.3%   9.8  310s
 1171263 773104   31.66667   56   12   39.00000   10.40000  73.3%   9.8  315s
 1184629 781458   18.34444   42    8   39.00000   10.40000  73.3%   9.8  320s
 1201724 792190   24.20000   41    7   39.00000   10.40000  73.3%   9.8  325s
 1218483 802659   22.46667   41    9   39.00000   10.60000  72.8%   9.8  330s
 1234105 812174   19.40000   46    6   39.00000   10.60000  72.8%   9.8  335s
 1251573 823442 infeasible   70        39.00000   10.60000  72.8%   9.8  340s
 1266588 833104   17.73333   40    4   39.00000   10.60000  72.8%   9.8  345s
 1281878 843061   35.04000   56   12   39.00000   10.60000  72.8%   9.8  350s
 1297374 853378 infeasible   69        39.00000   10.60000  72.8%   9.8  355s
 1312180 862881   37.70000   61   15   39.00000   10.60000  72.8%   9.8  360s
 1327992 873133   29.74000   64    7   39.00000   10.60000  72.8%   9.8  365s
 1344603 883987   12.40000   37    6   39.00000   10.60000  72.8%   9.8  370s
 1360308 894103 infeasible   58        39.00000   10.60000  72.8%   9.8  375s
 1378815 906116     cutoff   39        39.00000   10.60000  72.8%   9.8  380s
 1396499 917691   16.73333   38    5   39.00000   10.60000  72.8%   9.8  385s
 1415669 930016   14.20000   36    3   39.00000   10.60000  72.8%   9.8  390s
 1430812 939964 infeasible   46        39.00000   10.60000  72.8%   9.8  395s
 1448625 951536 infeasible   57        39.00000   10.60000  72.8%   9.8  400s
 1465030 961921   14.56667   39    6   39.00000   10.60000  72.8%   9.8  405s
 1481870 972803 infeasible   43        39.00000   10.60000  72.8%   9.8  410s
 1499529 984542   37.93333   55   13   39.00000   10.60000  72.8%   9.8  415s
 1516091 995344   28.98333   52   10   39.00000   10.60000  72.8%   9.8  420s
 1535729 1008140   28.54054   58    7   39.00000   10.60000  72.8%   9.8  425s
 1550977 1017959   20.80000   40    7   39.00000   10.60000  72.8%   9.8  430s
 1564988 1026969   23.33333   47   14   39.00000   10.60000  72.8%   9.8  435s
 1581904 1037981   12.10000   35    3   39.00000   10.60000  72.8%   9.8  440s
 1599110 1049325   14.80000   38    2   39.00000   10.60000  72.8%   9.8  445s
 1616035 1060513   35.07784   45   16   39.00000   10.60000  72.8%   9.8  450s
 1634143 1072282   36.96667   57   14   39.00000   10.60000  72.8%   9.8  455s
 1645455 1079755   14.60000   37    4   39.00000   10.60000  72.8%   9.8  460s
 1662195 1090431   29.15152   53   10   39.00000   10.60000  72.8%   9.8  465s
 1680675 1102410   27.20000   45    8   39.00000   10.60000  72.8%   9.9  470s
 1697993 1113354   23.20000   43    5   39.00000   10.60000  72.8%   9.9  475s
 1714879 1123978     cutoff   51        39.00000   10.60000  72.8%   9.9  480s
 1730282 1134034 infeasible   42        39.00000   10.60000  72.8%   9.9  485s
 1746797 1144470     cutoff   38        39.00000   10.60000  72.8%   9.9  490s
 1762089 1154088   36.20000   57   13   39.00000   10.80000  72.3%   9.9  495s
 1774754 1161740   23.60000   39    9   39.00000   10.80000  72.3%   9.9  500s
 1785394 1168115   25.40000   42   11   39.00000   10.80000  72.3%   9.9  505s
 1800485 1177219   22.50000   42   11   39.00000   10.80000  72.3%   9.9  510s
 1818829 1189356 infeasible   60        39.00000   10.80000  72.3%   9.9  515s
 1840253 1203635   34.26667   74   13   39.00000   10.80000  72.3%   9.9  520s
 1855171 1213554   36.41111   66   13   39.00000   10.80000  72.3%   9.9  525s
 1868695 1222481   17.20000   44    2   39.00000   10.80000  72.3%   9.9  530s
 1884195 1232559   29.46667   55   14   39.00000   10.80000  72.3%   9.9  535s
 1901460 1244075   37.80000   58   12   39.00000   10.80000  72.3%   9.9  540s
 1918499 1255317   26.32000   61    3   39.00000   10.80000  72.3%   9.9  545s
 1938147 1268352   37.46667   71   12   39.00000   10.80000  72.3%   9.9  550s
 1954285 1278720   20.73333   38    7   39.00000   10.80000  72.3%   9.9  555s
 1972086 1290559 infeasible   50        39.00000   10.80000  72.3%   9.9  560s
 1990311 1302926   13.40000   39    6   39.00000   10.80000  72.3%   9.9  565s
 2006540 1313739   23.95333   53    6   39.00000   10.80000  72.3%   9.9  570s
 2023123 1324706   27.89333   61    9   39.00000   10.80000  72.3%   9.9  575s
 2040545 1336655 infeasible   77        39.00000   10.80000  72.3%   9.9  580s
 2058985 1348926   16.20000   36    4   39.00000   10.80000  72.3%   9.9  585s
 2075072 1359602   36.97500   64   16   39.00000   10.80000  72.3%   9.9  590s
 2088971 1368900   13.60000   37    4   39.00000   10.80000  72.3%   9.9  595s
 2104000 1378881 infeasible   75        39.00000   10.80000  72.3%   9.9  600s
 2121542 1390670   10.93333   35    3   39.00000   10.80000  72.3%   9.9  605s
 2137981 1401666     cutoff   55        39.00000   10.80000  72.3%   9.8  610s
 2155746 1413288   32.23333   50    9   39.00000   10.80000  72.3%   9.8  615s
 2167945 1421364   14.93333   38    3   39.00000   10.80000  72.3%   9.8  620s
 2179847 1429165   21.40000   47    6   39.00000   10.93333  72.0%   9.8  625s
 2191356 1436492   14.80000   39    2   39.00000   11.00000  71.8%   9.8  630s
 2207280 1446161   24.20000   48    7   39.00000   11.10000  71.5%   9.8  635s
 2220873 1454994   18.06667   40    3   39.00000   11.10000  71.5%   9.8  640s
 2237231 1465655   18.42222   42    6   39.00000   11.10000  71.5%   9.8  645s
 2252167 1475770   26.30000   55    6   39.00000   11.10000  71.5%   9.8  650s
 2270228 1487478   28.60000   55    9   39.00000   11.10000  71.5%   9.8  655s
 2288613 1499217   20.60000   41    9   39.00000   11.10000  71.5%   9.8  660s
 2304265 1509668   26.92222   62    4   39.00000   11.10000  71.5%   9.8  665s
 2318675 1519080   35.27816   63   13   39.00000   11.20000  71.3%   9.8  670s
 2334547 1528615 infeasible   54        39.00000   11.20000  71.3%   9.8  675s
 2351123 1538625   27.15000   48    9   39.00000   11.20000  71.3%   9.8  680s
 2368566 1549255   16.40000   33    6   39.00000   11.20000  71.3%   9.8  685s
 2384189 1558828   24.40000   44    9   39.00000   11.20000  71.3%   9.9  690s
 2401046 1568986   32.50000   51   11   39.00000   11.20000  71.3%   9.9  695s
 2415256 1577574     cutoff   61        39.00000   11.20000  71.3%   9.9  700s
 2430358 1586329   27.26667   45   11   39.00000   11.20000  71.3%   9.9  705s
 2448069 1596630   36.20000   56   16   39.00000   11.20000  71.3%   9.9  710s
 2464879 1606474   33.66667   54   11   39.00000   11.20000  71.3%   9.9  715s
 2481439 1616569   36.45000   54   16   39.00000   11.20000  71.3%   9.9  720s
 2494926 1624643   36.86667   54   15   39.00000   11.20000  71.3%   9.9  725s
 2511729 1635822   36.28889   59   13   39.00000   11.30000  71.0%   9.9  730s
 2526280 1645776   26.26276   58    8   39.00000   11.30000  71.0%   9.9  735s
 2547542 1659762   15.00000   35    5   39.00000   11.40000  70.8%   9.9  740s
 2564529 1670001   18.06667   34    8   39.00000   11.40000  70.8%   9.9  745s
 2581147 1680028   25.20000   43    7   39.00000   11.40000  70.8%   9.9  750s
 2598832 1690945 infeasible   61        39.00000   11.40000  70.8%   9.9  755s
 2613303 1699720     cutoff   39        39.00000   11.40000  70.8%   9.9  760s
 2633067 1711957   25.53333   47   12   39.00000   11.40000  70.8%   9.9  765s
 2646330 1720010   25.40000   41   11   39.00000   11.40000  70.8%   9.9  770s
 2661035 1729022   18.66667   37    7   39.00000   11.40000  70.8%   9.9  775s
 2672114 1735761   12.40000   35    6   39.00000   11.40000  70.8%   9.9  780s
 2681362 1741314   35.05000   54   19   39.00000   11.40000  70.8%   9.9  785s
 2693403 1748682   21.13333   38   11   39.00000   11.40000  70.8%   9.9  790s
 2707595 1757346   34.20000   57   13   39.00000   11.40000  70.8%   9.9  795s
 2722574 1766350   26.09048   42   10   39.00000   11.40000  70.8%   9.9  800s
 2738846 1776017     cutoff   45        39.00000   11.40000  70.8%   9.9  805s
 2755064 1785898   36.66667   65   15   39.00000   11.40000  70.8%   9.9  810s
 2771355 1795731   17.20000   40    3   39.00000   11.40000  70.8%   9.9  815s
 2787971 1805995   37.63383   64   16   39.00000   11.40000  70.8%  10.0  820s
 2806718 1817863 infeasible   44        39.00000   11.56667  70.3%  10.0  825s
 2820845 1826587   16.40000   37    6   39.00000   11.56667  70.3%  10.0  830s
 2839875 1838116   14.80000   36    7   39.00000   11.60000  70.3%  10.0  835s
 2856985 1848209   31.30000   46   11   39.00000   11.60000  70.3%  10.0  840s
 2872693 1857879 infeasible   41        39.00000   11.60000  70.3%  10.0  845s
 2890157 1869302   37.24103   62   19   39.00000   11.60000  70.3%  10.0  850s
 2904709 1878821   37.65455   63   10   39.00000   11.60000  70.3%  10.0  855s
 2921635 1889715     cutoff   60        39.00000   11.60000  70.3%  10.0  860s
 2937303 1899660   24.33333   44   12   39.00000   11.60000  70.3%  10.0  865s
 2954213 1910445   32.46667   44   14   39.00000   11.60000  70.3%  10.0  870s
 2970785 1920882   12.60000   33    4   39.00000   11.60000  70.3%  10.0  875s
 2988456 1932329   12.60000   36    4   39.00000   11.60000  70.3%  10.0  880s
 3002827 1941434 infeasible   52        39.00000   11.60000  70.3%  10.0  885s
 3021088 1952862 infeasible   54        39.00000   11.60000  70.3%  10.0  890s
 3036203 1962642   28.00000   58    9   39.00000   11.60000  70.3%  10.0  895s
 3054118 1974152   25.00000   42   13   39.00000   11.60000  70.3%  10.0  900s
 3068314 1983148   35.46667   51   16   39.00000   11.60000  70.3%  10.0  905s
 3085313 1994170   26.86667   51    8   39.00000   11.60000  70.3%  10.0  910s
 3099747 2003351   33.86250   62   10   39.00000   11.60000  70.3%  10.0  915s
 3116600 2014212   29.11250   50   11   39.00000   11.60000  70.3%  10.0  920s
 3132580 2024328   16.53750   40    4   39.00000   11.60000  70.3%  10.0  925s
 3151318 2036245 infeasible   55        39.00000   11.60000  70.3%  10.0  930s
 3169388 2048010   16.20000   44    3   39.00000   11.60000  70.3%  10.0  935s
 3185509 2058338   14.40000   37    6   39.00000   11.60000  70.3%  10.0  940s
 3201832 2068939   26.73333   52   10   39.00000   11.60000  70.3%  10.0  945s
 3216289 2078051   25.51111   52    9   39.00000   11.60000  70.3%  10.0  950s
 3234602 2089904   21.40000   44    5   39.00000   11.60000  70.3%  10.0  955s
H3247267 2076091                      38.0000000   11.60000  69.5%  10.0  959s
 3247710 2076333   30.80000   53    8   38.00000   11.60000  69.5%  10.0  960s
 3265210 2087611   17.73333   41    5   38.00000   11.60000  69.5%  10.0  965s
 3282126 2098523   34.33333   50   18   38.00000   11.60000  69.5%  10.0  970s
 3299392 2109606   19.30000   44    4   38.00000   11.60000  69.5%  10.0  975s
 3317564 2121267   16.60000   41    4   38.00000   11.60000  69.5%  10.0  980s
 3333898 2131510     cutoff   43        38.00000   11.60000  69.5%  10.0  985s
 3351687 2142810 infeasible   57        38.00000   11.60000  69.5%  10.0  990s
 3367382 2152836   32.06667   58   14   38.00000   11.60000  69.5%  10.0  995s
 3380842 2161229   22.20000   49    3   38.00000   11.60000  69.5%  10.0 1000s
 3396550 2171163   24.40000   45   11   38.00000   11.60000  69.5%  10.0 1005s
 3409011 2178904   15.40000   32    6   38.00000   11.60000  69.5%  10.0 1010s
 3422434 2187194   29.50000   44   13   38.00000   11.60000  69.5%  10.0 1015s
 3438937 2197702   35.78056   61   11   38.00000   11.60000  69.5%  10.0 1020s
 3457502 2209933   26.76667   54   11   38.00000   11.60000  69.5%  10.0 1025s
 3473084 2219688   26.26667   52    9   38.00000   11.60000  69.5%  10.0 1030s
 3492714 2232187     cutoff   58        38.00000   11.60000  69.5%  10.0 1035s
 3508009 2241980   27.48889   55   12   38.00000   11.60000  69.5%  10.0 1040s
 3525337 2252924   11.93333   31    3   38.00000   11.60000  69.5%   9.9 1045s
 3542745 2264085     cutoff   37        38.00000   11.60000  69.5%   9.9 1050s
 3559448 2274746   14.40000   38    6   38.00000   11.60000  69.5%   9.9 1055s
 3573607 2283909   35.63333   63   18   38.00000   11.60000  69.5%   9.9 1060s
 3588485 2293147     cutoff   63        38.00000   11.60000  69.5%   9.9 1065s
 3605328 2303822   22.53333   48    7   38.00000   11.60000  69.5%   9.9 1070s
 3624409 2315730   36.44444   56   15   38.00000   11.60000  69.5%   9.9 1075s
 3641779 2326691   35.81538   67    9   38.00000   11.60000  69.5%   9.9 1080s
 3658589 2337500   16.20000   40    3   38.00000   11.60000  69.5%   9.9 1085s
 3670863 2345373   14.40000   35    6   38.00000   11.60000  69.5%   9.9 1090s
 3683691 2353428   18.80000   42    7   38.00000   11.60000  69.5%   9.9 1095s
 3701796 2364929   26.26667   47   11   38.00000   11.60000  69.5%   9.9 1100s
 3715404 2373523   26.31429   47   12   38.00000   11.60000  69.5%   9.9 1105s
 3731670 2383516 infeasible   53        38.00000   11.60000  69.5%   9.9 1110s
 3749307 2394947   35.77778   65    5   38.00000   11.60000  69.5%   9.9 1115s
 3764115 2404279   34.10000   64   11   38.00000   11.60000  69.5%   9.9 1120s
 3780570 2414780   32.09067   50   15   38.00000   11.60000  69.5%   9.9 1125s
 3797534 2425585   31.86667   55    9   38.00000   11.60000  69.5%   9.9 1130s
 3814727 2436398   20.06667   41    9   38.00000   11.60000  69.5%   9.9 1135s
 3832335 2447431   12.70000   34    2   38.00000   11.60000  69.5%   9.9 1140s
 3849056 2457754   19.13333   40    3   38.00000   11.60000  69.5%   9.9 1145s
 3865833 2468109   34.16667   51   14   38.00000   11.60000  69.5%   9.9 1150s
 3884725 2479669   31.20000   53    7   38.00000   11.60000  69.5%   9.9 1155s
 3900934 2489880   35.46667   67    8   38.00000   11.60000  69.5%   9.9 1160s
 3918177 2500881   25.40000   48   12   38.00000   11.60000  69.5%   9.9 1165s
 3936617 2512694   30.53524   52   10   38.00000   11.60000  69.5%   9.9 1170s
 3952338 2522687   29.80000   45   12   38.00000   11.60000  69.5%   9.9 1175s
 3969686 2533561   34.74444   61    7   38.00000   11.60000  69.5%   9.9 1180s
 3986642 2544495   26.06667   51    6   38.00000   11.60000  69.5%   9.9 1185s
 4007362 2557993   18.06667   40    9   38.00000   11.60000  69.5%   9.9 1190s
 4022638 2567639   20.73333   43    4   38.00000   11.60000  69.5%   9.9 1195s
 4040190 2578882   17.03333   43    5   38.00000   11.60000  69.5%   9.9 1200s
 4057721 2590009   35.31111   57    7   38.00000   11.60000  69.5%   9.9 1205s
 4074845 2600577   17.40000   43    6   38.00000   11.60000  69.5%   9.9 1210s
 4092219 2611778   31.06667   53   14   38.00000   11.60000  69.5%   9.9 1215s
 4109924 2623000   27.52877   48   11   38.00000   11.60000  69.5%   9.9 1220s
 4127112 2634111   24.40000   48   10   38.00000   11.60000  69.5%   9.9 1225s
 4144805 2645452   35.65556   56   15   38.00000   11.60000  69.5%   9.9 1230s
 4160775 2655593   25.72308   51   12   38.00000   11.60000  69.5%   9.9 1235s
 4177690 2666344 infeasible   52        38.00000   11.60000  69.5%   9.9 1240s
 4196724 2678640     cutoff   59        38.00000   11.60000  69.5%   9.9 1245s
 4208294 2686033   27.46667   46    9   38.00000   11.60000  69.5%   9.9 1250s
 4225738 2697446   25.06667   41   13   38.00000   11.60000  69.5%   9.9 1255s
 4245978 2710544   29.69091   53   13   38.00000   11.60000  69.5%   9.9 1260s
 4262405 2720719   34.20000   56    9   38.00000   11.60000  69.5%   9.9 1265s
 4278995 2730830   36.76190   63   10   38.00000   11.65000  69.3%   9.9 1270s
 4293878 2739421   20.13333   43    6   38.00000   11.80000  68.9%   9.9 1275s
 4310067 2748810   19.13333   36    6   38.00000   11.80000  68.9%   9.9 1280s
 4326766 2758612   29.80000   56   12   38.00000   11.80000  68.9%   9.9 1285s
 4342533 2767847   35.60000   51   15   38.00000   11.80000  68.9%   9.9 1290s
 4356968 2776263   36.88889   49   16   38.00000   11.80000  68.9%   9.9 1295s
 4374679 2786433     cutoff   44        38.00000   11.80000  68.9%   9.9 1300s
 4389121 2795161   34.00000   52   15   38.00000   11.80000  68.9%   9.9 1305s
 4406351 2806704     cutoff   63        38.00000   11.80000  68.9%   9.9 1310s
 4427709 2820493   13.40000   35    6   38.00000   11.80000  68.9%   9.9 1315s
 4443981 2830667   31.13333   49   14   38.00000   11.80000  68.9%   9.9 1320s
 4461965 2842414   27.20000   53    7   38.00000   11.80000  68.9%   9.9 1325s
 4482658 2855963 infeasible   69        38.00000   11.80000  68.9%   9.9 1330s
 4500399 2867609   31.70000   70    8   38.00000   11.80000  68.9%   9.9 1335s
 4517241 2878717   35.43889   52   13   38.00000   11.80000  68.9%   9.9 1340s
 4536240 2890910   36.93333   71    6   38.00000   11.80000  68.9%   9.9 1345s
 4554078 2902596   13.93333   35    3   38.00000   11.80000  68.9%   9.9 1350s
 4570826 2913698   20.92308   49    8   38.00000   11.80000  68.9%   9.9 1355s
 4591466 2927467   18.94545   44    8   38.00000   11.80000  68.9%   9.9 1360s
 4610235 2939998   31.50833   53   11   38.00000   11.80000  68.9%   9.9 1365s
 4628104 2951981   29.48889   55   10   38.00000   11.80000  68.9%   9.9 1370s
 4646236 2963806   29.86667   58   10   38.00000   11.80000  68.9%   9.9 1375s
 4665640 2976742   24.43333   54    9   38.00000   11.80000  68.9%   9.9 1380s
 4685094 2989697   20.45000   49    7   38.00000   11.80000  68.9%   9.9 1385s
 4701715 3000670 infeasible   53        38.00000   11.80000  68.9%   9.8 1390s
 4721476 3013902   21.86667   47    6   38.00000   11.80000  68.9%   9.8 1395s
 4740367 3026471   23.46667   49    9   38.00000   11.80000  68.9%   9.8 1400s
 4757447 3037919   34.40000   54   11   38.00000   11.80000  68.9%   9.8 1405s
 4776614 3050658   16.73333   36    5   38.00000   11.80000  68.9%   9.8 1410s
 4794530 3062635   24.62222   51    7   38.00000   11.80000  68.9%   9.8 1415s
 4809348 3072220   36.10000   60   11   38.00000   11.80000  68.9%   9.8 1420s
 4828857 3085204   16.20000   41    4   38.00000   11.80000  68.9%   9.8 1425s
 4846445 3096936   27.82222   54   10   38.00000   11.80000  68.9%   9.8 1430s
 4864826 3108991   19.26667   42    8   38.00000   11.80000  68.9%   9.8 1435s
 4882313 3120335   34.99583   53   19   38.00000   11.86667  68.8%   9.8 1440s
 4898511 3130155   34.09583   62    9   38.00000   11.90000  68.7%   9.8 1445s
 4916821 3141684   19.42222   49    5   38.00000   11.95000  68.6%   9.8 1450s
 4934855 3152882   16.80000   36    6   38.00000   12.00000  68.4%   9.8 1455s
 4951902 3163759   25.33333   50    6   38.00000   12.00000  68.4%   9.8 1460s
 4972145 3176352   25.70000   49    9   38.00000   12.04444  68.3%   9.8 1465s
 4985243 3184454   15.20000   41    3   38.00000   12.10000  68.2%   9.8 1470s
 5000347 3194501   19.20000   40    8   38.00000   12.10000  68.2%   9.8 1475s
 5020216 3207615   34.26667   65   10   38.00000   12.10000  68.2%   9.8 1480s
 5035674 3217713   36.55714   57   21   38.00000   12.10000  68.2%   9.8 1485s
 5049163 3226433   23.97143   50    2   38.00000   12.10000  68.2%   9.8 1490s
 5063930 3235715   26.75833   59    8   38.00000   12.10000  68.2%   9.8 1495s
 5081541 3246733   16.40000   38    6   38.00000   12.10000  68.2%   9.8 1500s
 5098747 3257780     cutoff   44        38.00000   12.10000  68.2%   9.8 1505s
 5117605 3269935   16.00000   40    5   38.00000   12.10000  68.2%   9.8 1510s
 5135237 3281264   17.43333   39    3   38.00000   12.10000  68.2%   9.8 1515s
 5152207 3291851   26.43333   46   11   38.00000   12.10000  68.2%   9.8 1520s
 5168678 3302692   32.62222   58   14   38.00000   12.10000  68.2%   9.8 1525s
 5186382 3313975   25.66667   42    9   38.00000   12.13333  68.1%   9.8 1530s
 5203030 3324667   36.00000   55   12   38.00000   12.20000  67.9%   9.8 1535s
 5217323 3333399   14.30000   35    4   38.00000   12.20000  67.9%   9.8 1540s
 5234815 3344024 infeasible   68        38.00000   12.20000  67.9%   9.8 1545s
 5252343 3354562   14.20000   33    3   38.00000   12.20000  67.9%   9.8 1550s
 5267326 3363639   35.60833   59   16   38.00000   12.20000  67.9%   9.8 1555s
 5281571 3372061 infeasible   49        38.00000   12.20000  67.9%   9.8 1560s
 5299582 3383139   32.46667   61    8   38.00000   12.20000  67.9%   9.8 1565s
 5316807 3393918   22.66667   43    7   38.00000   12.20000  67.9%   9.8 1570s
 5333822 3404346   33.86667   46   14   38.00000   12.20000  67.9%   9.8 1576s
 5344531 3410907   34.88219   49    8   38.00000   12.20000  67.9%   9.8 1580s
 5360850 3420845   29.80000   49    6   38.00000   12.20000  67.9%   9.8 1585s
 5377338 3430610   26.37778   46    9   38.00000   12.20000  67.9%   9.8 1590s
 5394344 3441039   24.56667   48    9   38.00000   12.20000  67.9%   9.8 1595s
 5411710 3451367   32.42917   55   10   38.00000   12.20000  67.9%   9.8 1600s
 5427918 3461023   26.20000   44    8   38.00000   12.20000  67.9%   9.8 1605s
 5446807 3472277   15.73333   37    5   38.00000   12.20000  67.9%   9.8 1610s
 5463692 3482008   24.13333   56    6   38.00000   12.20000  67.9%   9.8 1615s
 5480605 3491834   29.93333   50    7   38.00000   12.20000  67.9%   9.8 1620s
 5495374 3500655 infeasible   46        38.00000   12.20000  67.9%   9.8 1625s
 5507863 3508119   22.40000   42    6   38.00000   12.20000  67.9%   9.8 1630s
 5524723 3518405 infeasible   56        38.00000   12.20000  67.9%   9.8 1635s
 5543190 3529761 infeasible   52        38.00000   12.20000  67.9%   9.8 1640s
 5560357 3539989   35.25000   53   11   38.00000   12.20000  67.9%   9.8 1645s
 5575107 3548917   33.06667   55   11   38.00000   12.20000  67.9%   9.8 1650s
 5590755 3558172   33.61481   65    9   38.00000   12.20000  67.9%   9.8 1655s
 5608113 3568682 infeasible   66        38.00000   12.20000  67.9%   9.8 1660s
 5627008 3580271 infeasible   50        38.00000   12.23333  67.8%   9.8 1665s
 5647112 3592907   33.62667   75    6   38.00000   12.30000  67.6%   9.8 1670s
 5665236 3604807   27.40000   53    5   38.00000   12.30000  67.6%   9.8 1675s
 5685355 3618048   27.26667   53    6   38.00000   12.30000  67.6%   9.8 1680s
 5704096 3630353   32.33333   56   13   38.00000   12.30000  67.6%   9.8 1685s
 5719243 3640358   35.53333   62   11   38.00000   12.30000  67.6%   9.8 1690s
 5736219 3651309   19.00000   34   10   38.00000   12.37778  67.4%   9.8 1695s
 5751578 3660360     cutoff   61        38.00000   12.40000  67.4%   9.8 1700s
 5765538 3668426 infeasible   64        38.00000   12.40000  67.4%   9.8 1705s
 5778435 3676123   34.01212   51   14   38.00000   12.40000  67.4%   9.8 1710s
 5793979 3685217   23.80000   41    7   38.00000   12.40000  67.4%   9.8 1715s
 5807425 3693092   18.20000   36    8   38.00000   12.40000  67.4%   9.8 1720s
 5825077 3703777   23.30000   41    9   38.00000   12.40000  67.4%   9.8 1725s
 5842029 3713552   22.46667   42    9   38.00000   12.40000  67.4%   9.8 1730s
 5859675 3724012   20.03333   35   10   38.00000   12.40000  67.4%   9.8 1735s
 5876937 3734260   28.93611   47   10   38.00000   12.40000  67.4%   9.8 1740s
 5894978 3745087   13.40000   35    6   38.00000   12.40000  67.4%   9.8 1745s
 5908906 3753247   27.30303   47   10   38.00000   12.40000  67.4%   9.8 1750s
 5927081 3763937   35.22143   59    8   38.00000   12.40000  67.4%   9.8 1755s
 5941520 3772447   23.53333   48    8   38.00000   12.40000  67.4%   9.8 1760s
 5956588 3781359   25.20000   50    8   38.00000   12.40000  67.4%   9.8 1765s
 5971101 3789712   34.80000   61    6   38.00000   12.40000  67.4%   9.8 1770s
 5983542 3796904 infeasible   57        38.00000   12.40000  67.4%   9.8 1775s
 5999412 3806202   23.40000   45    9   38.00000   12.40000  67.4%   9.8 1780s
 6015852 3815766   34.46667   56   10   38.00000   12.40000  67.4%   9.8 1785s
 6031334 3824931   25.65000   44    8   38.00000   12.40000  67.4%   9.8 1790s
 6043045 3831745   32.94167   49    9   38.00000   12.40000  67.4%   9.8 1795s
 6059870 3841687   22.93333   39    8   38.00000   12.40000  67.4%   9.8 1800s

Explored 6061505 nodes (59368054 simplex iterations) in 1800.03 seconds
Thread count was 16 (of 16 available processors)

Solution count 9: 38 39 42 ... 157

Time limit reached
Best objective 3.800000000000e+01, best bound 1.300000000000e+01, gap 65.7895%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    342.7 MiB    342.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    342.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    343.0 MiB      0.2 MiB       m2 = m.construct()
    28    343.0 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    343.0 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    343.0 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    343.0 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    343.0 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    343.0 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    343.0 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    343.0 MiB      0.0 MiB       m2.update()
    44    343.0 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    343.0 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    343.0 MiB      0.0 MiB       if(set_binary):
    51    343.0 MiB      0.0 MiB           for x in set_binary:
    52    343.0 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    343.0 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   4545.6 MiB   4202.6 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   4545.6 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   4545.6 MiB      0.0 MiB       j = 0
    69   4545.6 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   4545.6 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   4545.6 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   4545.6 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   4545.6 MiB      0.0 MiB       if m2.status == 9:
    78   4545.6 MiB      0.0 MiB           result.timeout = True
    79   4545.6 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   4545.6 MiB      0.0 MiB           result.solution = True
    81   4545.6 MiB      0.0 MiB           result.feasible = True
    82   4545.6 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   4545.6 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   4545.6 MiB      0.0 MiB           for v in current_vars:
    85   4545.6 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   4545.6 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   4545.6 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   4545.6 MiB      0.0 MiB                   j = j+1
    91                             
    92   4545.6 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 18:22:25 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.tra,lab' -mdp /tmp/tmp1p6dai1h

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.2.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp1p6dai1h"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.022 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      40 (1 initial)
Transitions: 85
Choices:     76

Transition matrix: 168 nodes (3 terminal), 85 minterms, vars: 6r/6c/2nd

Prob0A: 31 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 175 iterations in 0.00 seconds (average 0.000023, setup 0.00)

yes = 6, no = 1, maybe = 33

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=6, nodes=171] [8.0 KB]
Adding sparse bits... [levels=6-6, num=2, compact=2/2] [0.4 KB]
Creating vector for yes... [dist=2, compact] [0.1 KB]
Allocating iteration vectors... [3 x 0.3 KB]
TOTAL: [9.4 KB]

Starting iterations...

Iterative method: 1136 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 0.19999999810819508

Time for model checking: 0.01 seconds.

Result: 0.19999999810819508 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [3e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   3.000000e-01   0.000000e+00      0s
     556    5.5100000e+01   0.000000e+00   0.000000e+00      0s

Solved in 556 iterations and 0.03 seconds
Optimal objective  5.510000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1511.9 MiB   1511.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1511.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1511.9 MiB      0.0 MiB       m2 = m.construct()
    28   1511.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1511.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1511.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1511.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1511.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1511.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1511.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1511.9 MiB      0.0 MiB       m2.update()
    44   1511.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1511.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1511.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1511.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1511.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1511.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1511.9 MiB      0.0 MiB       j = 0
    69   1511.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1511.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1511.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1511.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1511.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1511.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1511.9 MiB      0.0 MiB           result.solution = True
    81   1511.9 MiB      0.0 MiB           result.feasible = True
    82   1511.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1511.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1511.9 MiB      0.0 MiB           for v in current_vars:
    85   1511.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1511.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1511.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1511.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1511.9 MiB      0.0 MiB       return result, res_vec



subsystem size:203

probability: 0.30000000000000004
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 18:22:27 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.tra,lab' -mdp /tmp/tmpfcbmqbv5

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpfcbmqbv5"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 79 iterations in 0.00 seconds (average 0.000051, setup 0.00)

Time for model construction: 0.037 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      204 (1 initial)
Transitions: 254
Choices:     205

Transition matrix: 539 nodes (3 terminal), 254 minterms, vars: 8r/8c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 352 iterations in 0.02 seconds (average 0.000057, setup 0.00)

yes = 76, no = 1, maybe = 127

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=455] [21.3 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [1.1 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.6 KB]
TOTAL: [27.6 KB]

Starting iterations...

Iterative method: 1136 iterations in 0.01 seconds (average 0.000004, setup 0.00)

Value in the initial state: 0.3085937449215108

Time for model checking: 0.034 seconds.

Result: 0.3085937449215108 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [3e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   3.000000e-01   0.000000e+00      0s
     556    5.5100000e+01   0.000000e+00   0.000000e+00      0s

Solved in 556 iterations and 0.03 seconds
Optimal objective  5.510000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1511.9 MiB   1511.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1511.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1511.9 MiB      0.0 MiB       m2 = m.construct()
    28   1511.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1511.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1511.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1511.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1511.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1511.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1511.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1511.9 MiB      0.0 MiB       m2.update()
    44   1511.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1511.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1511.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1511.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1511.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1511.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1511.9 MiB      0.0 MiB       j = 0
    69   1511.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1511.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1511.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1511.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1511.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1511.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1511.9 MiB      0.0 MiB           result.solution = True
    81   1511.9 MiB      0.0 MiB           result.feasible = True
    82   1511.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1511.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1511.9 MiB      0.0 MiB           for v in current_vars:
    85   1511.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1511.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1511.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1511.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1511.9 MiB      0.0 MiB       return result, res_vec



subsystem size:203

probability: 0.30000000000000004
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [7e-01, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [3e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   3.000000e-01   0.000000e+00      0s
     149    1.5169239e+02   0.000000e+00   0.000000e+00      0s

Solved in 149 iterations and 0.01 seconds
Optimal objective  1.516923861e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1511.9 MiB   1511.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1511.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1511.9 MiB      0.0 MiB       m2 = m.construct()
    28   1511.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1511.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1511.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1511.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1511.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1511.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1511.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1511.9 MiB      0.0 MiB       m2.update()
    44   1511.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1511.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1511.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1511.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1511.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1511.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1511.9 MiB      0.0 MiB       j = 0
    69   1511.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1511.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1511.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1511.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1511.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1511.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1511.9 MiB      0.0 MiB           result.solution = True
    81   1511.9 MiB      0.0 MiB           result.feasible = True
    82   1511.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1511.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1511.9 MiB      0.0 MiB           for v in current_vars:
    85   1511.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1511.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1511.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1511.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1511.9 MiB      0.0 MiB       return result, res_vec



subsystem size:151

probability: 0.30000000000000004
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 18:22:28 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.tra,lab' -mdp /tmp/tmpro6nhchh

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpro6nhchh"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 41 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.032 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      153 (1 initial)
Transitions: 190
Choices:     153

Transition matrix: 411 nodes (3 terminal), 190 minterms, vars: 8r/8c/1nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 238 iterations in 0.01 seconds (average 0.000050, setup 0.00)

yes = 12, no = 1, maybe = 140

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=8, nodes=396] [18.6 KB]
Adding sparse bits... [levels=8-8, num=1, compact=1/1] [0.9 KB]
Creating vector for yes... [dist=2, compact] [0.3 KB]
Allocating iteration vectors... [3 x 1.2 KB]
TOTAL: [23.3 KB]

Starting iterations...

Iterative method: 1136 iterations in 0.00 seconds (average 0.000004, setup 0.00)

Value in the initial state: 0.3007812449833137

Time for model checking: 0.021 seconds.

Result: 0.3007812449833137 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 287 rows and 572 columns
Presolve time: 0.00s
Presolved: 242 rows, 484 columns, 1076 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -8.0800000e+32   1.800000e+32   8.080000e+02      0s
     517   -2.4400000e+02   0.000000e+00   0.000000e+00      0s

Solved in 517 iterations and 0.01 seconds
Optimal objective -2.440000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1511.9 MiB   1511.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1511.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1511.9 MiB      0.0 MiB       m2 = m.construct()
    28   1511.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1511.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1511.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1511.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1511.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1511.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1511.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1511.9 MiB      0.0 MiB       m2.update()
    44   1511.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1511.9 MiB      0.0 MiB       if(zero_vars):
    47   1511.9 MiB      0.0 MiB           for x in zero_vars:
    48   1511.9 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1511.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1511.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1511.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1511.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1511.9 MiB      0.0 MiB       j = 0
    69   1511.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1511.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1511.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1511.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1511.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1511.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1511.9 MiB      0.0 MiB           result.solution = True
    81   1511.9 MiB      0.0 MiB           result.feasible = True
    82   1511.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1511.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1511.9 MiB      0.0 MiB           for v in current_vars:
    85   1511.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1511.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1511.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1511.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1511.9 MiB      0.0 MiB       return result, res_vec


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 2112 columns and 3868 nonzeros
Variable types: 1056 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 2e+02]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [3e-01, 1e+00]
Presolve removed 428 rows and 700 columns
Presolve time: 0.01s
Presolved: 1157 rows, 1412 columns, 3016 nonzeros
Variable types: 704 continuous, 708 integer (708 binary)

Root relaxation: objective 3.223402e+00, 1371 iterations, 0.11 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.22340    0  206          -    3.22340      -     -    0s
H    0     0                     244.0000000    3.22340  98.7%     -    0s
H    0     0                     203.0000000    3.22340  98.4%     -    1s
     0     2    3.22340    0  203  203.00000    3.22340  98.4%     -    2s
H    2     4                     177.0000000    3.25647  98.2%   140    4s
H    3     8                     147.0000000    3.28699  97.8%   127    4s
H    4     8                     102.0000000    3.31797  96.7%   128    4s
    15    32    3.90815    4  132  102.00000    3.33216  96.7%   177    5s
H   21    32                      90.0000000    3.82418  95.8%   171    5s
H   26    32                      79.0000000    3.82418  95.2%   172    5s
H   31    48                      72.0000000    3.82418  94.7%   164    5s
H   37    48                      63.0000000    3.82418  93.9%   150    5s
H  341   328                      52.0000000    3.90815  92.5%  39.1    6s
H  763   689                      50.0000000    3.90815  92.2%  35.4    8s
  1005   873   12.31301   46   84   50.00000    3.90815  92.2%  36.5   10s
  2348  1863   39.19780  102   53   50.00000    4.14498  91.7%  34.0   15s
  3205  2497   34.23053   47  136   50.00000    4.14498  91.7%  32.0   20s
  3213  2512    4.14498   13  138   50.00000    4.14498  91.7%  32.8   25s
H 3237  2409                      47.0000000    4.14498  91.2%  33.7   26s
  3840  2788    6.38914   34   62   47.00000    4.14498  91.2%  32.1   30s
  4968  3366   20.19332   47   61   47.00000    4.14498  91.2%  34.2   35s
  6810  4211   17.38124   52   89   47.00000    4.14498  91.2%  34.8   40s
  9040  5160   31.31148   76   82   47.00000    4.14498  91.2%  35.5   45s
 10820  6085   16.67376   50  115   47.00000    4.28454  90.9%  35.9   51s
 11231  6347   24.56657   65   93   47.00000    4.35087  90.7%  36.1   55s
 13998  8492   37.12447   71   37   47.00000    4.42605  90.6%  35.0   60s
 16281 10208 infeasible   61        47.00000    4.43605  90.6%  35.2   65s
 17644 11216   11.37361   37   93   47.00000    4.45486  90.5%  35.1   70s
 21039 13904   33.78638   86  136   47.00000    4.51813  90.4%  34.4   75s
 25205 17066    7.26748   25  104   47.00000    4.81680  89.8%  33.5   81s
 28520 19533   38.20789   84   65   47.00000    5.25544  88.8%  33.1   85s
 30763 21188   19.96101   41  101   47.00000    5.26126  88.8%  33.7   91s
 34572 23902     cutoff   92        47.00000    5.26323  88.8%  33.6   95s
 37565 25911   37.15930   81   37   47.00000    5.27091  88.8%  34.4  101s
 40644 28171   30.14365   63   41   47.00000    5.41463  88.5%  34.4  105s
 43988 30632   23.25891   53   83   47.00000    5.41774  88.5%  34.6  111s
 46521 32529   32.19616   68   44   47.00000    5.42011  88.5%  35.0  116s
 49774 34851   44.18996   91   75   47.00000    5.42011  88.5%  35.4  121s
 52634 36818   11.40338   32  219   47.00000    5.43687  88.4%  35.9  126s
 56064 39249   12.13386   34  165   47.00000    5.44312  88.4%  36.1  131s
 59796 42097 infeasible   63        47.00000    5.61789  88.0%  36.0  136s
 63499 44754   41.28414   81   91   47.00000    5.63498  88.0%  35.8  142s
 65394 46120   44.34590   98   81   47.00000    5.66075  88.0%  35.8  145s
 71322 50339 infeasible   93        47.00000    5.81721  87.6%  35.4  151s
 74806 52792    8.39836   25   90   47.00000    5.88787  87.5%  35.2  155s
 79816 56417   11.72721   44  115   47.00000    5.91561  87.4%  35.1  162s
 83701 59343     cutoff   80        47.00000    6.23198  86.7%  34.7  166s
 86914 61587   36.44315   92   87   47.00000    6.23198  86.7%  34.6  171s
 90156 63840 infeasible   71        47.00000    6.24950  86.7%  34.7  176s
 93708 66433   44.00212   90   99   47.00000    6.25360  86.7%  34.6  180s
 98729 70071   37.19393   71   60   47.00000    6.35776  86.5%  34.4  186s
 101990 72422   44.26121   85   74   47.00000    6.37525  86.4%  34.3  190s
 104881 74407    6.41125   27  107   47.00000    6.39250  86.4%  34.4  195s
 107167 76060   10.32507   29   62   47.00000    6.39303  86.4%  34.4  200s
 110396 78413   24.63516   56   74   47.00000    6.39362  86.4%  34.4  205s
 113701 80652   18.36032   53   80   47.00000    6.40123  86.4%  34.5  210s
 119022 84528   34.13893   69   58   47.00000    6.40572  86.4%  34.4  216s
 121684 86340   39.22357   72   48   47.00000    6.40572  86.4%  34.7  220s
 123595 87707   13.35677   34   99   47.00000    6.40881  86.4%  34.8  225s
 128428 91266    7.40434   34   93   47.00000    6.41073  86.4%  35.0  232s
 131788 93807   30.21719   69   77   47.00000    6.41260  86.4%  35.1  236s
 134454 95685   31.30084   64   55   47.00000    6.41469  86.4%  35.3  241s
 137707 97948   38.44253   68  126   47.00000    6.41603  86.3%  35.5  249s
 138204 98277   33.20598   70   47   47.00000    6.41603  86.3%  35.6  252s
 141975 100968   38.09723   73   36   47.00000    6.41603  86.3%  35.7  256s
 144690 102932   34.29143   72   75   47.00000    6.41603  86.3%  35.9  261s
 148107 105375    8.38181   30   99   47.00000    6.42400  86.3%  36.0  266s
 150224 106965   11.35551   43   95   47.00000    6.42605  86.3%  36.1  270s
 155125 110537   41.07500   89   19   47.00000    6.42605  86.3%  36.4  277s
 157800 112316   37.36800   41  204   47.00000    6.43961  86.3%  36.5  281s
 162182 115488 infeasible   67        47.00000    6.44707  86.3%  36.5  286s
 165580 117874   45.26330   85   60   47.00000    6.47822  86.2%  36.6  290s
 167711 119317   23.64971   40   75   47.00000    6.50047  86.2%  36.7  296s
 171638 121975   28.45306   43  136   47.00000    6.50047  86.2%  36.7  301s
 174987 124076   44.51477   77   70   47.00000    6.61537  85.9%  36.6  306s
 179286 126888   36.32175   86  108   47.00000    6.61903  85.9%  36.6  310s
 184764 130462   14.45492   37  133   47.00000    6.63783  85.9%  36.5  316s
 187753 132398   17.31692   41   74   47.00000    6.65154  85.8%  36.6  320s
 191369 134840   13.39699   44  111   47.00000    6.69186  85.8%  36.5  331s
 193759 136525    9.25615   28   70   47.00000    6.70057  85.7%  36.5  336s
 197964 139798   31.10730   60   79   47.00000    6.70057  85.7%  36.3  341s
 203560 143755   13.58282   45   91   47.00000    6.79336  85.5%  36.2  346s
 206890 146269   29.80824   66   78   47.00000    6.80451  85.5%  36.2  350s
 212435 150257   10.34913   31  121   47.00000    6.86548  85.4%  35.9  355s
 218011 154411   45.24543   80   78   47.00000    6.87493  85.4%  35.7  361s
 223876 158803   43.16736   84  125   47.00000    6.88118  85.4%  35.4  365s
 228384 162010   44.75155   82  126   47.00000    6.88794  85.3%  35.3  370s
 232743 165076   11.60899   32   91   47.00000    6.91665  85.3%  35.3  375s
 234850 166555   14.31875   35   78   47.00000    6.91842  85.3%  35.2  381s
 237563 168388   30.14864   62  109   47.00000    6.92039  85.3%  35.2  385s
 242334 171783   31.44906   66   84   47.00000    6.99416  85.1%  35.2  390s
 247506 175506    8.15504   37  161   47.00000    7.05419  85.0%  35.1  396s
 253051 179561   43.20462   89   53   47.00000    7.10748  84.9%  35.0  401s
 256483 181986   35.20883   60   50   47.00000    7.13597  84.8%  34.9  406s
 261672 185693   41.20203   90   46   47.00000    7.21146  84.7%  34.8  411s
 267010 189492     cutoff   80        47.00000    7.22249  84.6%  34.6  416s
 272161 193198   15.20548   33   53   47.00000    7.23577  84.6%  34.5  421s
 274500 194907   24.18745   56   51   47.00000    7.23577  84.6%  34.5  425s
 278205 197801   41.10615   86   36   47.00000    7.23577  84.6%  34.4  430s
 282870 201102   22.25010   44   53   47.00000    7.27784  84.5%  34.3  435s
 287844 204513   12.24957   31  121   47.00000    7.28369  84.5%  34.3  440s
 293025 208212   41.20991   92   53   47.00000    7.28593  84.5%  34.3  445s
 296429 210739    8.72126   30  136   47.00000    7.29385  84.5%  34.3  451s
 299674 213265   19.57111   41  165   47.00000    7.30039  84.5%  34.2  455s
 304274 216649     cutoff   83        47.00000    7.31102  84.4%  34.3  461s
 308922 219872   31.18007   66   79   47.00000    7.31918  84.4%  34.3  466s
 312154 222134   12.36831   34   91   47.00000    7.32541  84.4%  34.4  470s
 316903 225407   44.18466   84  118   47.00000    7.35456  84.4%  34.4  476s
 318479 226469   33.23663   67   64   47.00000    7.36123  84.3%  34.4  480s
 322494 229212   13.39425   35   85   47.00000    7.36447  84.3%  34.4  485s
 328179 233290   43.25322   96   59   47.00000    7.36916  84.3%  34.3  491s
 331540 235503   21.22770   47   55   47.00000    7.37175  84.3%  34.3  495s
 337412 239813   22.31718   54   66   47.00000    7.37610  84.3%  34.2  500s
 341396 242587   38.17380   71   46   47.00000    7.37696  84.3%  34.2  506s
 345381 245380   41.16852   84   58   47.00000    7.37959  84.3%  34.2  510s
 350891 249425   41.14955   78   53   47.00000    7.38273  84.3%  34.1  515s
 355752 253009   15.46802   44  108   47.00000    7.38483  84.3%  34.0  520s
 358751 254906   11.50166   37  128   47.00000    7.38656  84.3%  34.1  525s
 362869 257944   42.13811   95   54   47.00000    7.38815  84.3%  34.1  532s
 366335 260494   43.10697  102   44   47.00000    7.39099  84.3%  34.0  537s
 370231 263297   42.14475   77   41   47.00000    7.39204  84.3%  34.0  541s
 373416 265737   40.09025   90   33   47.00000    7.39239  84.3%  33.9  545s
 378688 269840 infeasible   85        47.00000    7.39388  84.3%  33.9  551s
 381621 271908 infeasible   38        47.00000    7.39569  84.3%  33.9  557s
 383358 273043   19.48174   49   99   47.00000    7.39569  84.3%  33.9  562s
 386408 275306    7.42034   31  100   47.00000    7.39609  84.3%  34.0  566s
 389374 277406 infeasible   61        47.00000    7.39758  84.3%  34.0  571s
 392637 279822   36.33406   48  144   47.00000    7.39832  84.3%  34.0  576s
 395788 282093 infeasible   89        47.00000    7.39923  84.3%  34.1  581s
 398745 284062   13.67826   41  124   47.00000    7.40102  84.3%  34.1  586s
 401249 285881   44.14182   77   45   47.00000    7.40123  84.3%  34.1  592s
 403007 287122   15.34273   40   94   47.00000    7.40157  84.3%  34.2  595s
 406845 289816   32.32145   68   85   47.00000    7.40217  84.3%  34.2  600s
 410108 292091   45.30701   48  131   47.00000    7.40359  84.2%  34.2  605s
 415113 295656   44.24385   85   48   47.00000    7.40482  84.2%  34.3  611s
 417936 297583   29.17020   63   59   47.00000    7.40605  84.2%  34.4  615s
 419920 298984   40.11977   72   31   47.00000    7.40780  84.2%  34.4  621s
 423270 301325   43.11816   86   44   47.00000    7.40788  84.2%  34.5  626s
 427253 304194   11.37035   30   88   47.00000    7.40863  84.2%  34.6  631s
 430654 306450   44.23311   88   78   47.00000    7.40936  84.2%  34.6  636s
 434079 308949 infeasible   50        47.00000    7.41073  84.2%  34.6  641s
 436942 310869   38.09811   86   35   47.00000    7.41073  84.2%  34.7  645s
 440548 313471   33.65533   54   61   47.00000    7.41190  84.2%  34.8  650s
 442666 314802   14.34343   37   88   47.00000    7.41278  84.2%  34.8  655s
 445745 316817   12.36034   31   91   47.00000    7.41474  84.2%  34.9  660s
 449807 319849   37.50667   87  111   47.00000    7.41575  84.2%  34.9  666s
 453297 322216   39.62398   75   42   47.00000    7.41575  84.2%  35.0  670s
 456396 324437   18.31226   41   85   47.00000    7.41575  84.2%  35.1  675s
 459588 326618   45.35507   39  138   47.00000    7.42047  84.2%  35.1  680s
 462807 328674   18.82417   57   93   47.00000    7.42178  84.2%  35.2  687s
 464563 329913    8.41406   33   91   47.00000    7.42306  84.2%  35.3  690s
 468658 332954   15.63232   43  152   47.00000    7.42331  84.2%  35.3  695s
 472052 335321   34.11025   83   35   47.00000    7.42816  84.2%  35.4  700s
 475578 337673   42.71125   89  101   47.00000    7.43106  84.2%  35.5  705s
 479806 340690 infeasible   35        47.00000    7.43571  84.2%  35.5  714s
 480186 340783   13.50672   38  118   47.00000    7.43643  84.2%  35.5  717s
 481954 341840   34.22138   73   56   47.00000    7.43722  84.2%  35.6  720s
 485920 344400   30.13100   69   90   47.00000    7.43826  84.2%  35.6  725s
 490138 347193   44.71318   99   80   47.00000    7.44697  84.2%  35.6  731s
 493127 349077     cutoff   87        47.00000    7.44902  84.2%  35.7  735s
 496323 351132   10.53049   33  129   47.00000    7.45661  84.1%  35.7  740s
 502256 355348   15.73202   34   83   47.00000    7.45661  84.1%  35.8  747s
 505592 357714   23.84908   57  108   47.00000    7.46302  84.1%  35.8  751s
 509531 360484 infeasible   71        47.00000    7.47184  84.1%  35.8  755s
 511873 362104   33.13560   62   53   47.00000    7.48366  84.1%  35.8  761s
 515470 364686    7.48508   33  132   47.00000    7.48508  84.1%  35.8  765s
 520887 368503   44.29384   90   74   47.00000    7.49691  84.0%  35.8  771s
 524076 370679 infeasible   35        47.00000    7.50213  84.0%  35.8  777s
 526920 372482   44.14076   96   59   47.00000    7.50213  84.0%  35.9  782s
 529428 374070   31.46981   51  164   47.00000    7.52947  84.0%  35.9  787s
 531382 375403 infeasible   30        47.00000    7.53462  84.0%  35.9  790s
 533406 376739 infeasible   46        47.00000    7.54887  83.9%  35.9  797s
 535270 378012   35.13473   77   57   47.00000    7.56106  83.9%  35.9  800s
 538835 380249   26.79465   62  109   47.00000    7.56627  83.9%  36.0  805s
 541993 382378   21.51540   49   92   47.00000    7.56627  83.9%  36.0  810s
 545352 384758    7.56627   36  170   47.00000    7.56627  83.9%  36.1  816s
 548782 387019   32.46234   63   74   47.00000    7.57764  83.9%  36.1  821s
 552968 389834   43.45483   95   80   47.00000    7.59295  83.8%  36.1  826s
 556918 392507   37.19158   64   48   47.00000    7.60278  83.8%  36.1  831s
 560585 394939   40.15488   87   54   47.00000    7.60715  83.8%  36.0  836s
 563722 397065   43.09683   90   43   47.00000    7.61286  83.8%  36.0  840s
 566822 399039   45.75846   98   86   47.00000    7.61354  83.8%  36.1  845s
 572788 403114   31.30196   68   74   47.00000    7.62191  83.8%  36.0  851s
 576143 405484   34.24200   71   59   47.00000    7.62334  83.8%  36.0  856s
 579384 407697   45.73612   98   86   47.00000    7.62787  83.8%  36.0  861s
 581911 409377    7.62927   28  123   47.00000    7.62927  83.8%  36.0  865s
 587072 412884 infeasible   86        47.00000    7.63432  83.8%  36.0  871s
 590085 414877 infeasible   52        47.00000    7.64087  83.7%  36.0  876s
 592841 416642    8.06219   39  123   47.00000    7.65155  83.7%  36.0  880s
 596431 419172   11.39979   37  117   47.00000    7.65678  83.7%  36.0  885s
 599715 421390   44.64935   55  136   47.00000    7.66982  83.7%  36.0  890s
 603155 423688   29.39615   62   97   47.00000    7.67222  83.7%  36.0  895s
 608560 427360   43.37367   60  131   47.00000    7.67222  83.7%  36.0  901s
 611962 429476   14.67091   42   91   47.00000    7.67738  83.7%  36.0  905s
 614499 430988   12.56590   41  143   47.00000    7.68609  83.6%  36.0  910s
 620259 434786   24.77288   57  118   47.00000    7.69499  83.6%  36.0  917s
 623762 437057   29.15533   59   46   47.00000    7.69797  83.6%  35.9  921s
 627563 439734 infeasible   36        47.00000    7.70708  83.6%  35.9  926s
 630685 441705 infeasible   82        47.00000    7.74436  83.5%  35.9  930s
 635127 444643     cutoff   97        47.00000    7.76636  83.5%  35.9  936s
 638216 446974   33.29990   67  107   47.00000    7.76636  83.5%  35.9  940s
 641861 449642   39.21964   83   93   47.00000    7.76780  83.5%  35.9  945s
 647202 453609     cutoff   79        47.00000    7.78443  83.4%  35.8  951s
 650997 456505   22.30857   36  166   47.00000    7.78730  83.4%  35.8  956s
 654092 458754   38.61189   77   75   47.00000    7.79134  83.4%  35.8  960s
 658394 461811   40.19511   62  156   47.00000    7.79283  83.4%  35.8  965s
 661959 464532   24.24024   61   88   47.00000    7.79713  83.4%  35.7  970s
 665515 467177   44.34244   72   86   47.00000    7.81158  83.4%  35.7  975s
 670725 470912   17.26598   54   87   47.00000    7.82082  83.4%  35.7  981s
 674394 473705   21.25810   55   61   47.00000    7.82869  83.3%  35.7  985s
 679916 477772   42.16516   93   55   47.00000    7.84248  83.3%  35.6  990s
 685036 481488   43.19447   90   58   47.00000    7.84601  83.3%  35.5  997s
 688711 484106   16.69452   32   87   47.00000    7.85164  83.3%  35.5 1001s
 693833 487876   19.22692   38   86   47.00000    7.85386  83.3%  35.4 1006s
 698703 491351   36.05705   64   94   47.00000    7.85730  83.3%  35.4 1011s
 702276 494037   44.20760   84   70   47.00000    7.86082  83.3%  35.3 1015s
 707368 497827   26.21438   55   97   47.00000    7.86383  83.3%  35.3 1021s
 710782 500270   24.17549   45   62   47.00000    7.86497  83.3%  35.2 1025s
 716997 504798    7.86947   43   84   47.00000    7.86799  83.3%  35.2 1031s
 721577 508161   12.83432   34   86   47.00000    7.86903  83.3%  35.2 1035s
 726139 511373   38.30442   92   82   47.00000    7.86903  83.3%  35.2 1041s
 729594 513781   42.17943   80   48   47.00000    7.86903  83.3%  35.1 1045s
 735345 517959   38.67809   85  129   47.00000    7.87620  83.2%  35.1 1051s
 740294 521525    9.85730   30   70   47.00000    7.87663  83.2%  35.0 1056s
 745153 524887   44.33631   96   70   47.00000    7.88009  83.2%  35.0 1061s
 748058 526901   22.72255   46   50   47.00000    7.88248  83.2%  35.0 1065s
 752646 530184   40.13496   82   75   47.00000    7.88419  83.2%  35.0 1071s
 755863 532447   42.18988   87   47   47.00000    7.88483  83.2%  34.9 1075s
 760946 536072   39.17155   71   52   47.00000    7.88727  83.2%  34.9 1081s
 763942 538236   29.41623   59   97   47.00000    7.88891  83.2%  34.9 1085s
 768435 541408    9.86448   30   73   47.00000    7.89250  83.2%  34.9 1091s
 771582 543738   17.22313   41   80   47.00000    7.89590  83.2%  34.9 1096s
 774957 546203   10.96608   37  123   47.00000    7.89604  83.2%  34.9 1100s
 779496 549415   40.74961   81   96   47.00000    7.89976  83.2%  34.9 1106s
 782952 551825   34.54230   64  102   47.00000    7.90181  83.2%  34.9 1110s
 788301 555593   31.16744   61   60   47.00000    7.90522  83.2%  34.9 1116s
 791669 558022   38.19849   85   51   47.00000    7.90522  83.2%  34.9 1121s
 795293 560578   27.69003   56   49   47.00000    7.91605  83.2%  34.8 1125s
 799466 563519   40.13566   84   78   47.00000    7.91752  83.2%  34.8 1131s
 802975 565924   23.99547   46   98   47.00000    7.92900  83.1%  34.8 1135s
 807778 569241   44.88934   82  106   47.00000    7.93473  83.1%  34.8 1141s
 810998 571509   17.39639   41  117   47.00000    7.95676  83.1%  34.8 1145s
 816101 575191   15.57302   47  137   47.00000    7.96217  83.1%  34.8 1150s
 820785 578360   13.53347   36  129   47.00000    7.96568  83.1%  34.8 1156s
 825229 581362     cutoff  106        47.00000    7.96649  83.1%  34.8 1161s
 830105 584731   44.18023   85   92   47.00000    7.97222  83.0%  34.8 1166s
 833049 586669   10.93314   33   92   47.00000    7.97737  83.0%  34.8 1170s
 838712 590572     cutoff   95        47.00000    7.98201  83.0%  34.8 1176s
 843656 593901   13.55221   39  129   47.00000    7.98256  83.0%  34.8 1181s
 846832 595986 infeasible  105        47.00000    7.98272  83.0%  34.8 1185s
 852173 599606   10.77826   42  134   47.00000    7.98862  83.0%  34.8 1190s
 857110 602968   38.28712   67  101   47.00000    7.99826  83.0%  34.8 1196s
 861070 605865 infeasible   94        47.00000    8.01471  82.9%  34.8 1200s
 867042 609884     cutoff   93        47.00000    8.01890  82.9%  34.7 1205s
 871925 613132   24.82966   48   71   47.00000    8.02709  82.9%  34.6 1211s
 877437 616759   28.89412   66   84   47.00000    8.02971  82.9%  34.6 1217s
 881016 619331   33.38274   71   93   47.00000    8.03157  82.9%  34.5 1220s
 885603 622579 infeasible   79        47.00000    8.03861  82.9%  34.5 1225s
 889694 625362   42.26705  100   66   47.00000    8.03959  82.9%  34.5 1231s
 892883 627591 infeasible   70        47.00000    8.04053  82.9%  34.5 1235s
 897493 630850   45.36782   89   73   47.00000    8.04286  82.9%  34.5 1240s
 900322 632839   23.42701   53  107   47.00000    8.04572  82.9%  34.5 1245s
 904937 636004   33.70887   89   97   47.00000    8.04635  82.9%  34.5 1251s
 908294 638235   26.67944   50  111   47.00000    8.04895  82.9%  34.5 1255s
 912847 641299    9.75626   35  141   47.00000    8.05252  82.9%  34.4 1261s
 916181 643531 infeasible   61        47.00000    8.05315  82.9%  34.4 1265s
 920800 646811   20.57879   48   83   47.00000    8.05419  82.9%  34.5 1272s
 924030 648861   22.25000   53   52   47.00000    8.05419  82.9%  34.5 1277s
 927185 651105   24.44316   45  112   47.00000    8.06129  82.8%  34.5 1281s
 930308 653066   40.27662   75   82   47.00000    8.06129  82.8%  34.5 1285s
 934842 656202    8.06726   37  118   47.00000    8.06726  82.8%  34.5 1290s
 938853 659037   34.79313   67   66   47.00000    8.07099  82.8%  34.5 1296s
 942429 661419 infeasible   32        47.00000    8.08214  82.8%  34.5 1301s
 945786 663537    9.06644   29  134   47.00000    8.08433  82.8%  34.5 1305s
 950375 666676   14.69078   33  163   47.00000    8.09624  82.8%  34.5 1311s
 953776 668909   40.03296   73  158   47.00000    8.10049  82.8%  34.5 1316s
 957013 671143   35.15584   70   94   47.00000    8.10481  82.8%  34.5 1320s
 961875 674508   30.15722   54   75   47.00000    8.11497  82.7%  34.5 1326s
 965436 676839   26.02370   57   91   47.00000    8.12079  82.7%  34.5 1331s
 968616 679124 infeasible   82        47.00000    8.12868  82.7%  34.5 1336s
 972018 681318    9.18784   31  124   47.00000    8.14908  82.7%  34.5 1340s
 977230 684759   43.20408   77   93   47.00000    8.17246  82.6%  34.5 1346s
 981108 687492   21.81026   52  107   47.00000    8.17616  82.6%  34.5 1350s
 985257 690329   36.29509   76   61   47.00000    8.18072  82.6%  34.4 1355s
 990695 694223   14.77020   43   72   47.00000    8.18776  82.6%  34.4 1360s
 995800 697680   13.16544   37  128   47.00000    8.19192  82.6%  34.3 1366s
 1000821 701294   15.05835   41  112   47.00000    8.19394  82.6%  34.3 1371s
 1004340 703833   43.18966   89   67   47.00000    8.19612  82.6%  34.3 1375s
 1009368 707506   22.44926   49   97   47.00000    8.19916  82.6%  34.3 1381s
 1014098 710686   40.29970   98   74   47.00000    8.20083  82.6%  34.2 1386s
 1019395 714307   40.13320   90   62   47.00000    8.20149  82.6%  34.2 1391s
 1024290 717675   32.19892   68   73   47.00000    8.21057  82.5%  34.2 1396s
 1027397 719808 infeasible   68        47.00000    8.21244  82.5%  34.2 1400s
 1032669 723487     cutoff   90        47.00000    8.21651  82.5%  34.1 1405s
 1038942 727862   10.18967   33  126   47.00000    8.22211  82.5%  34.1 1411s
 1042693 730425   19.05131   54  105   47.00000    8.22211  82.5%  34.1 1415s
 1046095 732847   34.18142   67   58   47.00000    8.22468  82.5%  34.0 1420s
 1049145 734874    8.22676   25  160   47.00000    8.22676  82.5%  34.0 1425s
 1052386 737105   34.89164   70   98   47.00000    8.22849  82.5%  34.0 1430s
 1055387 739181   17.72866   39   69   47.00000    8.23310  82.5%  34.0 1435s
 1058568 741436   41.33008   95   83   47.00000    8.23392  82.5%  34.0 1440s
 1061820 743637    9.94956   38   82   47.00000    8.23517  82.5%  34.0 1446s
 1065209 746007   13.82224   43   95   47.00000    8.24018  82.5%  34.0 1451s
 1068259 748064   36.22409   83   65   47.00000    8.24488  82.5%  34.0 1456s
 1071151 750045 infeasible   61        47.00000    8.24596  82.5%  34.0 1462s
 1073741 751753   19.65487   55  124   47.00000    8.24950  82.4%  34.0 1467s
 1077674 754675 infeasible   87        47.00000    8.25216  82.4%  34.0 1471s
 1081067 757192   30.14375   65   92   47.00000    8.25544  82.4%  33.9 1476s
 1084477 759605     cutoff   91        47.00000    8.25544  82.4%  33.9 1480s
 1087829 762109    9.26026   26   64   47.00000    8.26384  82.4%  33.9 1485s
 1091038 764468   33.11885   72   36   47.00000    8.26512  82.4%  33.9 1490s
 1095878 767937   12.71420   42  114   47.00000    8.26907  82.4%  33.9 1497s
 1099029 770349   34.21278   65   63   47.00000    8.27009  82.4%  33.9 1501s
 1102361 772823   45.17869  102   65   47.00000    8.27293  82.4%  33.9 1506s
 1105621 775191   33.08809   63   44   47.00000    8.27336  82.4%  33.9 1511s
 1108842 777572   26.18558   51  120   47.00000    8.27336  82.4%  33.9 1515s
 1111773 779618   34.10676   72   44   47.00000    8.27504  82.4%  33.9 1521s
 1115073 782023   36.15854   76   92   47.00000    8.27615  82.4%  33.9 1525s
 1120381 785906   34.16004   74   58   47.00000    8.27683  82.4%  33.9 1531s
 1123372 787978   45.28713   80   83   47.00000    8.27874  82.4%  33.9 1535s
 1127995 791248   40.16045   84   81   47.00000    8.28033  82.4%  33.9 1541s
 1131291 793564   24.08293   58   94   47.00000    8.28090  82.4%  33.9 1545s
 1134654 795957     cutoff   92        47.00000    8.28225  82.4%  33.9 1550s
 1139718 799568   19.23514   38  114   47.00000    8.28361  82.4%  33.9 1555s
 1144988 803322   20.91420   51  140   47.00000    8.28478  82.4%  33.9 1560s
 1149731 806732   40.14787   89   65   47.00000    8.28648  82.4%  33.9 1565s
 1154372 809917   43.62551   92  102   47.00000    8.28833  82.4%  33.9 1570s
 1159484 813579   29.12618   66   44   47.00000    8.28983  82.4%  33.9 1575s
 1164912 817574   27.50530   61   64   47.00000    8.28983  82.4%  33.9 1580s
 1169603 821062   18.49138   38  137   47.00000    8.29320  82.4%  33.9 1585s
 1174353 824506   15.58997   41  133   47.00000    8.29344  82.4%  33.9 1591s
 1177522 826834   14.55065   40  108   47.00000    8.29590  82.3%  33.9 1596s
 1180824 829070   45.69475   96  111   47.00000    8.29795  82.3%  33.9 1600s
 1185444 832481   33.14877   67   48   47.00000    8.30041  82.3%  33.9 1606s
 1188966 835115   12.24176   30   65   47.00000    8.30082  82.3%  33.9 1610s
 1193546 838405 infeasible  100        47.00000    8.30408  82.3%  33.9 1616s
 1196694 840644 infeasible   57        47.00000    8.30557  82.3%  33.9 1621s
 1199790 842859   32.39038   88   82   47.00000    8.30738  82.3%  33.9 1625s
 1202600 844750   44.32234   93   98   47.00000    8.30820  82.3%  33.9 1630s
 1207873 848522   33.12039   74   81   47.00000    8.31071  82.3%  33.9 1636s
 1211493 851142    9.35102   31   87   47.00000    8.31148  82.3%  33.9 1640s
 1216505 854813 infeasible   83        47.00000    8.31311  82.3%  33.9 1646s
 1219836 857065   36.30153   77   89   47.00000    8.31492  82.3%  33.9 1651s
 1223036 859300   35.13945   78   56   47.00000    8.31680  82.3%  33.9 1656s
 1226690 861904   42.14148   81   97   47.00000    8.31866  82.3%  33.9 1660s
 1232004 865616   12.38209   41  105   47.00000    8.31906  82.3%  33.9 1666s
 1235390 868066   40.07857   76   48   47.00000    8.32008  82.3%  33.9 1670s
 1239017 870672   34.15061   62   46   47.00000    8.32381  82.3%  33.9 1675s
 1243545 873745   42.25295   87   70   47.00000    8.32664  82.3%  33.9 1680s
 1248301 877198   44.53573   94   92   47.00000    8.32869  82.3%  33.8 1686s
 1251586 879596   27.28153   53   76   47.00000    8.32869  82.3%  33.8 1690s
 1254218 881414   44.73795   85  107   47.00000    8.33975  82.3%  33.9 1695s
 1259094 884812 infeasible   40        47.00000    8.34223  82.3%  33.9 1701s
 1262251 887008   40.25407   70  100   47.00000    8.34426  82.2%  33.9 1706s
 1264550 888643   22.28138   41   72   47.00000    8.34564  82.2%  33.9 1711s
 1267772 890940   14.33837   31   84   47.00000    8.34564  82.2%  33.9 1716s
 1271681 893558   39.18230   85   50   47.00000    8.34894  82.2%  33.9 1720s
 1276056 896532   44.18836   55   79   47.00000    8.35130  82.2%  33.9 1726s
 1279231 898714   39.73198   78   84   47.00000    8.35276  82.2%  33.9 1731s
 1282440 900942    8.88917   30  114   47.00000    8.35438  82.2%  33.9 1736s
 1285620 903174   32.47582   55   75   47.00000    8.35494  82.2%  33.9 1741s
 1288860 905367   36.18710   73   48   47.00000    8.35615  82.2%  33.9 1745s
 1292784 908212   10.24274   38  131   47.00000    8.35615  82.2%  33.9 1750s
 1297926 911893   10.55151   39  141   47.00000    8.35730  82.2%  33.9 1756s
 1301778 914725   28.24458   72   56   47.00000    8.35889  82.2%  33.9 1760s
 1305759 917579   43.15996   92   42   47.00000    8.35966  82.2%  33.9 1765s
 1310850 921116   31.24356   62   67   47.00000    8.35974  82.2%  33.9 1771s
 1313297 922817   36.18640   76   46   47.00000    8.36123  82.2%  33.9 1775s
 1317587 925712   43.26028   90   86   47.00000    8.36181  82.2%  33.9 1781s
 1321370 928421   43.24074   85   63   47.00000    8.36258  82.2%  33.9 1786s
 1323451 929883   25.74103   62   98   47.00000    8.36306  82.2%  33.9 1790s
 1326553 932064   31.20815   63   60   47.00000    8.36404  82.2%  33.9 1796s
 1330427 934798   16.91380   48  127   47.00000    8.36422  82.2%  33.9 1800s

Explored 1331588 nodes (45103765 simplex iterations) in 1800.03 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 47 50 52 ... 177

Time limit reached
Best objective 4.700000000000e+01, best bound 9.000000000000e+00, gap 80.8511%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1511.9 MiB   1511.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1511.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1511.9 MiB      0.0 MiB       m2 = m.construct()
    28   1511.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1511.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1511.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1511.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1511.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1511.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1511.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1511.9 MiB      0.0 MiB       m2.update()
    44   1511.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1511.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1511.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1511.9 MiB      0.0 MiB       if(find_optimum):
    55   1511.9 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56   1511.9 MiB      0.0 MiB           m2.update()
    57   1511.9 MiB      0.0 MiB           new_obj = LinExpr(0)
    58   1511.9 MiB      0.0 MiB           for var in current_vars:
    59   1511.9 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60   1511.9 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61   1511.9 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62   1511.9 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1408.7 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1408.7 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1408.7 MiB      0.0 MiB       j = 0
    69   1408.7 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1408.7 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1408.7 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1408.7 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1408.7 MiB      0.0 MiB       if m2.status == 9:
    78   1408.7 MiB      0.0 MiB           result.timeout = True
    79   1408.7 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1408.7 MiB      0.0 MiB           result.solution = True
    81   1408.7 MiB      0.0 MiB           result.feasible = True
    82   1408.7 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1408.7 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1408.7 MiB      0.0 MiB           for v in current_vars:
    85   1408.7 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1408.7 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1408.7 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89   1408.7 MiB      0.0 MiB                       res_vec[j] = 0
    90   1408.7 MiB      0.0 MiB                   j = j+1
    91                             
    92   1408.7 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 18:52:32 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.tra,lab' -mdp /tmp/tmpxirwq_co

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpxirwq_co"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.02 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      49 (1 initial)
Transitions: 60
Choices:     49

Transition matrix: 172 nodes (3 terminal), 60 minterms, vars: 6r/6c/1nd

Prob0A: 39 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 249 iterations in 0.00 seconds (average 0.000016, setup 0.00)

yes = 6, no = 1, maybe = 42

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=6, nodes=159] [7.5 KB]
Adding sparse bits... [levels=6-6, num=1, compact=1/1] [0.3 KB]
Creating vector for yes... [dist=2, compact] [0.1 KB]
Allocating iteration vectors... [3 x 0.4 KB]
TOTAL: [9.0 KB]

Starting iterations...

Iterative method: 1618 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 0.3333333293433865

Time for model checking: 0.011 seconds.

Result: 0.3333333293433865 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 1584 columns and 4117 nonzeros
Variable types: 528 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [3e-01, 2e+00]
Presolve removed 289 rows and 280 columns
Presolve time: 0.01s
Presolved: 1296 rows, 1304 columns, 3548 nonzeros
Variable types: 486 continuous, 818 integer (818 binary)

Root relaxation: objective 3.000000e-01, 1 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.30000    0    1          -    0.30000      -     -    0s
H    0     0                     162.0000000    0.30000   100%     -    0s
H    0     0                     119.0000000    0.30000   100%     -    0s
     0     2    1.60000    0    2  119.00000    1.60000  98.7%     -    0s
H   79    76                      87.0000000    3.60000  95.9%   5.1    1s
H   80    77                      85.0000000    3.60000  95.8%   5.0    1s
H   84    77                      79.0000000    3.60000  95.4%   5.0    1s
H   91    83                      59.0000000    3.60000  93.9%   4.9    1s
H 2346  1764                      56.0000000    3.60000  93.6%   6.9    2s
H 2381  1710                      48.0000000    3.60000  92.5%   6.9    2s
  7758  4136   25.36667   39   14   48.00000    5.80000  87.9%   8.3    5s
 23342 15570   39.80980   63   14   48.00000    7.20000  85.0%   8.8   10s
 40713 28377   16.00000   35    8   48.00000    7.20000  85.0%   9.0   15s
 54946 38427    9.20000   27    3   48.00000    8.20000  82.9%   9.4   20s
 68614 48556   34.96762   60   13   48.00000    8.20000  82.9%   9.5   25s
 79965 56813   16.60000   38    9   48.00000    8.20000  82.9%   9.6   30s
 94680 67401   25.46667   52   15   48.00000    8.20000  82.9%   9.6   35s
 108916 77576   33.81364   58   11   48.00000    8.60000  82.1%   9.7   40s
 122122 86852    9.96000   27    6   48.00000    8.73333  81.8%   9.7   45s
 135765 96434   38.26338   71   13   48.00000    8.90000  81.5%   9.8   50s
 147833 104738   12.13333   31    3   48.00000    9.20000  80.8%   9.9   55s
 162592 115460     cutoff   76        48.00000    9.20000  80.8%  10.0   60s
 181100 128933   19.80000   47    8   48.00000    9.20000  80.8%  10.0   65s
 198064 141174   36.73472   72    8   48.00000    9.20000  80.8%  10.0   70s
 213828 152423 infeasible   46        48.00000    9.20000  80.8%  10.0   75s
 231764 165332   41.19259   65   18   48.00000    9.20000  80.8%  10.0   80s
 247425 175996   31.50000   55   11   48.00000    9.40000  80.4%  10.1   85s
 262354 186490     cutoff   57        48.00000    9.60000  80.0%  10.1   90s
 277286 196948   36.63014   51   12   48.00000    9.73333  79.7%  10.2   95s
 292617 207521   29.88095   62    6   48.00000    9.73333  79.7%  10.2  100s
 311616 220821   41.78333   56   28   48.00000    9.73333  79.7%  10.3  105s
 330668 234064   35.66667   48   20   48.00000    9.90000  79.4%  10.4  110s
 348847 246817   38.63333   53   21   48.00000    9.90000  79.4%  10.4  115s
 365797 258353   29.50000   46   17   48.00000   10.13333  78.9%  10.4  120s
 380280 268489   28.68889   45   15   48.00000   10.20000  78.8%  10.4  125s
H386598 271647                      47.0000000   10.20000  78.3%  10.4  127s
 392560 275813   37.10000   57   18   47.00000   10.20000  78.3%  10.4  130s
 409683 287806   19.60000   43    9   47.00000   10.20000  78.3%  10.4  135s
 428297 300969   44.93030   81   14   47.00000   10.20000  78.3%  10.4  140s
 444602 312643 infeasible   70        47.00000   10.20000  78.3%  10.4  145s
 456982 321353   10.20000   29    3   47.00000   10.20000  78.3%  10.4  150s
 467577 328870   22.98384   43   11   47.00000   10.20000  78.3%  10.4  155s
 485797 341850   32.40000   47   14   47.00000   10.20000  78.3%  10.3  160s
 503497 354415   36.71829   56   19   47.00000   10.20000  78.3%  10.3  165s
 520660 366455   24.90000   48    9   47.00000   10.20000  78.3%  10.3  170s
 540802 380343     cutoff   61        47.00000   10.30000  78.1%  10.3  175s
 561211 394381   38.21111   53   16   47.00000   10.40000  77.9%  10.3  180s
 579926 407576   34.62500   60   10   47.00000   10.54000  77.6%  10.3  185s
 595585 417980   19.26667   34   10   47.00000   10.60000  77.4%  10.3  190s
 611032 428322   12.13333   34    6   47.00000   10.69167  77.3%  10.4  195s
 625608 438691   39.33333   55   23   47.00000   10.73333  77.2%  10.4  200s
 642954 450664   15.73333   33    7   47.00000   10.73333  77.2%  10.4  205s
 657716 460729   23.64545   48   11   47.00000   10.73333  77.2%  10.4  210s
 674343 472202   39.48968   70   12   47.00000   10.73333  77.2%  10.4  215s
 692206 484375   45.75000   69    9   47.00000   10.73333  77.2%  10.4  220s
 707015 494722   26.40000   46   13   47.00000   10.73333  77.2%  10.4  225s
 725456 507734 infeasible   49        47.00000   10.73333  77.2%  10.4  230s
 745169 521564   34.03333   61   15   47.00000   10.73333  77.2%  10.4  235s
 764974 535616   14.68889   38    5   47.00000   10.73333  77.2%  10.4  240s
 784202 549127   12.13333   32    6   47.00000   10.73333  77.2%  10.4  245s
 804602 562878   16.53333   37    7   47.00000   10.80000  77.0%  10.5  250s
 820869 574047 infeasible   41        47.00000   10.90000  76.8%  10.5  255s
 838677 586505   44.95000   62   18   47.00000   10.90000  76.8%  10.5  260s
 856129 598804   19.60000   45    4   47.00000   10.90000  76.8%  10.4  265s
 871819 609617   25.50000   49    4   47.00000   10.90000  76.8%  10.4  270s
 889765 621960   26.05455   45    9   47.00000   10.90000  76.8%  10.4  275s
 903132 631619   43.13333   60   19   47.00000   10.90000  76.8%  10.4  280s
 917355 641129   13.05333   36    5   47.00000   11.08889  76.4%  10.4  285s
 933036 651595   25.80000   41   11   47.00000   11.13333  76.3%  10.4  290s
 949437 662304   44.59817   63   18   47.00000   11.13333  76.3%  10.5  295s
 963441 671828   16.60000   35    9   47.00000   11.13333  76.3%  10.5  300s
 978110 681402   36.07121   60   15   47.00000   11.13333  76.3%  10.5  305s
 996375 693295   44.25833   68   20   47.00000   11.13333  76.3%  10.5  310s
 1018315 708794   42.28889   68   19   47.00000   11.20000  76.2%  10.5  315s
 1039867 724059   12.20000   31    3   47.00000   11.20000  76.2%  10.5  320s
 1056275 735550   14.73333   40    5   47.00000   11.20000  76.2%  10.5  325s
 1073464 747744   33.16000   55   11   47.00000   11.20000  76.2%  10.5  330s
H1085090 750307                      46.0000000   11.20000  75.7%  10.5  334s
 1086944 751563   13.73333   32    5   46.00000   11.20000  75.7%  10.5  335s
 1107250 766099   28.13333   48   18   46.00000   11.20000  75.7%  10.5  340s
 1131308 783162   12.73333   32    5   46.00000   11.20000  75.7%  10.5  345s
 1150124 796430   13.96667   36    5   46.00000   11.20000  75.7%  10.5  350s
 1162851 805476   40.16970   63   22   46.00000   11.20000  75.7%  10.4  355s
 1181235 818500   38.72432   75    6   46.00000   11.20000  75.7%  10.4  360s
 1198224 830654   27.12857   45   17   46.00000   11.20000  75.7%  10.4  365s
 1211543 840052   41.97778   69   18   46.00000   11.20000  75.7%  10.4  370s
 1226649 850480   39.29888   66    9   46.00000   11.20000  75.7%  10.4  375s
 1241287 859963   20.20000   46    8   46.00000   11.30000  75.4%  10.4  380s
 1255147 869105 infeasible   54        46.00000   11.40000  75.2%  10.4  385s
 1272316 881303   15.10000   32    8   46.00000   11.40000  75.2%  10.4  390s
 1288460 892337   15.40000   37    5   46.00000   11.40000  75.2%  10.4  395s
 1306007 904055   25.26667   46   11   46.00000   11.40000  75.2%  10.4  400s
 1319861 913415   21.65000   48    7   46.00000   11.40000  75.2%  10.4  405s
 1335839 924021   27.95556   50   12   46.00000   11.40000  75.2%  10.4  410s
 1354027 936226   17.60000   38    8   46.00000   11.46667  75.1%  10.4  415s
 1367793 945596   43.00000   54   17   46.00000   11.55000  74.9%  10.5  420s
 1380482 953986   30.40000   48   12   46.00000   11.60000  74.8%  10.5  425s
 1393080 962343     cutoff   41        46.00000   11.60000  74.8%  10.5  430s
 1407943 971785 infeasible   61        46.00000   11.60000  74.8%  10.5  435s
 1420952 980135   26.40000   42   15   46.00000   11.60000  74.8%  10.5  440s
 1437448 990583     cutoff   55        46.00000   11.68889  74.6%  10.5  445s
 1453643 1001831   35.76364   59   14   46.00000   11.73333  74.5%  10.5  450s
 1465412 1009634   16.13333   36    6   46.00000   11.73333  74.5%  10.5  455s
 1481475 1020768   14.13333   35    6   46.00000   11.73333  74.5%  10.5  460s
 1498757 1032847   15.13333   41    6   46.00000   11.73333  74.5%  10.5  465s
 1516052 1044754   18.43556   40    6   46.00000   11.73333  74.5%  10.6  470s
 1529131 1053744   15.13333   39    6   46.00000   11.73333  74.5%  10.6  475s
 1543689 1063699   31.16970   53   16   46.00000   11.73333  74.5%  10.6  480s
 1559558 1074710   19.60000   41    9   46.00000   11.73333  74.5%  10.6  485s
 1576699 1086375   43.15556   62   24   46.00000   11.73333  74.5%  10.6  490s
 1590558 1095896   39.17614   54   17   46.00000   11.73333  74.5%  10.6  495s
 1603830 1104689   25.62000   47   12   46.00000   11.73333  74.5%  10.6  500s
 1617540 1114099   37.21522   70   14   46.00000   11.73333  74.5%  10.6  505s
 1631836 1124089   35.02222   62   17   46.00000   11.73333  74.5%  10.6  510s
 1645931 1134075   20.57778   45    7   46.00000   11.73333  74.5%  10.6  515s
 1661599 1144959   43.34519   70   11   46.00000   11.73333  74.5%  10.6  520s
 1679230 1157110   42.90000   52   19   46.00000   11.73333  74.5%  10.6  525s
 1695516 1168309   29.88611   50   14   46.00000   11.73333  74.5%  10.6  530s
 1712084 1179569   14.13333   34    6   46.00000   11.73333  74.5%  10.6  535s
 1726948 1189942   21.35000   38   11   46.00000   11.73333  74.5%  10.6  540s
 1744871 1202269   42.53333   82   17   46.00000   11.73333  74.5%  10.6  545s
 1758892 1211891   35.33889   58   16   46.00000   11.73333  74.5%  10.6  550s
 1772141 1220974   25.26667   53    9   46.00000   11.73333  74.5%  10.6  555s
 1788190 1232194   23.30000   49    6   46.00000   11.73333  74.5%  10.6  560s
 1805829 1244550   29.80000   54   12   46.00000   11.73333  74.5%  10.6  565s
 1818429 1253298 infeasible   40        46.00000   11.73333  74.5%  10.6  570s
 1833191 1263461   37.78462   68   10   46.00000   11.73333  74.5%  10.6  575s
 1849159 1274322     cutoff   50        46.00000   11.73333  74.5%  10.6  580s
 1867056 1286672   42.17184   67   15   46.00000   11.73333  74.5%  10.6  585s
 1880604 1295748   27.40000   48   11   46.00000   11.73333  74.5%  10.6  590s
 1894519 1305417   43.90000   63   13   46.00000   11.73333  74.5%  10.6  595s
 1910458 1316519   26.73333   52   11   46.00000   11.73333  74.5%  10.6  600s
 1926076 1327372   34.71667   55   12   46.00000   11.73333  74.5%  10.6  605s
 1940250 1337397   22.26667   41   12   46.00000   11.73333  74.5%  10.6  610s
 1953795 1346620   27.46667   46    6   46.00000   11.73333  74.5%  10.6  615s
 1969419 1357664     cutoff   46        46.00000   11.73333  74.5%  10.6  620s
 1980863 1365623   43.47593   71   17   46.00000   11.73333  74.5%  10.6  625s
 1997354 1377114   35.46667   57   15   46.00000   11.73333  74.5%  10.6  630s
 2014073 1388675   19.68889   46    5   46.00000   11.73333  74.5%  10.6  635s
 2026778 1397229   35.77500   51   17   46.00000   11.80000  74.3%  10.6  640s
 2040755 1406474   38.63611   54   22   46.00000   11.80000  74.3%  10.6  645s
 2052826 1413829   31.93333   53    7   46.00000   11.80000  74.3%  10.6  650s
 2063882 1420913   41.37741   65   19   46.00000   11.84000  74.3%  10.6  655s
 2075551 1428809   26.50000   37   14   46.00000   11.90000  74.1%  10.6  660s
 2090253 1438715   22.66667   42   10   46.00000   11.90000  74.1%  10.6  665s
 2104545 1448671   40.16322   57   13   46.00000   11.90000  74.1%  10.6  670s
 2120455 1459777   44.00000   66   18   46.00000   11.90000  74.1%  10.6  675s
 2136713 1471008   23.05657   43   12   46.00000   11.90000  74.1%  10.6  680s
 2153267 1482338   20.10000   40    9   46.00000   11.90000  74.1%  10.6  685s
 2169755 1493514   16.13333   41    6   46.00000   11.90000  74.1%  10.6  690s
 2186817 1505182   23.63333   46    8   46.00000   11.90000  74.1%  10.6  695s
 2202815 1516053   20.20000   37    7   46.00000   11.90000  74.1%  10.6  700s
 2218661 1527184   23.85000   42   10   46.00000   11.90000  74.1%  10.6  705s
 2241675 1543324   35.40000   52   14   46.00000   11.90000  74.1%  10.6  710s
 2260021 1555759   42.33333   40   25   46.00000   11.96667  74.0%  10.6  715s
 2275553 1565864   30.81905   58    8   46.00000   12.13333  73.6%  10.6  720s
 2291452 1576785   27.77667   48    6   46.00000   12.13333  73.6%  10.6  725s
 2306788 1587472   26.50000   49   10   46.00000   12.13333  73.6%  10.6  730s
 2323794 1599121 infeasible   76        46.00000   12.13333  73.6%  10.6  735s
 2338014 1608335   19.11111   41   10   46.00000   12.13333  73.6%  10.6  740s
 2351361 1617000   42.52778   55   18   46.00000   12.13333  73.6%  10.6  745s
 2364149 1625195     cutoff   59        46.00000   12.13333  73.6%  10.6  750s
 2375744 1632666   39.76667   57   20   46.00000   12.13333  73.6%  10.6  755s
 2388826 1641240   38.43333   61   13   46.00000   12.13333  73.6%  10.6  760s
 2403085 1650476   34.75000   50   22   46.00000   12.13333  73.6%  10.6  765s
 2419091 1660622   34.37222   46   26   46.00000   12.13333  73.6%  10.6  770s
 2433560 1670304   26.60000   43   12   46.00000   12.13333  73.6%  10.6  775s
 2448968 1680122   23.00000   38    8   46.00000   12.13333  73.6%  10.6  780s
 2464300 1690076   18.26667   40   11   46.00000   12.13333  73.6%  10.7  785s
 2476295 1697826   41.42581   66   18   46.00000   12.13333  73.6%  10.7  790s
 2489985 1706568     cutoff   52        46.00000   12.13333  73.6%  10.7  795s
 2503319 1715202   28.00000   47   15   46.00000   12.13333  73.6%  10.7  800s
 2515225 1722953   28.64606   51    9   46.00000   12.13333  73.6%  10.7  805s
 2527239 1730534     cutoff   45        46.00000   12.13333  73.6%  10.7  810s
 2543314 1740726 infeasible   55        46.00000   12.13333  73.6%  10.7  815s
 2558682 1750394   34.28677   49   24   46.00000   12.16000  73.6%  10.7  820s
 2574952 1761698   21.74444   41   13   46.00000   12.20000  73.5%  10.7  825s
 2591403 1773177   43.20000   70   14   46.00000   12.20000  73.5%  10.7  830s
 2610917 1786600   41.76667   70   17   46.00000   12.20000  73.5%  10.7  835s
 2628556 1798770   28.51111   54   12   46.00000   12.20000  73.5%  10.7  840s
 2644238 1809783   16.13333   37    6   46.00000   12.20000  73.5%  10.7  845s
 2656896 1818786   42.27681   53   23   46.00000   12.20000  73.5%  10.7  850s
 2672621 1829888     cutoff   63        46.00000   12.20000  73.5%  10.7  855s
 2691132 1842942   41.42614   68   16   46.00000   12.20000  73.5%  10.7  860s
 2705494 1852886   21.70000   47    8   46.00000   12.20000  73.5%  10.7  865s
 2723342 1865318   44.10000   63   15   46.00000   12.20000  73.5%  10.7  870s
 2741077 1877803   26.62857   51    7   46.00000   12.20000  73.5%  10.7  875s
 2759521 1890520 infeasible   54        46.00000   12.20000  73.5%  10.7  880s
 2774753 1901227 infeasible   80        46.00000   12.20000  73.5%  10.7  885s
 2794041 1914593   16.13333   35    6   46.00000   12.20000  73.5%  10.6  890s
 2809065 1924970   41.11667   58   17   46.00000   12.20000  73.5%  10.6  895s
 2825477 1936087   20.13333   45    6   46.00000   12.20000  73.5%  10.6  900s
 2844280 1949204   14.88000   36    3   46.00000   12.20000  73.5%  10.6  905s
 2860290 1960089   35.86667   59   13   46.00000   12.20000  73.5%  10.6  910s
 2876247 1970841   26.95556   42   12   46.00000   12.20000  73.5%  10.6  915s
 2890958 1980620 infeasible   65        46.00000   12.30000  73.3%  10.6  920s
 2906245 1990466 infeasible   44        46.00000   12.30000  73.3%  10.6  925s
 2918733 1998575   36.19619   65   14   46.00000   12.30000  73.3%  10.6  930s
 2935596 2009713 infeasible   56        46.00000   12.30000  73.3%  10.6  935s
 2952651 2021536   22.21667   48    6   46.00000   12.40000  73.0%  10.6  940s
 2965113 2030317   17.88000   44    3   46.00000   12.40000  73.0%  10.6  945s
 2979808 2040531   27.01111   57    9   46.00000   12.40000  73.0%  10.6  950s
 2996895 2052388   29.96547   60    9   46.00000   12.40000  73.0%  10.6  955s
 3013166 2063667   13.13333   38    3   46.00000   12.40000  73.0%  10.6  960s
 3030852 2075501 infeasible   47        46.00000   12.40000  73.0%  10.6  965s
 3046796 2085978   19.38333   44    6   46.00000   12.40000  73.0%  10.6  970s
 3059174 2093861   35.62500   57    9   46.00000   12.40000  73.0%  10.6  975s
 3077869 2106038     cutoff   38        46.00000   12.40000  73.0%  10.6  980s
 3094795 2117423 infeasible   44        46.00000   12.40000  73.0%  10.6  985s
 3109123 2126899   28.55333   54    6   46.00000   12.40000  73.0%  10.6  990s
 3124216 2136906   20.26667   45   11   46.00000   12.40000  73.0%  10.6  995s
 3141249 2147976   19.24000   39    8   46.00000   12.40000  73.0%  10.6 1000s
 3154637 2156922   41.11111   60   23   46.00000   12.40000  73.0%  10.6 1005s
 3169507 2166776   20.86667   53    7   46.00000   12.40000  73.0%  10.6 1010s
 3182783 2175394   32.20833   46   19   46.00000   12.40000  73.0%  10.6 1015s
 3197894 2185385   14.40000   33    7   46.00000   12.40000  73.0%  10.6 1020s
 3212233 2194819   19.38333   40    7   46.00000   12.40000  73.0%  10.6 1025s
 3227590 2204961   28.03333   51   12   46.00000   12.40000  73.0%  10.6 1030s
 3246620 2217428   41.53846   54   21   46.00000   12.40000  73.0%  10.6 1035s
 3258897 2225544   17.69444   38    8   46.00000   12.40000  73.0%  10.6 1040s
 3273532 2235130   24.72000   52    7   46.00000   12.40000  73.0%  10.6 1045s
 3289740 2245512   21.88000   51    9   46.00000   12.42500  73.0%  10.6 1050s
 3304783 2255394     cutoff   54        46.00000   12.46667  72.9%  10.6 1055s
 3318337 2264690   36.54545   65   17   46.00000   12.46667  72.9%  10.6 1060s
 3332655 2274168   43.40000   73   18   46.00000   12.53333  72.8%  10.6 1065s
 3346014 2282997     cutoff   66        46.00000   12.55000  72.7%  10.6 1070s
 3357107 2290179   18.20000   39    3   46.00000   12.60000  72.6%  10.6 1075s
 3375040 2301926   41.06667   63   15   46.00000   12.60000  72.6%  10.6 1080s
 3391787 2313082   23.63333   46    5   46.00000   12.60000  72.6%  10.6 1085s
 3405983 2322286   38.30000   54   15   46.00000   12.60000  72.6%  10.6 1090s
 3420444 2331501   20.35000   41   11   46.00000   12.60000  72.6%  10.6 1095s
 3435255 2340555   39.39839   60   17   46.00000   12.60000  72.6%  10.6 1100s
 3450056 2349943   43.98384   63   19   46.00000   12.60000  72.6%  10.6 1105s
 3465205 2359245 infeasible   54        46.00000   12.60000  72.6%  10.6 1110s
 3480653 2368787   14.60000   36    4   46.00000   12.60000  72.6%  10.7 1115s
 3495639 2378317   40.20000   37   17   46.00000   12.60000  72.6%  10.7 1120s
 3508292 2386272   25.60000   40   10   46.00000   12.60000  72.6%  10.7 1125s
 3521501 2394253   43.05625   62   18   46.00000   12.60000  72.6%  10.7 1130s
 3535032 2402726   18.66667   35   10   46.00000   12.65000  72.5%  10.7 1135s
 3552659 2414836   43.01667   61   22   46.00000   12.73333  72.3%  10.7 1140s
 3565355 2423313   26.63333   47   10   46.00000   12.73333  72.3%  10.7 1145s
 3581056 2434147   29.04444   53   12   46.00000   12.73333  72.3%  10.7 1150s
 3598436 2446081     cutoff   71        46.00000   12.73333  72.3%  10.7 1155s
 3610848 2454474   28.00000   60   12   46.00000   12.73333  72.3%  10.7 1160s
 3630382 2467822   23.33333   48   11   46.00000   12.73333  72.3%  10.7 1165s
 3649162 2481042 infeasible   59        46.00000   12.73333  72.3%  10.7 1170s
 3663396 2490713   24.98384   44   11   46.00000   12.73333  72.3%  10.7 1175s
 3681305 2502908   37.58511   70   15   46.00000   12.73333  72.3%  10.7 1180s
 3696733 2513611   43.40556   63   20   46.00000   12.73333  72.3%  10.7 1185s
 3710075 2522486   27.46667   64    9   46.00000   12.73333  72.3%  10.7 1190s
 3726136 2533501   23.25556   47    5   46.00000   12.73333  72.3%  10.7 1195s
 3741667 2544054   15.68889   40    5   46.00000   12.73333  72.3%  10.7 1200s
 3759336 2556300   21.60000   42   10   46.00000   12.73333  72.3%  10.7 1205s
 3772538 2565601   24.93333   57    9   46.00000   12.73333  72.3%  10.7 1210s
 3788285 2576500   24.05333   51    5   46.00000   12.73333  72.3%  10.7 1215s
 3804757 2587825   43.97886   76   13   46.00000   12.73333  72.3%  10.7 1220s
 3819303 2597635   27.28889   48   13   46.00000   12.73333  72.3%  10.7 1225s
 3835321 2608762   19.80000   47    8   46.00000   12.73333  72.3%  10.7 1230s
 3852319 2620381   16.79048   40    5   46.00000   12.73333  72.3%  10.7 1235s
 3867577 2631041     cutoff   72        46.00000   12.73333  72.3%  10.7 1240s
 3881814 2640892   32.26667   50   12   46.00000   12.73333  72.3%  10.7 1245s
 3899646 2653072   35.95370   56   28   46.00000   12.73333  72.3%  10.7 1250s
 3915333 2663903     cutoff   64        46.00000   12.73333  72.3%  10.7 1255s
 3931309 2674895 infeasible   72        46.00000   12.73333  72.3%  10.7 1260s
 3945420 2684249   24.43333   50   10   46.00000   12.73333  72.3%  10.7 1265s
 3957056 2692274   23.16000   50    8   46.00000   12.73333  72.3%  10.7 1270s
 3966910 2699094   39.32636   64   19   46.00000   12.73333  72.3%  10.7 1275s
 3983085 2710011   16.73333   40    5   46.00000   12.73333  72.3%  10.7 1280s
 4001078 2722685   18.16667   38    8   46.00000   12.73333  72.3%  10.7 1285s
 4014062 2731684   32.56000   62   13   46.00000   12.73333  72.3%  10.7 1290s
 4028207 2741564   18.13333   42    6   46.00000   12.73333  72.3%  10.7 1295s
 4043853 2752382   19.98384   43   11   46.00000   12.73333  72.3%  10.7 1300s
 4059090 2762978   27.60000   59   10   46.00000   12.73333  72.3%  10.7 1305s
 4076412 2774739   25.33333   49    4   46.00000   12.73333  72.3%  10.7 1310s
 4088298 2782915   14.73333   41    5   46.00000   12.73333  72.3%  10.7 1315s
 4107338 2796154   42.83750   79   16   46.00000   12.73333  72.3%  10.7 1320s
 4121504 2805640   18.60000   40    9   46.00000   12.73333  72.3%  10.7 1325s
 4138954 2817612   26.22963   54    9   46.00000   12.73333  72.3%  10.7 1330s
 4155655 2828968   34.43030   55   18   46.00000   12.73333  72.3%  10.7 1335s
 4173404 2841117     cutoff   81        46.00000   12.73333  72.3%  10.7 1340s
 4184532 2848589 infeasible   55        46.00000   12.73333  72.3%  10.7 1345s
 4200593 2859400     cutoff   56        46.00000   12.73333  72.3%  10.7 1350s
 4213548 2868133   36.10000   57   11   46.00000   12.73333  72.3%  10.7 1355s
 4228001 2878211     cutoff   82        46.00000   12.73333  72.3%  10.7 1360s
 4245913 2890290   14.73333   35    5   46.00000   12.73333  72.3%  10.7 1365s
 4261248 2900424 infeasible   71        46.00000   12.73333  72.3%  10.7 1370s
 4274352 2909387   37.87097   69    9   46.00000   12.73333  72.3%  10.7 1375s
 4292735 2922253   20.35556   40    7   46.00000   12.73333  72.3%  10.7 1380s
 4308060 2932819   33.20000   49   19   46.00000   12.73333  72.3%  10.7 1385s
 4325641 2945024   18.53333   40    6   46.00000   12.73333  72.3%  10.7 1390s
 4343465 2957114   32.68889   58    9   46.00000   12.73333  72.3%  10.7 1395s
 4357205 2966550   21.42222   43    5   46.00000   12.73333  72.3%  10.7 1400s
 4374743 2978392   33.50000   55   13   46.00000   12.73333  72.3%  10.7 1405s
 4390651 2989441   20.60000   44    9   46.00000   12.73333  72.3%  10.7 1410s
 4405016 2999531     cutoff   53        46.00000   12.73333  72.3%  10.7 1415s
 4420490 3009816     cutoff   61        46.00000   12.73333  72.3%  10.7 1420s
 4437027 3021048   37.95278   59   20   46.00000   12.73333  72.3%  10.7 1425s
 4449569 3029559   18.60000   43   10   46.00000   12.73333  72.3%  10.7 1430s
 4466296 3041015   30.10417   58   13   46.00000   12.73333  72.3%  10.7 1435s
 4482837 3052313   43.19167   58   15   46.00000   12.73333  72.3%  10.7 1440s
 4496950 3061954 infeasible   64        46.00000   12.73333  72.3%  10.7 1445s
 4511592 3071909   18.85833   47    8   46.00000   12.73333  72.3%  10.7 1450s
 4526571 3082287   33.24848   58   15   46.00000   12.73333  72.3%  10.7 1455s
 4540718 3092176   23.46667   49   11   46.00000   12.73333  72.3%  10.7 1460s
 4552667 3100370   25.52667   60    7   46.00000   12.73333  72.3%  10.7 1465s
 4571467 3113228 infeasible   67        46.00000   12.73333  72.3%  10.7 1470s
 4587724 3124215   33.97391   66   10   46.00000   12.73333  72.3%  10.7 1475s
 4600442 3132905   21.60000   45   11   46.00000   12.73333  72.3%  10.7 1480s
 4617653 3144410   19.60000   41    9   46.00000   12.73333  72.3%  10.7 1485s
 4630277 3153024   35.71111   70   12   46.00000   12.73333  72.3%  10.7 1490s
 4644645 3162963   43.18333   58   27   46.00000   12.73333  72.3%  10.7 1495s
 4660703 3173860   35.50000   58   20   46.00000   12.73333  72.3%  10.7 1500s
 4676121 3184572   27.16667   43   14   46.00000   12.73333  72.3%  10.7 1505s
 4691078 3194600   21.72381   42    9   46.00000   12.73333  72.3%  10.7 1510s
 4704423 3203682   42.60606   77   15   46.00000   12.73333  72.3%  10.7 1515s
 4720113 3214500   33.30000   55   14   46.00000   12.73333  72.3%  10.7 1520s
 4737623 3226381   21.26667   42   11   46.00000   12.73333  72.3%  10.7 1525s
 4751909 3236266   42.07480   63   21   46.00000   12.73333  72.3%  10.7 1530s
 4769146 3247952   24.51852   44   10   46.00000   12.73333  72.3%  10.7 1535s
 4782857 3257261   27.18333   50   20   46.00000   12.73333  72.3%  10.7 1540s
 4797978 3267783   26.25926   52    9   46.00000   12.73333  72.3%  10.7 1545s
 4813464 3278422   40.96190   74   18   46.00000   12.73333  72.3%  10.7 1550s
 4829079 3288874   16.13333   39    6   46.00000   12.73333  72.3%  10.7 1555s
 4843910 3299030   43.26667   73   18   46.00000   12.73333  72.3%  10.7 1560s
 4859446 3309626   14.73333   38    4   46.00000   12.73333  72.3%  10.7 1565s
 4871583 3317862   34.52762   49   15   46.00000   12.73333  72.3%  10.7 1570s
 4887650 3329056   16.80000   38    8   46.00000   12.73333  72.3%  10.7 1575s
 4903521 3340045   12.73333   35    5   46.00000   12.73333  72.3%  10.7 1580s
 4918639 3350826   40.75000   54   18   46.00000   12.73333  72.3%  10.7 1585s
 4933158 3360259   39.40567   52   17   46.00000   12.73333  72.3%  10.7 1590s
 4948272 3370469 infeasible   64        46.00000   12.73333  72.3%  10.7 1595s
 4963058 3380602 infeasible   70        46.00000   12.73333  72.3%  10.7 1600s
 4977424 3390360   35.60000   68   20   46.00000   12.73333  72.3%  10.7 1605s
 4990099 3398964   12.73333   31    5   46.00000   12.73333  72.3%  10.7 1610s
 5003966 3408543   38.45000   58    6   46.00000   12.73333  72.3%  10.7 1615s
 5018033 3418051   37.08889   56   16   46.00000   12.73333  72.3%  10.7 1620s
 5032293 3427951   27.73333   57    8   46.00000   12.73333  72.3%  10.7 1625s
 5049060 3439485   43.96429   59   13   46.00000   12.73333  72.3%  10.7 1630s
 5061570 3447903   33.00819   58   12   46.00000   12.73333  72.3%  10.7 1635s
 5073357 3455998     cutoff   63        46.00000   12.73333  72.3%  10.7 1640s
 5085013 3463846     cutoff   59        46.00000   12.73333  72.3%  10.7 1645s
 5098395 3473070   40.22500   78   11   46.00000   12.73333  72.3%  10.7 1650s
 5113865 3483349   40.60476   61   21   46.00000   12.76667  72.2%  10.7 1655s
 5127492 3492092   39.83333   67   23   46.00000   12.80000  72.2%  10.7 1660s
 5142490 3502329   26.45833   56    8   46.00000   12.80000  72.2%  10.7 1665s
 5155019 3510410   41.25833   60   15   46.00000   12.80000  72.2%  10.7 1670s
 5165558 3517027     cutoff   49        46.00000   12.80000  72.2%  10.7 1675s
 5180690 3526515   20.46667   42    5   46.00000   12.80000  72.2%  10.7 1680s
 5195164 3535704   33.30000   51   15   46.00000   12.80000  72.2%  10.7 1685s
 5210033 3545118   37.99365   50   21   46.00000   12.80000  72.2%  10.7 1690s
 5226206 3555582   14.80000   36    7   46.00000   12.80000  72.2%  10.7 1695s
 5243084 3566148   26.85333   53    8   46.00000   12.80000  72.2%  10.7 1700s
 5256119 3574544   32.36000   56    7   46.00000   12.80000  72.2%  10.7 1705s
 5271494 3584285   15.68333   39    3   46.00000   12.84000  72.1%  10.7 1710s
 5283001 3591878   33.32475   53   18   46.00000   12.86667  72.0%  10.7 1715s
 5293758 3599138   32.86667   60   10   46.00000   12.86667  72.0%  10.7 1720s
 5310247 3609970   37.80000   71   13   46.00000   12.90000  72.0%  10.7 1725s
 5328467 3622458 infeasible   59        46.00000   12.90000  72.0%  10.7 1730s
 5342421 3632020   27.06667   46   10   46.00000   12.90000  72.0%  10.7 1735s
 5356806 3641902   13.60000   31    2   46.00000   12.90000  72.0%  10.7 1740s
 5372253 3652695 infeasible   62        46.00000   12.90000  72.0%  10.7 1745s
 5390216 3665134   28.60000   59    9   46.00000   12.90000  72.0%  10.7 1750s
 5405712 3675822   19.20000   38    7   46.00000   12.90000  72.0%  10.7 1755s
 5423909 3688405 infeasible   44        46.00000   12.90000  72.0%  10.7 1760s
 5440368 3699594   42.03143   53   19   46.00000   12.90000  72.0%  10.7 1765s
 5458228 3711683   39.00000   60   10   46.00000   12.90000  72.0%  10.6 1770s
 5472684 3721638   15.13333   38    6   46.00000   12.90000  72.0%  10.6 1775s
 5491059 3734371   29.24444   52   11   46.00000   12.90000  72.0%  10.6 1780s
 5508578 3746155   13.30000   32    3   46.00000   12.90000  72.0%  10.6 1785s
 5523533 3756545   44.03333   64   23   46.00000   12.90000  72.0%  10.6 1790s
 5539614 3767516   31.86667   58   10   46.00000   12.90000  72.0%  10.6 1795s
 5553595 3777110   31.23333   56   15   46.00000   12.90000  72.0%  10.6 1800s

Explored 5554513 nodes (59031614 simplex iterations) in 1800.02 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 46 47 48 ... 162

Time limit reached
Best objective 4.600000000000e+01, best bound 1.300000000000e+01, gap 71.7391%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    486.8 MiB    486.8 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    486.8 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    486.9 MiB      0.1 MiB       m2 = m.construct()
    28    486.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    486.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    486.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    486.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    486.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    486.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    486.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    486.9 MiB      0.0 MiB       m2.update()
    44    486.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    486.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    486.9 MiB      0.0 MiB       if(set_binary):
    51    486.9 MiB      0.0 MiB           for x in set_binary:
    52    486.9 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    486.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   4436.0 MiB   3949.1 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   4436.0 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   4436.0 MiB      0.0 MiB       j = 0
    69   4436.0 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   4436.0 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   4436.0 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   4436.0 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   4436.0 MiB      0.0 MiB       if m2.status == 9:
    78   4436.0 MiB      0.0 MiB           result.timeout = True
    79   4436.0 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   4436.0 MiB      0.0 MiB           result.solution = True
    81   4436.0 MiB      0.0 MiB           result.feasible = True
    82   4436.0 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   4436.0 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   4436.0 MiB      0.0 MiB           for v in current_vars:
    85   4436.0 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   4436.0 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   4436.0 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   4436.0 MiB      0.0 MiB                   j = j+1
    91                             
    92   4436.0 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 19:22:39 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.tra,lab' -mdp /tmp/tmpq7admzwp

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.30000000000000004.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpq7admzwp"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.023 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      48 (1 initial)
Transitions: 103
Choices:     92

Transition matrix: 192 nodes (3 terminal), 103 minterms, vars: 6r/6c/2nd

Prob0A: 37 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 237 iterations in 0.00 seconds (average 0.000017, setup 0.00)

yes = 5, no = 1, maybe = 42

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=6, nodes=201] [9.4 KB]
Adding sparse bits... [levels=6-6, num=2, compact=2/2] [0.5 KB]
Creating vector for yes... [dist=2, compact] [0.1 KB]
Allocating iteration vectors... [3 x 0.4 KB]
TOTAL: [11.1 KB]

Starting iterations...

Iterative method: 1617 iterations in 0.00 seconds (average 0.000002, setup 0.00)

Value in the initial state: 0.3333333293433865

Time for model checking: 0.013 seconds.

Result: 0.3333333293433865 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [4e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   4.000000e-01   0.000000e+00      0s
     560    7.4800000e+01   0.000000e+00   0.000000e+00      0s

Solved in 560 iterations and 0.03 seconds
Optimal objective  7.480000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1749.7 MiB   1749.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1749.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1749.7 MiB      0.0 MiB       m2 = m.construct()
    28   1749.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1749.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1749.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1749.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1749.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1749.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1749.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1749.7 MiB      0.0 MiB       m2.update()
    44   1749.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1749.7 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1749.7 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1749.7 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1749.7 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1749.7 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1749.7 MiB      0.0 MiB       j = 0
    69   1749.7 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1749.7 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1749.7 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1749.7 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1749.7 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1749.7 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1749.7 MiB      0.0 MiB           result.solution = True
    81   1749.7 MiB      0.0 MiB           result.feasible = True
    82   1749.7 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1749.7 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1749.7 MiB      0.0 MiB           for v in current_vars:
    85   1749.7 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1749.7 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1749.7 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1749.7 MiB      0.0 MiB                   j = j+1
    91                             
    92   1749.7 MiB      0.0 MiB       return result, res_vec



subsystem size:204

probability: 0.4
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 19:22:41 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.tra,lab' -mdp /tmp/tmplg5fbqbn

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmplg5fbqbn"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 79 iterations in 0.00 seconds (average 0.000051, setup 0.00)

Time for model construction: 0.037 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      205 (1 initial)
Transitions: 255
Choices:     206

Transition matrix: 550 nodes (3 terminal), 255 minterms, vars: 8r/8c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 389 iterations in 0.02 seconds (average 0.000062, setup 0.00)

yes = 76, no = 1, maybe = 128

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=470] [22.0 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [1.1 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.6 KB]
TOTAL: [28.3 KB]

Starting iterations...

Iterative method: 1297 iterations in 0.00 seconds (average 0.000003, setup 0.00)

Value in the initial state: 0.486453191454034

Time for model checking: 0.036 seconds.

Result: 0.486453191454034 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [4e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   4.000000e-01   0.000000e+00      0s
     560    7.4800000e+01   0.000000e+00   0.000000e+00      0s

Solved in 560 iterations and 0.03 seconds
Optimal objective  7.480000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1749.7 MiB   1749.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1749.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1749.7 MiB      0.0 MiB       m2 = m.construct()
    28   1749.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1749.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1749.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1749.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1749.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1749.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1749.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1749.7 MiB      0.0 MiB       m2.update()
    44   1749.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1749.7 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1749.7 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1749.7 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1749.7 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1749.7 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1749.7 MiB      0.0 MiB       j = 0
    69   1749.7 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1749.7 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1749.7 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1749.7 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1749.7 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1749.7 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1749.7 MiB      0.0 MiB           result.solution = True
    81   1749.7 MiB      0.0 MiB           result.feasible = True
    82   1749.7 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1749.7 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1749.7 MiB      0.0 MiB           for v in current_vars:
    85   1749.7 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1749.7 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1749.7 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1749.7 MiB      0.0 MiB                   j = j+1
    91                             
    92   1749.7 MiB      0.0 MiB       return result, res_vec



subsystem size:204

probability: 0.4
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [4e-01, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [4e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   4.000000e-01   0.000000e+00      0s
     140    1.4325762e+02   0.000000e+00   0.000000e+00      0s

Solved in 140 iterations and 0.01 seconds
Optimal objective  1.432576171e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1749.7 MiB   1749.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1749.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1749.7 MiB      0.0 MiB       m2 = m.construct()
    28   1749.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1749.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1749.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1749.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1749.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1749.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1749.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1749.7 MiB      0.0 MiB       m2.update()
    44   1749.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1749.7 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1749.7 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1749.7 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1749.7 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1749.7 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1749.7 MiB      0.0 MiB       j = 0
    69   1749.7 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1749.7 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1749.7 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1749.7 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1749.7 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1749.7 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1749.7 MiB      0.0 MiB           result.solution = True
    81   1749.7 MiB      0.0 MiB           result.feasible = True
    82   1749.7 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1749.7 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1749.7 MiB      0.0 MiB           for v in current_vars:
    85   1749.7 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1749.7 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1749.7 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1749.7 MiB      0.0 MiB                   j = j+1
    91                             
    92   1749.7 MiB      0.0 MiB       return result, res_vec



subsystem size:138

probability: 0.4
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 19:22:43 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.tra,lab' -mdp /tmp/tmp185dxnt3

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp185dxnt3"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 38 iterations in 0.00 seconds (average 0.000105, setup 0.00)

Time for model construction: 0.03 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      140 (1 initial)
Transitions: 173
Choices:     140

Transition matrix: 375 nodes (3 terminal), 173 minterms, vars: 8r/8c/1nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 274 iterations in 0.01 seconds (average 0.000044, setup 0.00)

yes = 12, no = 1, maybe = 127

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=8, nodes=361] [16.9 KB]
Adding sparse bits... [levels=8-8, num=1, compact=1/1] [0.8 KB]
Creating vector for yes... [dist=2, compact] [0.3 KB]
Allocating iteration vectors... [3 x 1.1 KB]
TOTAL: [21.3 KB]

Starting iterations...

Iterative method: 1237 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 0.4166666586593216

Time for model checking: 0.019 seconds.

Result: 0.4166666586593216 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 287 rows and 572 columns
Presolve time: 0.00s
Presolved: 242 rows, 484 columns, 1076 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -8.0800000e+32   1.800000e+32   8.080000e+02      0s
     517   -2.4400000e+02   0.000000e+00   0.000000e+00      0s

Solved in 517 iterations and 0.01 seconds
Optimal objective -2.440000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1749.7 MiB   1749.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1749.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1749.7 MiB      0.0 MiB       m2 = m.construct()
    28   1749.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1749.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1749.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1749.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1749.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1749.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1749.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1749.7 MiB      0.0 MiB       m2.update()
    44   1749.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1749.7 MiB      0.0 MiB       if(zero_vars):
    47   1749.7 MiB      0.0 MiB           for x in zero_vars:
    48   1749.7 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1749.7 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1749.7 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1749.7 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1749.7 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1749.7 MiB      0.0 MiB       j = 0
    69   1749.7 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1749.7 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1749.7 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1749.7 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1749.7 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1749.7 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1749.7 MiB      0.0 MiB           result.solution = True
    81   1749.7 MiB      0.0 MiB           result.feasible = True
    82   1749.7 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1749.7 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1749.7 MiB      0.0 MiB           for v in current_vars:
    85   1749.7 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1749.7 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1749.7 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1749.7 MiB      0.0 MiB                   j = j+1
    91                             
    92   1749.7 MiB      0.0 MiB       return result, res_vec


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 2112 columns and 3868 nonzeros
Variable types: 1056 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 2e+02]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [4e-01, 1e+00]
Presolve removed 428 rows and 700 columns
Presolve time: 0.01s
Presolved: 1157 rows, 1412 columns, 3016 nonzeros
Variable types: 704 continuous, 708 integer (708 binary)

Root relaxation: objective 3.303197e+00, 1385 iterations, 0.11 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.30320    0  209          -    3.30320      -     -    0s
H    0     0                     247.0000000    3.30320  98.7%     -    0s
     0     2    3.30320    0  209  247.00000    3.30320  98.7%     -    1s
H    2     4                     202.0000000    3.34475  98.3%   136    2s
H    3     8                     162.0000000    3.39580  97.9%   149    3s
H    4     8                     131.0000000    3.40579  97.4%   143    3s
H   12    16                     121.0000000    3.61803  97.0%   106    3s
H   17    32                     113.0000000    4.00656  96.5%   144    4s
H   33    48                     112.0000000    4.01148  96.4%   141    4s
    47    64    4.64918    5  128  112.00000    4.14918  96.3%   136    5s
H   49    64                     109.0000000    4.14918  96.2%   136    5s
H   50    64                      93.0000000    4.14918  95.5%   133    5s
H   66    67                      92.0000000    4.51148  95.1%   109    5s
H   70    70                      89.0000000    4.51148  94.9%   103    5s
H   78    77                      85.0000000    4.51148  94.7%  99.2    5s
H   87    88                      64.0000000    4.51148  93.0%  97.5    5s
H  143   140                      58.0000000    4.51148  92.2%  73.5    5s
H  379   354                      55.0000000    4.51148  91.8%  52.4    6s
  1404  1206 infeasible   73        55.00000    4.51148  91.8%  34.5   10s
  3225  2597   20.66380   42  209   55.00000    4.51148  91.8%  29.4   15s
  3231  2606    4.51148   17  139   55.00000    4.51148  91.8%  29.9   20s
  3646  2873    5.64132   32  130   55.00000    4.51148  91.8%  31.3   26s
  5688  4039   24.61937   84  125   55.00000    4.51148  91.8%  30.8   30s
  7588  4862   49.42588  148   76   55.00000    4.51148  91.8%  34.1   35s
 11451  6713   51.15255  111   84   55.00000    4.51148  91.8%  33.5   40s
 16733 10868    6.11982   31  121   55.00000    4.51148  91.8%  31.2   45s
 20287 13904   50.21998  117   85   55.00000    4.60458  91.6%  29.9   50s
 24336 17021   36.17963   87   81   55.00000    4.98525  90.9%  29.8   55s
 28866 20432   39.22210  107  100   55.00000    5.15805  90.6%  29.6   60s
 32379 23242   17.83890   50   45   55.00000    5.25853  90.4%  29.5   65s
 35883 25891   28.24569   67   61   55.00000    5.31170  90.3%  29.7   70s
 40551 29425    8.45082   37   67   55.00000    5.48525  90.0%  29.4   75s
 45378 33084   34.12620   84   86   55.00000    5.48525  90.0%  29.4   81s
 48432 35380   13.48389   42   69   55.00000    5.51148  90.0%  29.6   86s
 50190 36696 infeasible  120        55.00000    5.64126  89.7%  29.5   90s
 55308 40593   47.13626  106   49   55.00000    5.64126  89.7%  29.6   95s
 60266 44388   39.27684   92   55   55.00000    5.91608  89.2%  29.6  100s
 64395 47336   36.49207   79   70   55.00000    5.98750  89.1%  29.6  106s
 69309 51016 infeasible   38        55.00000    5.99569  89.1%  29.6  111s
 72829 53680   40.34999   74   77   55.00000    6.02192  89.1%  29.6  115s
 78085 57600   32.28029   59   40   55.00000    6.07004  89.0%  29.7  120s
 83869 61906   48.64797   81   80   55.00000    6.12979  88.9%  29.4  125s
 88573 65417   38.37231   92   87   55.00000    6.16094  88.8%  29.4  131s
 92749 68577   28.35180   55   73   55.00000    6.20390  88.7%  29.7  136s
 97563 72222   10.13685   41  110   55.00000    6.25756  88.6%  29.9  141s
 102086 75493     cutoff  128        55.00000    6.25840  88.6%  30.2  146s
 105643 78128    9.82089   39  133   55.00000    6.32006  88.5%  30.2  150s
 111624 82647   41.71374   94   79   55.00000    6.44751  88.3%  29.9  155s
 118043 87457   12.36885   49   74   55.00000    6.48525  88.2%  29.8  161s
 123371 91337   42.34693   79   83   55.00000    6.49057  88.2%  29.7  165s
 127825 94469    7.74914   40  182   55.00000    6.51148  88.2%  29.8  170s
 132088 97578   42.09155   87   70   55.00000    6.51853  88.1%  29.9  176s
 137010 100993   42.48778   93  110   55.00000    6.57672  88.0%  30.0  181s
 141811 104549    9.43279   32   70   55.00000    6.59376  88.0%  30.0  186s
 146845 108265   37.21885   73   75   55.00000    6.61465  88.0%  30.0  191s
 150353 110861   42.14608   96  132   55.00000    6.61465  88.0%  30.0  195s
 155178 114465   13.82089   48  137   55.00000    6.62979  87.9%  30.1  200s
 159306 117603   48.76391  105   76   55.00000    6.62979  87.9%  30.0  205s
 165223 122017 infeasible   46        55.00000    6.62979  87.9%  29.8  210s
 170274 125723   20.81823   48  108   55.00000    6.64823  87.9%  29.7  216s
 175482 129647     cutoff  106        55.00000    6.66340  87.9%  29.7  220s
 179582 132608 infeasible   62        55.00000    6.67907  87.9%  29.8  225s
 183621 135494    7.01480   25   97   55.00000    6.70948  87.8%  29.9  230s
 187622 138502    7.31205   38  127   55.00000    6.74095  87.7%  29.9  236s
 192048 141751   52.13935  116   55   55.00000    6.74100  87.7%  30.0  241s
 194672 143652   46.11593  105   81   55.00000    6.74677  87.7%  30.1  245s
 199757 147172   53.19407  115   80   55.00000    6.79940  87.6%  30.2  250s
 204765 150611    7.28750   31  158   55.00000    6.82089  87.6%  30.4  256s
 208044 152963   14.04360   49  129   55.00000    6.84266  87.6%  30.4  260s
 213188 156497   43.90715   95   74   55.00000    6.86679  87.5%  30.5  266s
 216500 159042   16.96970   47   68   55.00000    6.91941  87.4%  30.5  270s
 221873 163141   41.16905   89   43   55.00000    6.94979  87.4%  30.5  275s
 225699 165926   24.11499   69   99   55.00000    6.95241  87.4%  30.4  281s
 229313 168526   18.29285   43   56   55.00000    6.95489  87.4%  30.4  285s
 234361 172241   29.76759   64   99   55.00000    6.96328  87.3%  30.5  290s
 239613 176096   24.80319   60  108   55.00000    6.96579  87.3%  30.5  296s
 243187 178815   34.07959   83   94   55.00000    6.96579  87.3%  30.5  300s
 248069 182277   40.31374   89  119   55.00000    6.96579  87.3%  30.5  305s
 251599 184911   48.70964  101   95   55.00000    6.96690  87.3%  30.5  310s
 257532 189233   10.49523   39  130   55.00000    6.97779  87.3%  30.4  316s
 262863 193038   11.99324   50  107   55.00000    6.98258  87.3%  30.3  320s
 267869 196758   41.23285   76   50   55.00000    6.99054  87.3%  30.3  325s
 272922 200443   19.50335   50   78   55.00000    6.99569  87.3%  30.3  330s
 278131 204255    8.56145   35  144   55.00000    6.99979  87.3%  30.2  335s
 282149 207153   40.84626   83   80   55.00000    7.02192  87.2%  30.2  341s
 285765 209795   40.34624   79   68   55.00000    7.02192  87.2%  30.2  346s
 290667 213336   37.18647   58   44   55.00000    7.06656  87.2%  30.2  350s
 295892 217362   51.18353  112   71   55.00000    7.08258  87.1%  30.1  356s
 300249 220683    8.09135   32  138   55.00000    7.08689  87.1%  30.1  361s
 305554 224692   52.61961  107   79   55.00000    7.10202  87.1%  30.1  366s
 311006 228641   49.62752  109   98   55.00000    7.11504  87.1%  30.1  371s
 315153 231560   32.67915   65   72   55.00000    7.11873  87.1%  30.2  376s
 319043 234431   45.85130  105   87   55.00000    7.11873  87.1%  30.1  381s
 322982 237347   27.68059   66   77   55.00000    7.11978  87.1%  30.0  386s
 328541 241560   29.75206   72  112   55.00000    7.12980  87.0%  30.0  390s
 334028 245722   20.95890   52   90   55.00000    7.13553  87.0%  29.9  396s
 339393 249732 infeasible  100        55.00000    7.14659  87.0%  29.8  400s
 344183 253292   52.33545  125   80   55.00000    7.15046  87.0%  29.8  405s
 348962 256849   39.27089   77   55   55.00000    7.15576  87.0%  29.7  410s
 352471 259433   49.25520  107   57   55.00000    7.15576  87.0%  29.7  415s
 357562 263133   51.16290  100   72   55.00000    7.16751  87.0%  29.6  420s
 362383 266627   16.01326   50  106   55.00000    7.16751  87.0%  29.6  425s
 366977 269922   38.30204   81   67   55.00000    7.16905  87.0%  29.7  430s
 371185 272837   19.98654   61   92   55.00000    7.17220  87.0%  29.7  435s
 377356 277177   45.24586  100   50   55.00000    7.18789  86.9%  29.8  441s
 381096 279807   35.83355   81   82   55.00000    7.19237  86.9%  29.8  445s
 384478 282229   32.74953   63   84   55.00000    7.20311  86.9%  29.8  450s
 389095 285540   53.17274   95   83   55.00000    7.21788  86.9%  29.9  455s
 395663 290294   34.82129   72   98   55.00000    7.22055  86.9%  29.9  461s
 399954 293269   42.47267   86   59   55.00000    7.23374  86.8%  30.0  467s
 402055 294711   53.42628  101  103   55.00000    7.24023  86.8%  30.0  470s
 405176 296813   19.13790   55  140   55.00000    7.24365  86.8%  30.1  477s
 407007 298173   52.50389   99  220   55.00000    7.24631  86.8%  30.1  480s
 410418 300595   39.58702   85   88   55.00000    7.25105  86.8%  30.1  485s
 413583 302855   47.40245   91   94   55.00000    7.25715  86.8%  30.2  490s
 415528 304289   29.99740   57  112   55.00000    7.26023  86.8%  30.2  496s
 419785 307446   22.00803   62   96   55.00000    7.27862  86.8%  30.2  501s
 423274 309963   11.61080   47  128   55.00000    7.27934  86.8%  30.2  505s
 428725 314100   52.10821  118   50   55.00000    7.27934  86.8%  30.1  511s
 432324 316618   40.98583  103   91   55.00000    7.29145  86.7%  30.2  515s
 437239 320039   29.95126   64   91   55.00000    7.30197  86.7%  30.2  520s
 441941 323411    8.29555   40  125   55.00000    7.32132  86.7%  30.2  525s
 445705 326180   27.23792   77   83   55.00000    7.32973  86.7%  30.2  531s
 448786 328355    9.66566   41  121   55.00000    7.33602  86.7%  30.2  535s
 453588 331720   19.40894   52   62   55.00000    7.40694  86.5%  30.2  540s
 457963 334834   43.73483   93   98   55.00000    7.42831  86.5%  30.3  546s
 463398 338644    9.90735   40  121   55.00000    7.44344  86.5%  30.3  551s
 466993 341406   10.07736   49  139   55.00000    7.44595  86.5%  30.3  555s
 472798 345894   50.19081   98   93   55.00000    7.45246  86.5%  30.3  561s
 476254 348482   43.35659  100   85   55.00000    7.45381  86.4%  30.3  565s
 479650 350897   41.97405   98   74   55.00000    7.45871  86.4%  30.2  570s
 484760 354564   30.11896   85   74   55.00000    7.46230  86.4%  30.2  575s
 489961 358367   18.42032   60   99   55.00000    7.46393  86.4%  30.2  580s
 496276 362924   45.17278   99   56   55.00000    7.46762  86.4%  30.2  585s
 500996 366177   32.28688   90   65   55.00000    7.46820  86.4%  30.3  590s
 506177 369857   42.32991   84   89   55.00000    7.47049  86.4%  30.2  595s
 509951 372641    9.85756   36  164   55.00000    7.47213  86.4%  30.2  600s
 514851 376218   19.17988   65  162   55.00000    7.47377  86.4%  30.2  606s
 519771 379717   24.23562   60   34   55.00000    7.47459  86.4%  30.2  611s
 524833 383344   31.64547   77   99   55.00000    7.47705  86.4%  30.2  616s
 528755 386351   27.19874   57   31   55.00000    7.48115  86.4%  30.2  620s
 535587 391147   44.49011   90  108   55.00000    7.48525  86.4%  30.2  627s
 538619 393359   50.15757  102   87   55.00000    7.48525  86.4%  30.2  631s
 542222 396043   28.28492   59   64   55.00000    7.48852  86.4%  30.2  636s
 547284 399591   45.29648   89   44   55.00000    7.49221  86.4%  30.2  641s
 553041 403995   51.11669  103   59   55.00000    7.49590  86.4%  30.1  646s
 556613 406582    8.64403   38  141   55.00000    7.49590  86.4%  30.1  650s
 562770 410864   16.36230   43   71   55.00000    7.50164  86.4%  30.1  656s
 567106 413770   25.28883   46   98   55.00000    7.50988  86.3%  30.1  661s
 570234 415987   38.25845   68   51   55.00000    7.50988  86.3%  30.1  665s
 573495 418237 infeasible  107        55.00000    7.50988  86.3%  30.2  670s
 577832 421268   43.13770  101   66   55.00000    7.52040  86.3%  30.2  676s
 581257 423671   48.19754   77   62   55.00000    7.52206  86.3%  30.2  680s
 586358 427247 infeasible  102        55.00000    7.52206  86.3%  30.2  685s
 591585 431005   49.28747   97   74   55.00000    7.55257  86.3%  30.3  691s
 594866 433392   12.07531   36  117   55.00000    7.55914  86.3%  30.3  695s
 600015 437144 infeasible  103        55.00000    7.56526  86.2%  30.3  701s
 602785 439015   16.21651   54  118   55.00000    7.56996  86.2%  30.3  706s
 606682 441842   15.71645   43  116   55.00000    7.57454  86.2%  30.3  710s
 610343 444527   28.37022   52   84   55.00000    7.57632  86.2%  30.3  715s
 615523 448284   43.21697   82   79   55.00000    7.57867  86.2%  30.3  721s
 618797 450724   52.12935  115   69   55.00000    7.57978  86.2%  30.3  726s
 622253 453222   37.18921   83   74   55.00000    7.58449  86.2%  30.3  731s
 626239 456186   20.44196   52  114   55.00000    7.58891  86.2%  30.3  735s
 630551 459261   10.93926   45  119   55.00000    7.59052  86.2%  30.3  742s
 632380 460520   31.10084   76  107   55.00000    7.59052  86.2%  30.3  746s
 635689 462844   24.94718   60   97   55.00000    7.59208  86.2%  30.3  751s
 639384 465539   26.32497   69   68   55.00000    7.59208  86.2%  30.3  755s
 642514 467842   52.70739  120   91   55.00000    7.59208  86.2%  30.3  760s
 647885 471713   16.48714   55  110   55.00000    7.59599  86.2%  30.3  766s
 651583 474456    7.68954   36  146   55.00000    7.60107  86.2%  30.3  770s
 656054 477671   44.65603   84  109   55.00000    7.60130  86.2%  30.3  776s
 659721 480367   26.31795   55   64   55.00000    7.60263  86.2%  30.3  780s
 664473 483820   28.00471   59   91   55.00000    7.60520  86.2%  30.3  786s
 666245 485135   46.69692   89   81   55.00000    7.60520  86.2%  30.3  790s
 671613 489053   37.14874   74   31   55.00000    7.60917  86.2%  30.3  795s
 676545 492685   53.13472  110   70   55.00000    7.61372  86.2%  30.3  800s
 681291 496194    7.64659   32  107   55.00000    7.61504  86.2%  30.3  805s
 685431 499309   49.39251   98   70   55.00000    7.61504  86.2%  30.2  810s
 692710 504802   49.22990   90   87   55.00000    7.61667  86.2%  30.2  815s
 699569 509966   48.24065   92   57   55.00000    7.61949  86.1%  30.1  820s
 703134 512626   32.35016   62   60   55.00000    7.62159  86.1%  30.1  825s
 710119 517748   45.92918  103   83   55.00000    7.62200  86.1%  30.1  830s
 715236 521372   27.39618   62   70   55.00000    7.62569  86.1%  30.0  835s
 721238 525646   36.75835   68   91   55.00000    7.62706  86.1%  30.1  840s
 727711 530343 infeasible   86        55.00000    7.62792  86.1%  30.0  846s
 731373 533184   15.77425   46  127   55.00000    7.62897  86.1%  30.0  850s
 735512 536150   42.66139   74   77   55.00000    7.62979  86.1%  30.0  855s
 742746 541490   16.98937   54  105   55.00000    7.63143  86.1%  30.0  860s
 748509 546158   10.89629   47  165   55.00000    7.63327  86.1%  29.9  865s
 754071 550115   18.47651   61   64   55.00000    7.63731  86.1%  29.9  870s
 760843 555270 infeasible  113        55.00000    7.64126  86.1%  29.9  875s
 767262 559954   31.60099   92  104   55.00000    7.64126  86.1%  29.9  880s
 774077 564966   51.18932  106   89   55.00000    7.64126  86.1%  29.8  886s
 776183 566588   52.20542  101   77   55.00000    7.64639  86.1%  29.8  890s
 780450 569726     cutoff  109        55.00000    7.64823  86.1%  29.8  895s
 784729 572928   39.64052   82   98   55.00000    7.64823  86.1%  29.8  900s
 789824 576620 infeasible   93        55.00000    7.65080  86.1%  29.8  905s
 795326 580761   15.01504   45   82   55.00000    7.65799  86.1%  29.8  911s
 800194 584318   46.13642  108   43   55.00000    7.65930  86.1%  29.8  916s
 804438 587386   38.59899   82   60   55.00000    7.66107  86.1%  29.8  921s
 807950 589967   48.16872  110   97   55.00000    7.66188  86.1%  29.8  927s
 811234 592383 infeasible   78        55.00000    7.66188  86.1%  29.8  930s
 814278 594573   52.76220  106   78   55.00000    7.66188  86.1%  29.8  935s
 819275 598143   50.68853  108   70   55.00000    7.67577  86.0%  29.9  940s
 824239 601728   37.18746   78   71   55.00000    7.68984  86.0%  29.9  946s
 827350 603965   41.23558   90   75   55.00000    7.68993  86.0%  29.9  950s
 833798 608596   45.17252   92   84   55.00000    7.70015  86.0%  29.9  956s
 836988 610660 infeasible   45        55.00000    7.70015  86.0%  30.0  960s
 841323 613816   13.40265   41  113   55.00000    7.72273  86.0%  30.0  965s
 846506 617557   49.16978  100   91   55.00000    7.72900  85.9%  30.0  970s
 851672 621236   27.93026   72   90   55.00000    7.73530  85.9%  30.0  975s
 856904 624968   38.16659   77   69   55.00000    7.74100  85.9%  30.0  980s
 861985 628543   39.10424   93   98   55.00000    7.74731  85.9%  30.1  985s
 866311 631469   50.16527  111   69   55.00000    7.76057  85.9%  30.1  990s
 869935 634022   47.19067  104   63   55.00000    7.77226  85.9%  30.1  995s
 875648 638220 infeasible   33        55.00000    7.78637  85.8%  30.1 1000s
 880322 641500   28.93341   61   89   55.00000    7.78965  85.8%  30.2 1005s
 885057 644684   21.41934   52   63   55.00000    7.79425  85.8%  30.2 1010s
 890579 648781   48.12293   90   73   55.00000    7.79886  85.8%  30.2 1015s
 897005 653142   10.10562   40   86   55.00000    7.80801  85.8%  30.3 1021s
 898752 654336   18.54645   51  104   55.00000    7.81143  85.8%  30.3 1025s
 903806 657846   38.16175   83  103   55.00000    7.81363  85.8%  30.3 1030s
 908891 661318   45.94659   97   96   55.00000    7.81971  85.8%  30.3 1035s
 915118 665692   10.71913   38  113   55.00000    7.82480  85.8%  30.4 1041s
 920472 669510   50.11755  107   61   55.00000    7.82786  85.8%  30.4 1046s
 924100 672201 infeasible   66        55.00000    7.82985  85.8%  30.4 1050s
 928364 674992   39.24792   95   62   55.00000    7.83373  85.8%  30.5 1056s
 934070 679024 infeasible   59        55.00000    7.83523  85.8%  30.5 1061s
 938730 682234   22.66954   57   78   55.00000    7.84266  85.7%  30.5 1066s
 941997 684484   47.13114   99   78   55.00000    7.84266  85.7%  30.5 1070s
 947058 688023   19.72684   58  101   55.00000    7.84266  85.7%  30.5 1075s
 950716 690586   33.65833   75  100   55.00000    7.84266  85.7%  30.5 1080s
 955966 694361 infeasible   58        55.00000    7.85794  85.7%  30.6 1085s
 961670 698588   10.03649   41  133   55.00000    7.86314  85.7%  30.6 1090s
 966549 702126   29.22354   66   97   55.00000    7.87251  85.7%  30.6 1096s
 970277 704696    7.87286   35  132   55.00000    7.87286  85.7%  30.6 1100s
 975180 708278   44.94640   96   85   55.00000    7.88353  85.7%  30.6 1105s
 980248 711902   33.97143   86  115   55.00000    7.88718  85.7%  30.6 1110s
 984162 714808   39.33193   92   91   55.00000    7.89577  85.6%  30.6 1116s
 987476 717163   13.06436   40  145   55.00000    7.90328  85.6%  30.6 1120s
 992963 721173   20.31399   51   57   55.00000    7.91423  85.6%  30.6 1125s
 997250 724296   29.18495   73   95   55.00000    7.91522  85.6%  30.6 1130s
 1001866 727419   43.90872   90   78   55.00000    7.91769  85.6%  30.6 1136s
 1005005 729524   10.90939   39  162   55.00000    7.91769  85.6%  30.6 1140s
 1008517 731917    8.91501   21  149   55.00000    7.92645  85.6%  30.7 1146s
 1011669 734148   36.14034   77   63   55.00000    7.92645  85.6%  30.7 1150s
 1016708 737738   46.28939   94   72   55.00000    7.93154  85.6%  30.7 1156s
 1020132 740231   12.88448   40  157   55.00000    7.93154  85.6%  30.7 1160s
 1024773 743406     cutoff  109        55.00000    7.93154  85.6%  30.7 1166s
 1028883 746385   20.39312   48  120   55.00000    7.93848  85.6%  30.7 1171s
 1031895 748550   30.79317   87   95   55.00000    7.94088  85.6%  30.7 1175s
 1036950 752061   31.92926   79   97   55.00000    7.94259  85.6%  30.7 1180s
 1042369 756006   52.32577   94   59   55.00000    7.94365  85.6%  30.8 1187s
 1044300 757244   20.13852   67  110   55.00000    7.94588  85.6%  30.8 1190s
 1047876 759625   27.22894   55   56   55.00000    7.94715  85.6%  30.8 1195s
 1053067 763372    8.02295   37  104   55.00000    7.94746  85.6%  30.8 1200s
 1058280 767105   49.90235  108   90   55.00000    7.94882  85.5%  30.8 1206s
 1063475 770813   44.84266   95   96   55.00000    7.95085  85.5%  30.8 1211s
 1066909 773262   47.04896   69   10   55.00000    7.95187  85.5%  30.8 1215s
 1071237 776278   34.07406   69   85   55.00000    7.95230  85.5%  30.8 1221s
 1073045 777616   17.85939   57  110   55.00000    7.95277  85.5%  30.8 1225s
 1078246 781397   41.92066   88   91   55.00000    7.95277  85.5%  30.8 1231s
 1083112 784813   29.22682   76   97   55.00000    7.95390  85.5%  30.8 1236s
 1086674 787252   13.88216   32  133   55.00000    7.95462  85.5%  30.9 1240s
 1091897 790856    8.94224   40   74   55.00000    7.95483  85.5%  30.9 1246s
 1097006 794600   39.85224  105   92   55.00000    7.95483  85.5%  30.8 1251s
 1101453 797745   34.20635   72   78   55.00000    7.95734  85.5%  30.9 1256s
 1105069 800456 infeasible   86        55.00000    7.95734  85.5%  30.9 1261s
 1109867 803840   47.71433   91   87   55.00000    7.95836  85.5%  30.9 1265s
 1114808 807251   17.85469   60  100   55.00000    7.95836  85.5%  30.9 1271s
 1119948 810973   31.32623   69   68   55.00000    7.96027  85.5%  30.9 1275s
 1125360 814917 infeasible   45        55.00000    7.96084  85.5%  30.9 1280s
 1132399 820028    9.42063   43  148   55.00000    7.96217  85.5%  30.9 1286s
 1134887 821873   34.21121   92   67   55.00000    7.96291  85.5%  30.9 1290s
 1140618 826027   21.88839   67   73   55.00000    7.96374  85.5%  30.9 1295s
 1145489 829504   24.71530   70  109   55.00000    7.96466  85.5%  30.9 1300s
 1150185 832790    8.94718   43  126   55.00000    7.96553  85.5%  30.9 1305s
 1154095 835512   19.90571   58   85   55.00000    7.96579  85.5%  31.0 1311s
 1155840 836634 infeasible  105        55.00000    7.96579  85.5%  31.0 1315s
 1159017 838855   49.19156  104  100   55.00000    7.96579  85.5%  31.0 1320s
 1163633 842118   40.68626   84   90   55.00000    7.96579  85.5%  31.0 1326s
 1167439 844713   37.82749   80   62   55.00000    7.96579  85.5%  31.1 1330s
 1172700 848475   43.17579   83   37   55.00000    7.96579  85.5%  31.1 1335s
 1178326 852363   38.19824   77   71   55.00000    7.96865  85.5%  31.1 1341s
 1182049 855054   13.54290   60   91   55.00000    7.97041  85.5%  31.1 1346s
 1187016 858600   15.56030   64  129   55.00000    7.97067  85.5%  31.1 1350s
 1191491 861804 infeasible  107        55.00000    7.97181  85.5%  31.1 1355s
 1197091 865896   50.19897   88   51   55.00000    7.97274  85.5%  31.1 1360s
 1205023 871556   33.24264   97   99   55.00000    7.97356  85.5%  31.1 1365s
 1209480 874588   20.07889   56   78   55.00000    7.97438  85.5%  31.1 1370s
 1214613 878177   30.66163   86   77   55.00000    7.97541  85.5%  31.1 1375s
 1216091 879206 infeasible   41        55.00000    7.97705  85.5%  31.1 1380s
 1219525 881637   39.21056   73   49   55.00000    7.97766  85.5%  31.1 1385s
 1224532 885095   13.92287   52   78   55.00000    7.97766  85.5%  31.1 1390s
 1228890 888200   22.52867   64  129   55.00000    7.97832  85.5%  31.1 1396s
 1231819 890335   25.81141   68  105   55.00000    7.97832  85.5%  31.1 1400s
 1237177 894203   46.18012  101   50   55.00000    7.97832  85.5%  31.1 1405s
 1242717 898105   12.16686   45  111   55.00000    7.97978  85.5%  31.1 1410s
 1249907 903286     cutoff   97        55.00000    7.98085  85.5%  31.1 1415s
 1255454 907321   43.15055  100   97   55.00000    7.98258  85.5%  31.1 1421s
 1260640 911016 infeasible   62        55.00000    7.98445  85.5%  31.1 1425s
 1266184 915050   46.17192   96   79   55.00000    7.98668  85.5%  31.1 1430s
 1272895 919891   38.29651   84   52   55.00000    7.98750  85.5%  31.0 1436s
 1276819 922611   52.75983  106   84   55.00000    7.99090  85.5%  31.0 1441s
 1281895 926266   40.17929   80   93   55.00000    7.99397  85.5%  31.0 1446s
 1287429 930183   17.55011   51  107   55.00000    7.99569  85.5%  31.0 1450s
 1294080 934948   20.78767   44   55   55.00000    7.99569  85.5%  31.0 1455s
 1300682 939746   48.15143  110   42   55.00000    8.00000  85.5%  31.0 1461s
 1305859 943357   52.22888  103   54   55.00000    8.00143  85.5%  31.0 1465s
 1313033 948862   25.25407   61   51   55.00000    8.00799  85.4%  31.0 1471s
 1316915 951568 infeasible   30        55.00000    8.00840  85.4%  30.9 1475s
 1323229 955988 infeasible  107        55.00000    8.01209  85.4%  30.9 1480s
 1327738 959358   16.56761   35  117   55.00000    8.01373  85.4%  30.9 1485s
 1334222 963985     cutoff   97        55.00000    8.01567  85.4%  30.9 1490s
 1338813 967177   12.01827   47  163   55.00000    8.03385  85.4%  31.0 1495s
 1341780 969292   24.29103   51   63   55.00000    8.03798  85.4%  31.0 1500s
 1347051 972974   43.21143   89   51   55.00000    8.04426  85.4%  31.0 1505s
 1352068 976510   47.15396  101   64   55.00000    8.04938  85.4%  31.0 1510s
 1358783 981431   52.08984  104   46   55.00000    8.04938  85.4%  31.0 1516s
 1364355 985500   12.04029   29  138   55.00000    8.06004  85.3%  31.0 1520s
 1369084 989040   15.00892   40  103   55.00000    8.06572  85.3%  30.9 1525s
 1374679 993260 infeasible  116        55.00000    8.06674  85.3%  30.9 1531s
 1380527 997533   37.21389  101   81   55.00000    8.07151  85.3%  30.9 1536s
 1385658 1001293   48.15248  111   81   55.00000    8.07356  85.3%  30.9 1541s
 1388805 1003463   25.55987   55   83   55.00000    8.07542  85.3%  30.9 1545s
 1393321 1006676    8.18432   37  143   55.00000    8.07813  85.3%  30.9 1550s
 1399727 1011292   21.68230   56   90   55.00000    8.07969  85.3%  30.9 1555s
 1403607 1014205   48.17384   90   80   55.00000    8.08387  85.3%  30.9 1561s
 1408437 1017782     cutoff   99        55.00000    8.08689  85.3%  30.9 1566s
 1409861 1018733   33.22713   64  101   55.00000    8.08739  85.3%  30.9 1570s
 1415599 1023057   41.20567   89   97   55.00000    8.08944  85.3%  30.9 1576s
 1420661 1026809   48.13885  107   77   55.00000    8.09242  85.3%  30.9 1581s
 1423930 1029169   19.90591   61  129   55.00000    8.09295  85.3%  30.9 1585s
 1428787 1032505   25.23089   69   84   55.00000    8.09536  85.3%  30.9 1590s
 1433708 1035942   16.86923   48  124   55.00000    8.09716  85.3%  31.0 1596s
 1435551 1037238   19.85629   50  108   55.00000    8.09846  85.3%  31.0 1600s
 1440690 1040944   23.39057   50   63   55.00000    8.09888  85.3%  31.0 1606s
 1445795 1044435   10.79978   41  131   55.00000    8.10213  85.3%  31.0 1611s
 1448747 1046603   52.19514  108   84   55.00000    8.10213  85.3%  31.0 1615s
 1453916 1050210   14.51572   54  125   55.00000    8.10406  85.3%  31.0 1621s
 1456911 1052373   35.70398   92  114   55.00000    8.10406  85.3%  31.0 1625s
 1462657 1056584   23.50782   64  111   55.00000    8.10747  85.3%  30.9 1630s
 1467023 1059568   13.81684   54  117   55.00000    8.10851  85.3%  31.0 1635s
 1469756 1061546   48.86199  113   81   55.00000    8.10851  85.3%  30.9 1640s
 1474745 1064935   43.12369   99   57   55.00000    8.10910  85.3%  31.0 1646s
 1478016 1067184   43.15637  101   72   55.00000    8.11011  85.3%  31.0 1650s
 1483137 1070824   31.78548   77   93   55.00000    8.11013  85.3%  31.0 1656s
 1487665 1073927   10.55545   39  135   55.00000    8.11027  85.3%  31.0 1661s
 1490856 1076232   50.12374  101   69   55.00000    8.11027  85.3%  31.0 1665s
 1494329 1078650   49.13296  106   52   55.00000    8.11027  85.3%  31.0 1670s
 1499149 1082068   12.75156   41  109   55.00000    8.11027  85.3%  31.0 1675s
 1504490 1085831   34.75712   74   90   55.00000    8.11027  85.3%  31.0 1681s
 1507282 1087871   40.68222   83   96   55.00000    8.11414  85.2%  31.0 1685s
 1512504 1091605   35.24549   71   47   55.00000    8.11414  85.2%  31.0 1690s
 1516307 1094307   52.13833  121   76   55.00000    8.11582  85.2%  31.0 1695s
 1521363 1097905   24.02041   54  114   55.00000    8.11669  85.2%  31.0 1701s
 1524981 1100540   15.05023   55   86   55.00000    8.11831  85.2%  31.0 1705s
 1529919 1104092   16.52938   57   79   55.00000    8.11938  85.2%  31.0 1712s
 1531606 1105167   42.43228  109   81   55.00000    8.11972  85.2%  31.0 1716s
 1534756 1107275   30.78370   66   75   55.00000    8.11978  85.2%  31.0 1720s
 1538107 1109564   44.13726   92   77   55.00000    8.11978  85.2%  31.0 1725s
 1542629 1112572 infeasible  110        55.00000    8.11978  85.2%  31.0 1732s
 1545878 1114657   47.13404   95   75   55.00000    8.11978  85.2%  31.0 1737s
 1549573 1117291   53.16766   91   61   55.00000    8.11978  85.2%  31.0 1741s
 1553790 1120256   11.07555   36   81   55.00000    8.12159  85.2%  31.0 1745s
 1557147 1122617    8.15111   33  121   55.00000    8.12181  85.2%  31.0 1750s
 1562838 1126817   52.43835  100   89   55.00000    8.12295  85.2%  31.0 1757s
 1565103 1128540   16.48122   49   86   55.00000    8.12364  85.2%  31.0 1761s
 1568146 1130679 infeasible   46        55.00000    8.12364  85.2%  31.0 1766s
 1571159 1132843 infeasible   76        55.00000    8.12364  85.2%  31.0 1770s
 1575967 1136217   34.31381   61   52   55.00000    8.12569  85.2%  31.0 1776s
 1579522 1138760    9.33309   42  138   55.00000    8.12651  85.2%  31.0 1780s
 1584588 1142465     cutoff  116        55.00000    8.12897  85.2%  31.0 1785s
 1592036 1147844   12.61622   46  131   55.00000    8.12979  85.2%  30.9 1791s
 1596831 1151407   25.61184   65  111   55.00000    8.13143  85.2%  30.9 1796s
 1599839 1153440   23.42788   57   69   55.00000    8.13185  85.2%  30.9 1800s

Explored 1600250 nodes (49478235 simplex iterations) in 1800.03 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 55 58 64 ... 113

Time limit reached
Best objective 5.500000000000e+01, best bound 9.000000000000e+00, gap 83.6364%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1749.7 MiB   1749.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1749.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1749.7 MiB      0.0 MiB       m2 = m.construct()
    28   1749.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1749.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1749.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1749.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1749.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1749.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1749.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1749.7 MiB      0.0 MiB       m2.update()
    44   1749.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1749.7 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1749.7 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1749.7 MiB      0.0 MiB       if(find_optimum):
    55   1749.7 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56   1749.7 MiB      0.0 MiB           m2.update()
    57   1749.7 MiB      0.0 MiB           new_obj = LinExpr(0)
    58   1749.7 MiB      0.0 MiB           for var in current_vars:
    59   1749.7 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60   1749.7 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61   1749.7 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62   1749.7 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1655.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1655.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1655.9 MiB      0.0 MiB       j = 0
    69   1655.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1655.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1655.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1655.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1655.9 MiB      0.0 MiB       if m2.status == 9:
    78   1655.9 MiB      0.0 MiB           result.timeout = True
    79   1655.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1655.9 MiB      0.0 MiB           result.solution = True
    81   1655.9 MiB      0.0 MiB           result.feasible = True
    82   1655.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1655.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1655.9 MiB      0.0 MiB           for v in current_vars:
    85   1655.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1655.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1655.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89   1655.9 MiB      0.0 MiB                       res_vec[j] = 0
    90   1655.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1655.9 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 19:52:47 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.tra,lab' -mdp /tmp/tmpyagotxuj

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpyagotxuj"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.021 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      57 (1 initial)
Transitions: 70
Choices:     57

Transition matrix: 188 nodes (3 terminal), 70 minterms, vars: 6r/6c/1nd

Prob0A: 45 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 332 iterations in 0.01 seconds (average 0.000024, setup 0.00)

yes = 6, no = 1, maybe = 50

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=6, nodes=183] [8.6 KB]
Adding sparse bits... [levels=6-6, num=1, compact=1/1] [0.3 KB]
Creating vector for yes... [dist=2, compact] [0.1 KB]
Allocating iteration vectors... [3 x 0.4 KB]
TOTAL: [10.4 KB]

Starting iterations...

Iterative method: 2176 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 0.42857142255256775

Time for model checking: 0.015 seconds.

Result: 0.42857142255256775 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 1584 columns and 4117 nonzeros
Variable types: 528 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [4e-01, 2e+00]
Presolve removed 289 rows and 280 columns
Presolve time: 0.01s
Presolved: 1296 rows, 1304 columns, 3548 nonzeros
Variable types: 486 continuous, 818 integer (818 binary)

Root relaxation: objective 4.000000e-01, 1 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.40000    0    1          -    0.40000      -     -    0s
H    0     0                     163.0000000    0.40000   100%     -    0s
H    0     0                      78.0000000    0.40000  99.5%     -    0s
     0     2    1.80000    0    2   78.00000    1.80000  97.7%     -    0s
H   31    48                      72.0000000    2.80000  96.1%   5.9    0s
H   33    48                      69.0000000    2.80000  95.9%   6.2    0s
H   38    48                      68.0000000    2.80000  95.9%   5.9    0s
H 2378  1743                      67.0000000    4.80000  92.8%   6.6    2s
  6475  3489   18.01667   37   10   67.00000    4.80000  92.8%   9.3    5s
H15177  9663                      63.0000000    6.60000  89.5%   9.1    7s
 22004 14787   52.26429   68   14   63.00000    7.60000  87.9%   9.5   10s
 38954 27280   42.86667   55   19   63.00000    7.60000  87.9%   9.7   15s
 58644 41390   59.09369   79   40   63.00000    8.60000  86.3%  10.2   20s
 78164 55564   54.45000   68   17   63.00000    8.60000  86.3%  10.6   25s
H81547 57522                      61.0000000    8.60000  85.9%  10.6   25s
 95577 67652     cutoff   57        61.00000    8.80000  85.6%  10.7   30s
H110380 76757                      59.0000000    9.40000  84.1%  10.9   34s
 110613 76916   22.93333   38   12   59.00000    9.40000  84.1%  10.9   35s
 125115 87352   17.63333   40   10   59.00000    9.52500  83.9%  11.2   40s
 142124 99904   43.42402   70   17   59.00000    9.60000  83.7%  11.3   45s
 163905 115918   24.60952   43   12   59.00000    9.60000  83.7%  11.3   50s
 184332 131171   15.20000   35    6   59.00000    9.60000  83.7%  11.2   55s
 200869 143387   20.13333   36   12   59.00000    9.70000  83.6%  11.2   60s
 216855 154597   21.64000   37    9   59.00000    9.90000  83.2%  11.2   65s
 234583 167239   41.33030   68   15   59.00000   10.20000  82.7%  11.2   70s
 250603 178598   20.00000   33   11   59.00000   10.40000  82.4%  11.2   75s
 261266 186208   15.80000   32   11   59.00000   10.40000  82.4%  11.3   80s
 274960 195690   38.94167   59   21   59.00000   10.40000  82.4%  11.3   85s
 292417 208334   22.00000   42   14   59.00000   10.53333  82.1%  11.4   90s
 308509 220288   12.32000   31    3   59.00000   10.60000  82.0%  11.4   95s
 323893 231252   15.20000   35    8   59.00000   10.60000  82.0%  11.4  100s
 338520 242106   46.77935   81   19   59.00000   10.60000  82.0%  11.4  105s
H339073 241284                      58.0000000   10.60000  81.7%  11.4  105s
 353058 251513   30.15960   44   14   58.00000   10.60000  81.7%  11.4  110s
 371410 265116   21.00000   45    4   58.00000   10.60000  81.7%  11.3  115s
 388733 277915 infeasible   58        58.00000   10.60000  81.7%  11.3  120s
H403076 283302                      56.0000000   10.60000  81.1%  11.3  124s
 403581 283660 infeasible   64        56.00000   10.60000  81.1%  11.3  125s
 419858 295386   34.73333   50   20   56.00000   10.70000  80.9%  11.3  130s
 437435 307806   52.82529   87   21   56.00000   10.80000  80.7%  11.2  135s
 455393 320800   48.80000   70   29   56.00000   10.86667  80.6%  11.2  140s
 468145 329734   53.37452   82   13   56.00000   11.00000  80.4%  11.2  145s
 480757 339024   30.16768   44   16   56.00000   11.06667  80.2%  11.2  150s
 497843 351188   27.73651   51   13   56.00000   11.13333  80.1%  11.2  155s
 512990 362117 infeasible   42        56.00000   11.20000  80.0%  11.2  160s
 529372 374033   42.25000   69   11   56.00000   11.20000  80.0%  11.1  165s
 543662 384203 infeasible   84        56.00000   11.23333  79.9%  11.1  170s
 563021 397837   33.43333   50   20   56.00000   11.40000  79.6%  11.2  175s
 577767 408127 infeasible   73        56.00000   11.40000  79.6%  11.2  180s
 588501 415444   25.24444   37   12   56.00000   11.40000  79.6%  11.2  185s
 603926 426244 infeasible   82        56.00000   11.40000  79.6%  11.3  190s
 617340 435339     cutoff   69        56.00000   11.40909  79.6%  11.3  195s
 634314 447404   12.03333   35    5   56.00000   11.53333  79.4%  11.3  200s
 656291 463437   52.27311   65   41   56.00000   11.53333  79.4%  11.3  205s
 668544 472168   26.09506   41   12   56.00000   11.53333  79.4%  11.3  210s
 683544 482828   31.34892   59   11   56.00000   11.60000  79.3%  11.3  215s
 698582 494060   42.62639   60   26   56.00000   11.60000  79.3%  11.3  220s
 711562 503667   50.10000   82   25   56.00000   11.60000  79.3%  11.3  225s
 727313 515186   35.15714   61   12   56.00000   11.60000  79.3%  11.3  230s
 743288 527021   34.91333   71    8   56.00000   11.60000  79.3%  11.2  235s
 759515 538933   46.57965   70   17   56.00000   11.60000  79.3%  11.2  240s
 774944 550310   18.40000   45    4   56.00000   11.60000  79.3%  11.2  245s
 791987 562780   22.88750   49    6   56.00000   11.60000  79.3%  11.2  250s
 807413 574203   25.64444   52    9   56.00000   11.60000  79.3%  11.2  255s
 824057 586481 infeasible   86        56.00000   11.60000  79.3%  11.1  260s
 841991 599398   20.71667   39   11   56.00000   11.70000  79.1%  11.2  265s
 858561 611416   29.80000   50   11   56.00000   11.71111  79.1%  11.2  270s
 876109 623599 infeasible   48        56.00000   11.80000  78.9%  11.2  275s
 891740 634264   20.11667   40    9   56.00000   11.80000  78.9%  11.2  280s
 905687 644186   16.73333   38    7   56.00000   11.86667  78.8%  11.2  285s
 924277 657623   25.41358   49   12   56.00000   11.86667  78.8%  11.2  290s
 943638 671937   36.51111   58   22   56.00000   11.88889  78.8%  11.2  295s
 956011 680791   50.45833   70   18   56.00000   11.90000  78.8%  11.2  300s
 970242 690888   21.80000   39   12   56.00000   12.00000  78.6%  11.2  305s
 987391 703547   26.21818   53    9   56.00000   12.03333  78.5%  11.1  310s
 1004443 715784   19.75965   40   11   56.00000   12.06667  78.5%  11.1  315s
 1016522 724448   50.06154   84   10   56.00000   12.06667  78.5%  11.1  320s
 1027567 732247   19.63333   36   14   56.00000   12.06667  78.5%  11.1  325s
 1043697 743797   44.86111   66   21   56.00000   12.10000  78.4%  11.1  330s
 1061307 756468   42.30000   53   18   56.00000   12.10000  78.4%  11.1  335s
 1077595 767826   15.60000   37    4   56.00000   12.20000  78.2%  11.2  340s
 1090677 777414   48.50909   63   23   56.00000   12.20000  78.2%  11.1  345s
 1110588 791706   20.11111   37    7   56.00000   12.20000  78.2%  11.1  350s
 1131776 807084   42.29613   59   22   56.00000   12.20000  78.2%  11.1  355s
 1145846 817154   52.80304   79   29   56.00000   12.20000  78.2%  11.1  360s
 1159750 827120   37.09333   72    9   56.00000   12.20000  78.2%  11.1  365s
 1173229 836443   41.86667   66    8   56.00000   12.23333  78.2%  11.1  370s
 1189549 848079   31.73333   39   14   56.00000   12.30000  78.0%  11.1  375s
 1206430 859763   22.00000   37   10   56.00000   12.40000  77.9%  11.1  380s
 1219493 868812   36.57436   44   21   56.00000   12.40000  77.9%  11.2  385s
 1232801 878053   52.41066   74   25   56.00000   12.40000  77.9%  11.2  390s
 1243129 885111   51.40833   57   30   56.00000   12.40000  77.9%  11.2  395s
 1258126 895738   49.80093   66   27   56.00000   12.40000  77.9%  11.2  400s
 1275360 907712   19.20000   37    9   56.00000   12.40000  77.9%  11.2  405s
 1290104 917968   50.22172   72   20   56.00000   12.40000  77.9%  11.2  410s
 1303352 927176     cutoff   53        56.00000   12.40000  77.9%  11.3  415s
 1315415 935677   35.30909   48   21   56.00000   12.40000  77.9%  11.3  420s
 1330462 946352   39.00000   52   15   56.00000   12.46667  77.7%  11.3  425s
 1346894 957881   50.36389   78   25   56.00000   12.53333  77.6%  11.3  430s
 1364751 970686   36.05556   57   21   56.00000   12.53333  77.6%  11.3  435s
 1379633 981409   43.31111   58   25   56.00000   12.53333  77.6%  11.3  440s
 1391630 990187   53.93787   65   23   56.00000   12.53333  77.6%  11.3  445s
 1406292 1000542   20.53333   36    8   56.00000   12.53333  77.6%  11.3  450s
 1419188 1009643   24.48696   47    7   56.00000   12.53333  77.6%  11.2  455s
 1433890 1020148   28.17885   48   11   56.00000   12.53333  77.6%  11.2  460s
 1448561 1030762   39.28519   41   25   56.00000   12.53333  77.6%  11.2  465s
 1464481 1042485   38.33333   67   19   56.00000   12.53333  77.6%  11.2  470s
 1482589 1055661   18.48788   40   10   56.00000   12.53333  77.6%  11.2  475s
 1501946 1069165   22.14074   39   15   56.00000   12.56667  77.6%  11.2  480s
 1511842 1076479 infeasible   82        56.00000   12.60000  77.5%  11.2  485s
 1529484 1089450   32.06667   56    3   56.00000   12.60000  77.5%  11.2  490s
 1548970 1103794   42.75556   59   22   56.00000   12.60000  77.5%  11.2  495s
 1565232 1115369   29.00000   42   11   56.00000   12.60000  77.5%  11.2  500s
 1578696 1125183   28.40000   56    6   56.00000   12.60000  77.5%  11.2  505s
 1592021 1135026   50.02727   64   27   56.00000   12.60000  77.5%  11.2  510s
 1609715 1147959   44.75273   74   20   56.00000   12.60000  77.5%  11.1  515s
 1626310 1160141   34.10000   55   10   56.00000   12.60000  77.5%  11.1  520s
 1639662 1170117   23.78667   49    5   56.00000   12.60000  77.5%  11.1  525s
 1657631 1183395   26.20000   46   11   56.00000   12.60000  77.5%  11.1  530s
 1674918 1195967   24.23333   52    8   56.00000   12.60000  77.5%  11.1  535s
 1692777 1209135   17.20000   36    9   56.00000   12.60000  77.5%  11.1  540s
 1710941 1221864   50.95556   77   25   56.00000   12.70000  77.3%  11.1  545s
 1722184 1229896   13.53333   37    8   56.00000   12.70000  77.3%  11.1  550s
 1733231 1238085   54.00000   55   13   56.00000   12.70000  77.3%  11.1  555s
 1748315 1249055   28.76162   44   14   56.00000   12.70000  77.3%  11.1  560s
 1763470 1259779   15.66667   38    8   56.00000   12.73333  77.3%  11.1  565s
 1779635 1270904   17.20000   39    9   56.00000   12.73333  77.3%  11.1  570s
 1796778 1283146   23.64444   44   12   56.00000   12.73333  77.3%  11.1  575s
 1810708 1292627   33.60000   48   19   56.00000   12.80000  77.1%  11.1  580s
 1826274 1303474   28.40000   47   10   56.00000   12.80000  77.1%  11.1  585s
 1844252 1315910 infeasible   66        56.00000   12.80000  77.1%  11.1  590s
 1860965 1327364   34.96667   55    9   56.00000   12.80606  77.1%  11.0  595s
 1873294 1335699 infeasible   58        56.00000   12.86667  77.0%  11.1  600s
 1890456 1348636   40.00000   58   21   56.00000   12.86667  77.0%  11.0  605s
 1908501 1362034   18.32000   41    7   56.00000   12.86667  77.0%  11.0  610s
 1924998 1374187   50.71761   69   21   56.00000   12.86667  77.0%  11.0  615s
 1942357 1387049 infeasible   64        56.00000   12.86667  77.0%  11.0  620s
 1953499 1395246   28.10303   51   15   56.00000   12.86667  77.0%  11.0  625s
 1966144 1404783   20.20000   46    7   56.00000   12.86667  77.0%  11.0  630s
 1978008 1413630   14.86667   36    5   56.00000   12.86667  77.0%  11.0  635s
 1990068 1422416   29.39111   58   11   56.00000   12.86667  77.0%  11.0  640s
 2003147 1431653   28.10667   57    6   56.00000   12.90000  77.0%  11.0  645s
 2018402 1442302   28.06667   44   17   56.00000   12.90000  77.0%  11.0  650s
 2032429 1452067   25.00667   53   12   56.00000   12.93333  76.9%  11.0  655s
 2042141 1458735   23.96000   48    9   56.00000   12.93333  76.9%  11.0  660s
 2057886 1469553   52.08259   67   22   56.00000   13.00000  76.8%  11.0  665s
 2070588 1478286   47.27350   86   16   56.00000   13.03333  76.7%  11.0  670s
 2081511 1486372   14.86667   34    5   56.00000   13.03333  76.7%  11.0  675s
 2091209 1493182   50.45000   71   23   56.00000   13.03333  76.7%  11.0  680s
 2108807 1505851   51.71778   73   29   56.00000   13.03333  76.7%  11.0  685s
 2123121 1516034 infeasible   44        56.00000   13.06667  76.7%  11.0  690s
 2137132 1525654   32.50480   44   19   56.00000   13.06667  76.7%  11.0  695s
 2153105 1536815   26.35630   42   10   56.00000   13.06667  76.7%  11.0  700s
 2164501 1544508   36.54203   60   14   56.00000   13.06667  76.7%  11.0  705s
 2176006 1552430   18.80000   40   12   56.00000   13.06667  76.7%  11.0  710s
 2187904 1560775   43.09330   76   17   56.00000   13.06667  76.7%  11.0  715s
 2199765 1568959   26.31818   47   13   56.00000   13.06667  76.7%  11.0  720s
 2217217 1581192   48.82623   77   15   56.00000   13.10000  76.6%  11.0  725s
 2231430 1591250 infeasible   69        56.00000   13.10000  76.6%  11.0  730s
 2247519 1602762   19.37576   36   12   56.00000   13.10000  76.6%  11.0  735s
 2261382 1612414   46.69474   67   16   56.00000   13.12727  76.6%  11.0  740s
 2274182 1620853   26.13333   47   10   56.00000   13.13333  76.5%  11.0  745s
 2285368 1628752   52.75556   54   33   56.00000   13.13333  76.5%  11.0  750s
 2295814 1636029   16.81333   38    6   56.00000   13.16000  76.5%  11.0  755s
 2307884 1644733   45.52179   56   23   56.00000   13.20000  76.4%  11.0  760s
 2323641 1656064   32.33333   48   10   56.00000   13.20000  76.4%  11.0  765s
 2341887 1669291   17.00000   34   10   56.00000   13.20000  76.4%  11.0  770s
 2364017 1685047   27.80000   50   10   56.00000   13.20000  76.4%  11.0  775s
 2378427 1695160 infeasible   36        56.00000   13.20000  76.4%  11.0  780s
 2389844 1703211   30.75152   49   11   56.00000   13.20000  76.4%  11.0  785s
 2404651 1713793   24.40000   52    6   56.00000   13.20000  76.4%  11.0  790s
 2421542 1725981   36.06667   55   19   56.00000   13.20000  76.4%  11.0  795s
 2442149 1740658   34.00000   62    6   56.00000   13.20000  76.4%  11.0  800s
 2456418 1750922   29.38056   49   19   56.00000   13.20000  76.4%  11.0  805s
 2469119 1759704   48.80185   84   19   56.00000   13.20000  76.4%  11.0  810s
 2483902 1770120   19.73333   45    5   56.00000   13.20000  76.4%  11.0  815s
 2497702 1779608   31.42105   50   13   56.00000   13.23333  76.4%  11.0  820s
 2512954 1790247   34.51667   56   16   56.00000   13.26250  76.3%  11.0  825s
 2528227 1800682   50.75000   62   19   56.00000   13.28000  76.3%  11.0  830s
 2540555 1809207   38.45972   67   17   56.00000   13.30000  76.2%  11.0  835s
 2556326 1819952   30.60000   41   14   56.00000   13.33333  76.2%  11.0  840s
 2568895 1828708   22.93333   40   14   56.00000   13.36667  76.1%  11.0  845s
 2582871 1838456   31.16818   51   20   56.00000   13.40000  76.1%  11.0  850s
 2595353 1847073   17.86667   35   10   56.00000   13.40000  76.1%  11.0  855s
 2609491 1856893     cutoff   63        56.00000   13.40000  76.1%  11.0  860s
 2622216 1865490 infeasible   56        56.00000   13.40000  76.1%  11.0  865s
 2636345 1875148   35.96145   55   24   56.00000   13.40000  76.1%  11.0  870s
 2652563 1886359   27.88000   47   10   56.00000   13.40000  76.1%  11.0  875s
 2663748 1894166     cutoff   76        56.00000   13.40000  76.1%  11.0  880s
 2673113 1900461   45.65000   60   22   56.00000   13.40000  76.1%  11.0  885s
 2687151 1909995   53.16000   80   15   56.00000   13.40000  76.1%  11.1  890s
 2701427 1919769   29.64242   46   18   56.00000   13.40000  76.1%  11.1  895s
 2715483 1929716 infeasible   50        56.00000   13.40000  76.1%  11.1  900s
 2726142 1937240 infeasible   59        56.00000   13.40000  76.1%  11.1  905s
 2736366 1944268   46.84444   64   26   56.00000   13.40000  76.1%  11.1  910s
 2751760 1954788   45.24609   73   24   56.00000   13.40000  76.1%  11.1  915s
 2765901 1964544   26.94545   44   15   56.00000   13.40000  76.1%  11.1  920s
 2783321 1976613 infeasible   64        56.00000   13.40000  76.1%  11.1  925s
 2799289 1987554   43.89946   59   27   56.00000   13.40000  76.1%  11.1  930s
 2811287 1996002     cutoff   64        56.00000   13.40000  76.1%  11.1  935s
 2827936 2007512     cutoff   67        56.00000   13.40000  76.1%  11.1  940s
 2842387 2017143   30.85686   49   22   56.00000   13.46667  76.0%  11.1  945s
 2854518 2025517     cutoff   51        56.00000   13.46667  76.0%  11.1  950s
 2871211 2036906   13.89333   37    4   56.00000   13.51111  75.9%  11.1  955s
 2886059 2047205   15.53333   37    6   56.00000   13.53333  75.8%  11.1  960s
 2900438 2057377   54.68000   94   11   56.00000   13.53333  75.8%  11.1  965s
 2917044 2069314   23.92121   44   13   56.00000   13.53333  75.8%  11.1  970s
 2934272 2081590   14.26667   36    8   56.00000   13.53333  75.8%  11.1  975s
 2949639 2092504   38.78333   53   27   56.00000   13.53333  75.8%  11.1  980s
 2966061 2104120 infeasible   50        56.00000   13.53333  75.8%  11.1  985s
 2981009 2114911   52.54833   70   29   56.00000   13.53333  75.8%  11.1  990s
 2998012 2127149   54.28283   79   19   56.00000   13.53333  75.8%  11.1  995s
 3009087 2134992   51.82758   78   19   56.00000   13.53333  75.8%  11.1 1000s
 3025722 2146884   33.33137   52   18   56.00000   13.53333  75.8%  11.1 1005s
 3038975 2156257   54.93333   60   18   56.00000   13.53333  75.8%  11.1 1010s
 3055373 2167868   45.64444   71   15   56.00000   13.53333  75.8%  11.1 1015s
 3071080 2178895     cutoff   73        56.00000   13.53333  75.8%  11.1 1020s
 3082791 2187066   32.54815   60   11   56.00000   13.53333  75.8%  11.1 1025s
 3095796 2196155 infeasible   47        56.00000   13.53333  75.8%  11.1 1030s
 3104419 2202140   53.78369   80   29   56.00000   13.53333  75.8%  11.1 1035s
 3116763 2210833   20.26667   48   10   56.00000   13.53333  75.8%  11.1 1040s
 3134346 2223181     cutoff   57        56.00000   13.53333  75.8%  11.1 1045s
 3145793 2231418   35.26667   57   14   56.00000   13.53333  75.8%  11.1 1050s
 3161327 2242400   26.60808   48   15   56.00000   13.53333  75.8%  11.1 1055s
 3178275 2254597   34.66667   49   16   56.00000   13.53333  75.8%  11.1 1060s
 3194172 2266028   50.14747   73   19   56.00000   13.53333  75.8%  11.1 1065s
 3208297 2275941     cutoff   54        56.00000   13.53333  75.8%  11.1 1070s
 3225525 2288510   53.87980   80   30   56.00000   13.53333  75.8%  11.1 1075s
 3242765 2300984   32.80000   60   10   56.00000   13.53333  75.8%  11.1 1080s
 3258496 2311804   38.38061   67   13   56.00000   13.56667  75.8%  11.1 1085s
 3269811 2319438   21.54167   45   11   56.00000   13.56667  75.8%  11.1 1090s
 3284368 2329687   46.30478   66   25   56.00000   13.60000  75.7%  11.1 1095s
 3302315 2342266   53.50000   97   14   56.00000   13.60000  75.7%  11.1 1100s
 3317329 2352884   52.31435   53   25   56.00000   13.60000  75.7%  11.1 1105s
 3334055 2364638   51.06092   79   15   56.00000   13.60000  75.7%  11.1 1110s
 3346931 2373887   19.90000   42    4   56.00000   13.60000  75.7%  11.1 1115s
 3364368 2386356   19.86667   44    6   56.00000   13.60000  75.7%  11.1 1120s
 3380802 2398311   22.62222   48    7   56.00000   13.60000  75.7%  11.1 1125s
 3397940 2410765   39.49091   61   11   56.00000   13.60000  75.7%  11.1 1130s
 3413647 2422051   26.37576   53   12   56.00000   13.60000  75.7%  11.1 1135s
 3427740 2432097 infeasible   90        56.00000   13.60000  75.7%  11.1 1140s
 3441042 2441457   45.00000   48   10   56.00000   13.60000  75.7%  11.1 1145s
 3457504 2453072   51.56212   90   19   56.00000   13.60000  75.7%  11.1 1150s
 3475966 2466335   45.33778   85   16   56.00000   13.60000  75.7%  11.1 1155s
 3492905 2478843 infeasible   79        56.00000   13.60000  75.7%  11.1 1160s
 3506355 2488796 infeasible   66        56.00000   13.60000  75.7%  11.0 1165s
 3523487 2501128 infeasible   90        56.00000   13.60000  75.7%  11.0 1170s
 3543823 2515268     cutoff   48        56.00000   13.65714  75.6%  11.0 1175s
 3560118 2526643   49.45736   86   28   56.00000   13.70000  75.5%  11.0 1180s
 3573526 2536327     cutoff   49        56.00000   13.70000  75.5%  11.0 1185s
 3584929 2544162   40.07424   52   19   56.00000   13.70000  75.5%  11.0 1190s
 3596554 2552311   37.63030   62   16   56.00000   13.70000  75.5%  11.0 1195s
 3608380 2560880   46.47810   80   11   56.00000   13.70000  75.5%  11.0 1200s
 3622542 2570744   51.44183   70   21   56.00000   13.71111  75.5%  11.0 1205s
 3635019 2579389     cutoff   44        56.00000   13.73333  75.5%  11.0 1210s
 3651319 2590687   14.73333   35    4   56.00000   13.73333  75.5%  11.0 1215s
 3668966 2603171   54.42392   85   22   56.00000   13.73333  75.5%  11.0 1220s
 3685740 2615338   21.13333   44    6   56.00000   13.73333  75.5%  11.0 1225s
 3697864 2623868   23.86667   48    6   56.00000   13.73333  75.5%  11.0 1230s
 3715454 2636098   25.84444   45   11   56.00000   13.73333  75.5%  11.0 1235s
 3734920 2650034   18.80000   39    6   56.00000   13.73333  75.5%  11.0 1240s
 3745880 2657776   47.11667   64   30   56.00000   13.73333  75.5%  11.0 1245s
 3764543 2670779   28.71313   50   12   56.00000   13.73333  75.5%  11.0 1250s
 3780474 2681995   39.58990   53   24   56.00000   13.73333  75.5%  11.0 1255s
 3797042 2693701   13.77500   33    4   56.00000   13.77500  75.4%  11.0 1260s
 3811832 2703813   15.40000   32    6   56.00000   13.80000  75.4%  11.0 1265s
 3822331 2710592   36.80000   51    8   56.00000   13.80000  75.4%  11.0 1270s
 3840241 2722612   53.63333   89   16   56.00000   13.80000  75.4%  11.0 1275s
 3858785 2735047   32.20000   54    8   56.00000   13.80000  75.4%  11.0 1280s
 3880375 2749811   23.55556   52    5   56.00000   13.80000  75.4%  11.0 1285s
 3896903 2761504   30.82222   54   10   56.00000   13.80000  75.4%  11.0 1290s
 3911153 2771352   23.82222   43    9   56.00000   13.80000  75.4%  11.0 1295s
 3930662 2784398   53.73876   66   25   56.00000   13.82222  75.3%  11.0 1300s
 3945167 2794067   49.68000   73   20   56.00000   13.84000  75.3%  11.0 1305s
 3958667 2803229   54.49396   94   17   56.00000   13.86667  75.2%  11.0 1310s
 3969949 2811614   28.37222   49   16   56.00000   13.86667  75.2%  11.0 1315s
 3984084 2821951 infeasible   71        56.00000   13.86667  75.2%  11.0 1320s
 3995846 2830578   52.86822   84   21   56.00000   13.86667  75.2%  11.0 1325s
 4011083 2841692   40.21364   75   13   56.00000   13.86667  75.2%  11.0 1330s
 4024466 2851214   26.91111   51    8   56.00000   13.86667  75.2%  11.0 1335s
 4040180 2862518   52.10392   85   14   56.00000   13.86667  75.2%  11.0 1340s
 4053656 2872337   14.86667   35    6   56.00000   13.86667  75.2%  11.0 1345s
 4072072 2885851   44.84550   59   26   56.00000   13.86667  75.2%  11.0 1350s
 4088570 2898088   36.12000   54   17   56.00000   13.86667  75.2%  11.0 1355s
 4103177 2908813   17.65333   39    5   56.00000   13.86667  75.2%  11.0 1360s
 4121434 2922473   49.41926   75   21   56.00000   13.86667  75.2%  11.0 1366s
 4130843 2929480   19.53333   43    6   56.00000   13.86667  75.2%  11.0 1370s
 4143008 2938445 infeasible   64        56.00000   13.86667  75.2%  11.0 1375s
 4154383 2946746   23.63333   48   14   56.00000   13.86667  75.2%  11.0 1380s
 4168116 2956867   45.46875   77   16   56.00000   13.86667  75.2%  11.0 1385s
 4181542 2966827   52.80202   85   15   56.00000   13.86667  75.2%  11.0 1390s
 4195128 2976693   47.78889   73   22   56.00000   13.86667  75.2%  11.0 1395s
 4207915 2986078   30.33333   59   13   56.00000   13.86667  75.2%  11.0 1400s
 4221285 2995954   32.73333   62   12   56.00000   13.86667  75.2%  11.0 1405s
 4236489 3007133   16.51111   38    5   56.00000   13.86667  75.2%  11.0 1410s
 4254347 3020161     cutoff   69        56.00000   13.86667  75.2%  10.9 1415s
 4263781 3027221     cutoff   73        56.00000   13.86667  75.2%  10.9 1420s
 4278668 3037956     cutoff   76        56.00000   13.86667  75.2%  10.9 1425s
 4290948 3046541     cutoff   85        56.00000   13.89333  75.2%  10.9 1430s
 4304479 3056214   36.72037   57   20   56.00000   13.90000  75.2%  10.9 1435s
 4320099 3067362   29.31111   57   13   56.00000   13.90000  75.2%  10.9 1440s
 4330177 3074372   41.95833   56   20   56.00000   13.90000  75.2%  10.9 1445s
 4343888 3083874 infeasible   68        56.00000   13.90833  75.2%  10.9 1450s
 4357591 3093274   16.25000   37    8   56.00000   13.90833  75.2%  10.9 1455s
 4371767 3102965   45.69333   61   17   56.00000   13.93333  75.1%  10.9 1460s
 4385029 3112189   34.13333   55   18   56.00000   13.93333  75.1%  10.9 1465s
 4398742 3121818   33.80000   53   12   56.00000   13.93333  75.1%  10.9 1470s
 4413562 3131935   29.00000   42   15   56.00000   13.93333  75.1%  10.9 1475s
 4429914 3142961 infeasible   71        56.00000   13.96667  75.1%  10.9 1480s
 4448418 3155729   41.41250   55   20   56.00000   14.00000  75.0%  10.9 1485s
 4464736 3166751   44.88602   60   17   56.00000   14.03333  74.9%  10.9 1490s
 4478040 3176295   52.16667   85   20   56.00000   14.03333  74.9%  10.9 1495s
 4490149 3185004   35.21385   66   12   56.00000   14.03333  74.9%  10.9 1500s
 4501100 3192949   26.42727   49   13   56.00000   14.03333  74.9%  10.9 1505s
 4512265 3200835   20.20000   44    6   56.00000   14.03333  74.9%  10.9 1510s
 4524606 3209559 infeasible   64        56.00000   14.03333  74.9%  10.9 1515s
 4540483 3221071   48.95238   85    9   56.00000   14.03333  74.9%  10.9 1520s
 4558432 3234076     cutoff   75        56.00000   14.05000  74.9%  10.9 1525s
 4570612 3242715   50.57778   60   39   56.00000   14.06667  74.9%  10.9 1530s
 4586527 3253665   51.28889   79   16   56.00000   14.06667  74.9%  10.9 1535s
 4601266 3263744   31.66667   54   19   56.00000   14.06667  74.9%  10.9 1540s
 4616171 3273971 infeasible   75        56.00000   14.06667  74.9%  10.9 1545s
 4627982 3282330 infeasible   63        56.00000   14.06667  74.9%  10.9 1550s
 4640335 3290679 infeasible   66        56.00000   14.06667  74.9%  10.9 1555s
 4654508 3300520   17.30000   34    7   56.00000   14.06667  74.9%  10.9 1560s
 4669118 3310567   29.40000   44   15   56.00000   14.06667  74.9%  11.0 1565s
 4684310 3321211     cutoff   61        56.00000   14.06667  74.9%  11.0 1570s
 4695467 3328843   52.93056   69   22   56.00000   14.06667  74.9%  11.0 1575s
 4707646 3337289   31.52029   52   13   56.00000   14.06667  74.9%  11.0 1580s
 4720254 3345831   19.09495   44   10   56.00000   14.06667  74.9%  11.0 1585s
 4734810 3355853 infeasible   53        56.00000   14.06667  74.9%  11.0 1590s
 4751279 3367112   21.30000   38   13   56.00000   14.06667  74.9%  11.0 1595s
 4769368 3379853   31.82667   59    7   56.00000   14.06667  74.9%  11.0 1600s
 4785007 3390989   45.57980   71   19   56.00000   14.08889  74.8%  11.0 1605s
 4796161 3398919 infeasible   74        56.00000   14.10000  74.8%  11.0 1610s
 4809537 3408563 infeasible   51        56.00000   14.10000  74.8%  11.0 1615s
 4823427 3418519 infeasible   57        56.00000   14.10000  74.8%  11.0 1620s
 4839967 3430445   39.31746   78    7   56.00000   14.10000  74.8%  11.0 1625s
 4856780 3442418   22.60667   48   10   56.00000   14.10000  74.8%  11.0 1630s
 4872630 3454019   22.30667   45    9   56.00000   14.10000  74.8%  11.0 1635s
 4887380 3464459   45.15690   92   11   56.00000   14.10000  74.8%  11.0 1640s
 4902133 3474538   35.77273   52   17   56.00000   14.13333  74.8%  11.0 1645s
 4917375 3484481   30.00000   51    7   56.00000   14.13333  74.8%  11.0 1650s
 4927213 3490766   48.00000   60   15   56.00000   14.13333  74.8%  11.0 1655s
 4941105 3500500   36.00000   53   15   56.00000   14.13333  74.8%  11.0 1660s
 4954425 3509847   52.91667   75   18   56.00000   14.13333  74.8%  11.0 1665s
 4967048 3518704   45.00392   52   19   56.00000   14.15000  74.7%  11.0 1670s
 4982824 3530020   15.15556   37    3   56.00000   14.15556  74.7%  11.0 1675s
 4993955 3538054   15.16000   36    5   56.00000   14.16000  74.7%  11.0 1680s
 5007911 3547659   16.88889   41    7   56.00000   14.16667  74.7%  11.0 1685s
 5020863 3556646   26.74533   46   14   56.00000   14.20000  74.6%  11.0 1690s
 5036450 3567496   23.60000   44   11   56.00000   14.20000  74.6%  11.0 1695s
 5053928 3580084   19.80000   42    2   56.00000   14.20000  74.6%  11.0 1700s
 5065241 3588248   40.76061   58   18   56.00000   14.20000  74.6%  11.0 1705s
 5083461 3601114   14.20000   38    3   56.00000   14.20000  74.6%  10.9 1710s
 5101179 3613840   51.83333   71   26   56.00000   14.20000  74.6%  10.9 1715s
 5113944 3622722   50.12000   83   12   56.00000   14.20000  74.6%  10.9 1720s
 5126498 3631862 infeasible   68        56.00000   14.20000  74.6%  10.9 1725s
 5140954 3642117   49.97273   65   32   56.00000   14.20000  74.6%  10.9 1730s
 5158112 3654352   48.26667   58   25   56.00000   14.20000  74.6%  10.9 1735s
 5175591 3666433   18.56667   44    6   56.00000   14.20000  74.6%  10.9 1740s
 5191115 3677151     cutoff   66        56.00000   14.20000  74.6%  10.9 1745s
 5204919 3686874   42.04626   60   18   56.00000   14.20000  74.6%  10.9 1750s
 5222318 3699139   43.82222   59   19   56.00000   14.20000  74.6%  10.9 1755s
 5240192 3711939   48.70667   81   16   56.00000   14.20000  74.6%  10.9 1760s
 5256517 3723694     cutoff   66        56.00000   14.20000  74.6%  10.9 1765s
 5276718 3737963     cutoff   78        56.00000   14.20000  74.6%  10.9 1770s
 5289371 3747096   45.64444   74   11   56.00000   14.20000  74.6%  10.9 1775s
 5307386 3759713   53.40000   73    9   56.00000   14.20000  74.6%  10.9 1780s
 5324695 3771939   45.94944   70   20   56.00000   14.20000  74.6%  10.9 1785s
 5341763 3783654   17.00000   29   10   56.00000   14.20000  74.6%  10.9 1790s
 5358877 3795649   33.80000   49   14   56.00000   14.20000  74.6%  10.9 1795s
 5375059 3807105   51.76047   69   24   56.00000   14.20000  74.6%  10.9 1800s

Explored 5375389 nodes (58556003 simplex iterations) in 1800.03 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 56 58 59 ... 78

Time limit reached
Best objective 5.600000000000e+01, best bound 1.500000000000e+01, gap 73.2143%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    551.7 MiB    551.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    551.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    551.7 MiB      0.0 MiB       m2 = m.construct()
    28    551.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    551.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    551.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    551.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    551.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    551.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    551.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    551.7 MiB      0.0 MiB       m2.update()
    44    551.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    551.7 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    551.7 MiB      0.0 MiB       if(set_binary):
    51    551.7 MiB      0.0 MiB           for x in set_binary:
    52    551.7 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    551.7 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   4450.6 MiB   3898.9 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   4450.6 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   4450.6 MiB      0.0 MiB       j = 0
    69   4450.6 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   4450.6 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   4450.6 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   4450.6 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   4450.6 MiB      0.0 MiB       if m2.status == 9:
    78   4450.6 MiB      0.0 MiB           result.timeout = True
    79   4450.6 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   4450.6 MiB      0.0 MiB           result.solution = True
    81   4450.6 MiB      0.0 MiB           result.feasible = True
    82   4450.6 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   4450.6 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   4450.6 MiB      0.0 MiB           for v in current_vars:
    85   4450.6 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   4450.6 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   4450.6 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   4450.6 MiB      0.0 MiB                   j = j+1
    91                             
    92   4450.6 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 20:22:54 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.tra,lab' -mdp /tmp/tmpba9tk02e

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.4.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpba9tk02e"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.024 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      58 (1 initial)
Transitions: 125
Choices:     112

Transition matrix: 228 nodes (3 terminal), 125 minterms, vars: 6r/6c/2nd

Prob0A: 44 iterations in 0.00 seconds (average 0.000091, setup 0.00)

Prob1E: 320 iterations in 0.01 seconds (average 0.000025, setup 0.00)

yes = 6, no = 1, maybe = 51

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=6, nodes=237] [11.1 KB]
Adding sparse bits... [levels=6-6, num=2, compact=2/2] [0.6 KB]
Creating vector for yes... [dist=2, compact] [0.1 KB]
Allocating iteration vectors... [3 x 0.5 KB]
TOTAL: [13.2 KB]

Starting iterations...

Iterative method: 2175 iterations in 0.00 seconds (average 0.000002, setup 0.00)

Value in the initial state: 0.42857142255256775

Time for model checking: 0.018 seconds.

Result: 0.42857142255256775 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [5e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   5.000000e-01   0.000000e+00      0s
     561    9.4500000e+01   0.000000e+00   0.000000e+00      0s

Solved in 561 iterations and 0.03 seconds
Optimal objective  9.450000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1784.7 MiB   1784.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1784.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1784.7 MiB      0.0 MiB       m2 = m.construct()
    28   1784.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1784.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1784.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1784.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1784.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1784.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1784.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1784.7 MiB      0.0 MiB       m2.update()
    44   1784.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1784.7 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1784.7 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1784.7 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1784.7 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1784.7 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1784.7 MiB      0.0 MiB       j = 0
    69   1784.7 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1784.7 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1784.7 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1784.7 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1784.7 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1784.7 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1784.7 MiB      0.0 MiB           result.solution = True
    81   1784.7 MiB      0.0 MiB           result.feasible = True
    82   1784.7 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1784.7 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1784.7 MiB      0.0 MiB           for v in current_vars:
    85   1784.7 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1784.7 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1784.7 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1784.7 MiB      0.0 MiB                   j = j+1
    91                             
    92   1784.7 MiB      0.0 MiB       return result, res_vec



subsystem size:205

probability: 0.5
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 20:22:55 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.tra,lab' -mdp /tmp/tmpelxhjqz3

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpelxhjqz3"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 79 iterations in 0.00 seconds (average 0.000051, setup 0.00)

Time for model construction: 0.037 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      206 (1 initial)
Transitions: 256
Choices:     207

Transition matrix: 540 nodes (3 terminal), 256 minterms, vars: 8r/8c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 90 iterations in 0.00 seconds (average 0.000044, setup 0.00)

yes = 203, no = 1, maybe = 2

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=8, nodes=39] [1.8 KB]
Adding sparse bits... [levels=8-8, num=1, compact=1/1] [0.2 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.6 KB]
TOTAL: [7.3 KB]

Starting iterations...

Iterative method: 3 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 1.0

Time for model checking: 0.01 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [5e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   5.000000e-01   0.000000e+00      0s
     561    9.4500000e+01   0.000000e+00   0.000000e+00      0s

Solved in 561 iterations and 0.03 seconds
Optimal objective  9.450000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1784.7 MiB   1784.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1784.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1784.7 MiB      0.0 MiB       m2 = m.construct()
    28   1784.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1784.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1784.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1784.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1784.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1784.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1784.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1784.7 MiB      0.0 MiB       m2.update()
    44   1784.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1784.7 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1784.7 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1784.7 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1784.7 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1784.7 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1784.7 MiB      0.0 MiB       j = 0
    69   1784.7 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1784.7 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1784.7 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1784.7 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1784.7 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1784.7 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1784.7 MiB      0.0 MiB           result.solution = True
    81   1784.7 MiB      0.0 MiB           result.feasible = True
    82   1784.7 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1784.7 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1784.7 MiB      0.0 MiB           for v in current_vars:
    85   1784.7 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1784.7 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1784.7 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1784.7 MiB      0.0 MiB                   j = j+1
    91                             
    92   1784.7 MiB      0.0 MiB       return result, res_vec



subsystem size:205

probability: 0.5
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [3e-01, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [5e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   5.000000e-01   0.000000e+00      0s
     150    1.5644353e+02   0.000000e+00   0.000000e+00      0s

Solved in 150 iterations and 0.01 seconds
Optimal objective  1.564435266e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1784.7 MiB   1784.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1784.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1784.7 MiB      0.0 MiB       m2 = m.construct()
    28   1784.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1784.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1784.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1784.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1784.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1784.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1784.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1784.7 MiB      0.0 MiB       m2.update()
    44   1784.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1784.7 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1784.7 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1784.7 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1784.7 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1784.7 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1784.7 MiB      0.0 MiB       j = 0
    69   1784.7 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1784.7 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1784.7 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1784.7 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1784.7 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1784.7 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1784.7 MiB      0.0 MiB           result.solution = True
    81   1784.7 MiB      0.0 MiB           result.feasible = True
    82   1784.7 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1784.7 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1784.7 MiB      0.0 MiB           for v in current_vars:
    85   1784.7 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1784.7 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1784.7 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1784.7 MiB      0.0 MiB                   j = j+1
    91                             
    92   1784.7 MiB      0.0 MiB       return result, res_vec



subsystem size:150

probability: 0.5
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 20:22:57 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.tra,lab' -mdp /tmp/tmpb0y5yry2

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpb0y5yry2"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 38 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.032 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      151 (1 initial)
Transitions: 188
Choices:     152

Transition matrix: 400 nodes (3 terminal), 188 minterms, vars: 8r/8c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 526 iterations in 0.02 seconds (average 0.000038, setup 0.00)

yes = 12, no = 1, maybe = 138

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=409] [19.2 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [1.0 KB]
Creating vector for yes... [dist=2, compact] [0.3 KB]
Allocating iteration vectors... [3 x 1.2 KB]
TOTAL: [24.0 KB]

Starting iterations...

Iterative method: 2574 iterations in 0.00 seconds (average 0.000002, setup 0.00)

Value in the initial state: 0.9662446798918081

Time for model checking: 0.035 seconds.

Result: 0.9662446798918081 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 287 rows and 572 columns
Presolve time: 0.00s
Presolved: 242 rows, 484 columns, 1076 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -8.0800000e+32   1.800000e+32   8.080000e+02      0s
     517   -2.4400000e+02   0.000000e+00   0.000000e+00      0s

Solved in 517 iterations and 0.01 seconds
Optimal objective -2.440000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1784.7 MiB   1784.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1784.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1784.7 MiB      0.0 MiB       m2 = m.construct()
    28   1784.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1784.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1784.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1784.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1784.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1784.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1784.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1784.7 MiB      0.0 MiB       m2.update()
    44   1784.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1784.7 MiB      0.0 MiB       if(zero_vars):
    47   1784.7 MiB      0.0 MiB           for x in zero_vars:
    48   1784.7 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1784.7 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1784.7 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1784.7 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1784.7 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1784.7 MiB      0.0 MiB       j = 0
    69   1784.7 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1784.7 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1784.7 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1784.7 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1784.7 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1784.7 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1784.7 MiB      0.0 MiB           result.solution = True
    81   1784.7 MiB      0.0 MiB           result.feasible = True
    82   1784.7 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1784.7 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1784.7 MiB      0.0 MiB           for v in current_vars:
    85   1784.7 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1784.7 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1784.7 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1784.7 MiB      0.0 MiB                   j = j+1
    91                             
    92   1784.7 MiB      0.0 MiB       return result, res_vec


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 2112 columns and 3868 nonzeros
Variable types: 1056 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 2e+02]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [5e-01, 1e+00]
Presolve removed 428 rows and 700 columns
Presolve time: 0.01s
Presolved: 1157 rows, 1412 columns, 3016 nonzeros
Variable types: 704 continuous, 708 integer (708 binary)

Root relaxation: objective 3.382992e+00, 1349 iterations, 0.11 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.38299    0  209          -    3.38299      -     -    0s
H    0     0                     247.0000000    3.38299  98.6%     -    0s
     0     2    3.38299    0  209  247.00000    3.38299  98.6%     -    1s
H    3     8                     164.0000000    3.49865  97.9%   154    4s
H    8    16                     162.0000000    3.73388  97.7%   152    4s
H    9    16                     147.0000000    3.73651  97.5%   146    4s
H   14    16                     137.0000000    3.76027  97.3%   171    4s
H   21    32                     112.0000000    4.14139  96.3%   158    4s
    31    48    4.98156    5  159  112.00000    4.14139  96.3%   148    5s
H   33    48                      91.0000000    4.16475  95.4%   142    5s
H   79    83                      82.0000000    4.16475  94.9%   105    8s
H   80    84                      74.0000000    4.16475  94.4%   104    8s
   515   493 infeasible   28        74.00000    4.16475  94.4%  33.4   10s
H  691   634                      70.0000000    4.16475  94.1%  31.3   10s
H 1302  1120                      69.0000000    4.16475  94.0%  26.8   10s
H 2352  1925                      66.0000000    4.16475  93.7%  25.1   11s
  3118  2527   43.53125   93  209   66.00000    4.77254  92.8%  25.1   15s
  3312  2656    6.06256   25   88   66.00000    5.72443  91.3%  25.1   20s
H 4127  3038                      64.0000000    5.72443  91.1%  24.5   24s
  4616  3285   23.47190   59   77   64.00000    5.72443  91.1%  24.3   25s
  8415  5215   58.25024  129   50   64.00000    5.74328  91.0%  25.9   30s
 13114  8277   46.63085  106   71   64.00000    6.03468  90.6%  25.6   35s
H14811  9531                      63.0000000    6.03833  90.4%  25.7   38s
 16266 10676   29.00301   50   78   63.00000    6.05508  90.4%  25.7   40s
 20706 14001   46.20561  114   58   63.00000    6.06037  90.4%  25.5   45s
 24864 17226   32.08889   57   67   63.00000    6.07285  90.4%  25.8   50s
 29588 20831    8.03003   32   85   63.00000    6.28214  90.0%  25.7   55s
 31447 22293   19.56291   64   91   63.00000    6.28214  90.0%  26.1   61s
 37252 26881   32.07431   52   79   63.00000    6.29930  90.0%  25.6   66s
 42020 30764    6.33385   31   99   63.00000    6.33385  89.9%  25.1   71s
 47254 34941 infeasible  124        63.00000    7.03244  88.8%  25.0   76s
 49945 37037   59.86226  118   86   63.00000    7.05397  88.8%  25.1   80s
 54380 40407   25.92213   48   93   63.00000    7.07071  88.8%  25.4   85s
 59380 44111   33.11889   72   83   63.00000    7.07945  88.8%  25.8   91s
 62322 46237 infeasible  117        63.00000    7.08568  88.8%  26.1   96s
 65974 49102   16.19043   46  121   63.00000    7.15342  88.6%  26.3  101s
 69018 51392 infeasible  117        63.00000    7.19045  88.6%  26.6  106s
 72386 53934   25.34788   53  104   63.00000    7.19045  88.6%  26.9  110s
 77297 57663   61.55548   98   78   63.00000    7.19431  88.6%  27.0  116s
 80567 59991   48.31811   74   63   63.00000    7.19431  88.6%  27.2  120s
 83433 62072   14.69830   37   94   63.00000    7.21403  88.5%  27.4  125s
 87082 64763   23.20367   47   98   63.00000    7.22418  88.5%  27.6  130s
 90492 67323 infeasible  130        63.00000    7.22708  88.5%  27.7  135s
 95713 71364    7.67457   27   91   63.00000    7.33354  88.4%  27.8  141s
 99322 74078   59.29260  102   49   63.00000    7.34934  88.3%  27.7  145s
 105380 78632    8.57656   32   99   63.00000    7.40231  88.3%  27.5  152s
 108774 81228   14.38162   36  100   63.00000    7.41520  88.2%  27.4  156s
 112597 84235   21.98837   56   80   63.00000    7.46387  88.2%  27.3  160s
 117014 87580    9.86733   32  101   63.00000    7.50864  88.1%  27.3  165s
 122025 91445   14.13019   34   96   63.00000    7.55680  88.0%  27.3  171s
 125247 93834   16.44310   47  118   63.00000    7.56040  88.0%  27.3  175s
 128857 96541   45.30368   90   86   63.00000    7.59943  87.9%  27.3  180s
 133806 100359   55.34155  100   80   63.00000    7.64840  87.9%  27.3  185s
 137171 102995   39.89758   75   46   63.00000    7.65855  87.8%  27.2  190s
 144628 108900   16.08206   43   62   63.00000    7.69489  87.8%  27.1  196s
 148941 112035   53.35734  101   56   63.00000    7.72050  87.7%  27.2  201s
 153937 115740   61.27499  109   64   63.00000    7.74398  87.7%  27.2  205s
 158791 119424   59.14439  127   60   63.00000    7.75469  87.7%  27.2  210s
 163319 122735   59.45672   75  119   63.00000    7.77720  87.7%  27.3  215s
 168523 126650   24.96103   46   68   63.00000    7.80576  87.6%  27.3  220s
 171223 128710   13.19134   37   95   63.00000    7.81629  87.6%  27.4  226s
 176579 132804   27.54741   52   63   63.00000    7.83881  87.6%  27.4  231s
 181307 136144    7.84692   32   97   63.00000    7.84692  87.5%  27.5  236s
 185980 139547   18.13178   38   90   63.00000    7.86764  87.5%  27.7  241s
 191637 143976   32.92152   73   81   63.00000    7.88611  87.5%  27.7  246s
 196715 147748   15.06656   36  101   63.00000    7.90795  87.4%  27.8  251s
 201757 151535   51.20385   99   56   63.00000    7.91400  87.4%  27.7  256s
 203552 152866     cutoff  134        63.00000    7.92470  87.4%  27.7  260s
 208579 156584   57.98114   84  103   63.00000    7.94387  87.4%  27.8  265s
 213654 160311   50.87843   97   63   63.00000    7.94868  87.4%  27.8  270s
 218691 164000   15.16324   44   77   63.00000    7.97442  87.3%  27.9  275s
 224025 167906   60.06858  105   34   63.00000    7.98228  87.3%  28.0  280s
 228984 171692   49.27457   79   53   63.00000    7.99703  87.3%  28.0  286s
 232610 174558   59.79186   99   61   63.00000    8.00273  87.3%  27.9  291s
 234615 176155 infeasible   51        63.00000    8.00273  87.3%  27.9  295s
 239171 179557   38.62057   77  153   63.00000    8.02111  87.3%  28.0  301s
 242222 181938   34.17380   57  156   63.00000    8.02361  87.3%  28.0  305s
 247536 186059 infeasible  116        63.00000    8.02389  87.3%  27.9  310s
 252241 189506   39.31769   64   56   63.00000    8.03946  87.2%  28.0  316s
 256114 192468   17.70463   50   95   63.00000    8.04010  87.2%  28.0  321s
 259178 194684   46.83819   76   52   63.00000    8.05231  87.2%  28.0  325s
 264115 198468   13.08686   32   97   63.00000    8.05977  87.2%  28.0  331s
 267298 200878   61.11191  124   41   63.00000    8.06203  87.2%  28.1  335s
 270852 203477   59.87421   99  120   63.00000    8.07075  87.2%  28.1  342s
 271175 203743 infeasible  100        63.00000    8.07294  87.2%  28.1  345s
 276260 207484 infeasible  118        63.00000    8.07797  87.2%  28.2  352s
 279936 210319   19.91888   43   81   63.00000    8.08153  87.2%  28.3  356s
 282743 212290   50.17868   99   53   63.00000    8.08153  87.2%  28.4  361s
 286132 214762   48.15930   86   88   63.00000    8.09184  87.2%  28.4  365s
 290590 217975 infeasible  127        63.00000    8.09187  87.2%  28.6  371s
 294107 220538 infeasible   85        63.00000    8.10382  87.1%  28.7  376s
 297535 223174   50.39976   91   48   63.00000    8.11193  87.1%  28.7  381s
 301631 226353   55.85849   96   76   63.00000    8.11666  87.1%  28.7  386s
 302974 227323   14.17273   32   96   63.00000    8.11864  87.1%  28.7  390s
 308377 231498   45.11318   87   76   63.00000    8.12342  87.1%  28.7  396s
 313484 235314   57.69988  105   75   63.00000    8.13592  87.1%  28.8  401s
 316884 237954   16.75186   35  111   63.00000    8.14424  87.1%  28.8  405s
 321781 241691   51.40684   98   69   63.00000    8.15134  87.1%  28.8  411s
 326447 245141   17.10607   49  101   63.00000    8.16125  87.0%  28.9  416s
 329985 247886    8.28108   30  119   63.00000    8.16605  87.0%  28.9  420s
 334895 251668   31.35082   64  138   63.00000    8.17136  87.0%  28.9  427s
 336847 253187   59.47176   92  129   63.00000    8.17136  87.0%  29.0  431s
 340074 255495   34.34581   53   57   63.00000    8.17445  87.0%  29.0  435s
 345251 259513   20.63904   40  116   63.00000    8.18893  87.0%  29.0  441s
 349982 263033   23.30735   56   94   63.00000    8.19470  87.0%  29.1  446s
 352884 265151   47.13729   93   66   63.00000    8.19470  87.0%  29.2  450s
 358147 269257   54.59004  118   67   63.00000    8.20492  87.0%  29.2  455s
 361468 271820    9.92982   32   94   63.00000    8.20896  87.0%  29.3  460s
 366461 275768   58.19142  111   77   63.00000    8.21086  87.0%  29.3  466s
 369900 278313   56.67689  114   71   63.00000    8.21204  87.0%  29.4  470s
 372956 280493   58.12324  109   49   63.00000    8.21921  87.0%  29.4  476s
 376108 282703   15.62239   41  127   63.00000    8.22457  86.9%  29.5  480s
 380714 286054 infeasible   31        63.00000    8.23356  86.9%  29.6  486s
 383999 288289   61.06270  116   79   63.00000    8.24002  86.9%  29.7  491s
 387401 290810   25.87266   56   98   63.00000    8.24256  86.9%  29.8  496s
 392912 295075   33.96236   67   66   63.00000    8.24921  86.9%  29.9  501s
 396222 297603   55.22416  103   39   63.00000    8.25874  86.9%  29.9  505s
 398049 298844 infeasible   35        63.00000    8.25962  86.9%  29.9  510s
 402746 302346   61.34095   86   70   63.00000    8.26526  86.9%  30.0  517s
 406136 304684   54.56595   75   88   63.00000    8.27393  86.9%  30.1  521s
 410172 307771 infeasible  115        63.00000    8.27393  86.9%  30.1  525s
 415473 311732   26.97907   65   62   63.00000    8.28584  86.8%  30.2  531s
 418125 313707   47.88770   89   85   63.00000    8.28688  86.8%  30.3  535s
 423166 317336   41.26219   86   41   63.00000    8.29645  86.8%  30.3  542s
 426374 319605   58.13745  110   45   63.00000    8.30325  86.8%  30.4  545s
 431517 323418   58.01336  108   85   63.00000    8.30970  86.8%  30.4  553s
 431816 323616   58.99661  109   84   63.00000    8.30970  86.8%  30.4  555s
 436926 327388   26.93880   64   98   63.00000    8.31660  86.8%  30.5  561s
 440463 329911   23.34937   54   66   63.00000    8.32063  86.8%  30.6  565s
 445509 333475   23.87469   45   60   63.00000    8.32594  86.8%  30.6  571s
 449101 336230   39.75112   85   56   63.00000    8.32875  86.8%  30.6  576s
 452317 338651 infeasible  128        63.00000    8.32875  86.8%  30.7  580s
 456184 341482   54.54802  100   86   63.00000    8.34088  86.8%  30.7  585s
 461235 345303   51.48071   84  181   63.00000    8.34492  86.8%  30.7  591s
 464699 347806   47.14210   85  110   63.00000    8.34924  86.7%  30.7  597s
 466654 349288   59.26262  110   82   63.00000    8.35081  86.7%  30.7  601s
 470024 351753   36.87372   70   62   63.00000    8.35835  86.7%  30.7  606s
 473634 354419   21.88782   56  100   63.00000    8.36096  86.7%  30.7  610s
 478763 358361   49.15500   96   61   63.00000    8.36850  86.7%  30.8  617s
 482249 361007 infeasible  115        63.00000    8.37098  86.7%  30.8  621s
 485610 363417    8.40228   31   94   63.00000    8.38121  86.7%  30.8  626s
 488769 365706 infeasible   90        63.00000    8.38409  86.7%  30.8  630s
 494253 369962   51.21132   99   53   63.00000    8.39309  86.7%  30.8  635s
 498885 373370   42.49298   72   71   63.00000    8.39953  86.7%  30.8  640s
 502703 376200   52.12908   82   54   63.00000    8.40453  86.7%  30.8  645s
 505843 378654   17.34411   40   93   63.00000    8.40799  86.7%  30.8  650s
 511410 382853 infeasible   50        63.00000    8.41635  86.6%  30.7  656s
 515982 386186   39.24684   67   43   63.00000    8.42298  86.6%  30.8  661s
 521489 390271   59.51782   98   72   63.00000    8.42868  86.6%  30.7  666s
 526166 393745   46.25752   83  127   63.00000    8.43325  86.6%  30.7  671s
 529298 396013    8.44685   34   88   63.00000    8.44277  86.6%  30.8  675s
 534135 399739   49.66939   88   41   63.00000    8.45155  86.6%  30.7  680s
 538840 403146   46.45738   78   77   63.00000    8.45987  86.6%  30.8  685s
 542466 405885   48.28146   76  135   63.00000    8.46266  86.6%  30.8  690s
 545296 407914   55.17635   95   68   63.00000    8.47081  86.6%  30.8  695s
 551225 412404   19.94596   61   92   63.00000    8.48119  86.5%  30.8  701s
 554748 415070   21.43146   47  105   63.00000    8.48881  86.5%  30.8  705s
 559773 418826   13.24718   38  103   63.00000    8.49758  86.5%  30.8  710s
 564324 422046   14.68323   40   65   63.00000    8.50316  86.5%  30.8  715s
 569412 425784   48.88873   81   82   63.00000    8.51217  86.5%  30.8  720s
 575051 430134   52.71516   90   42   63.00000    8.52012  86.5%  30.8  726s
 580253 434152   43.79424   91   55   63.00000    8.52624  86.5%  30.8  733s
 582065 435535   56.24801  101   64   63.00000    8.53210  86.5%  30.8  736s
 586847 439076   59.14197  120   54   63.00000    8.53709  86.4%  30.8  741s
 590061 441386   47.98458   94   89   63.00000    8.54445  86.4%  30.8  745s
 594661 444661   60.47165  116   69   63.00000    8.54995  86.4%  30.8  751s
 600050 448818   10.45605   33   85   63.00000    8.55826  86.4%  30.8  756s
 605226 452642   57.20733  107   40   63.00000    8.56249  86.4%  30.8  761s
 609855 455984    9.61413   34   78   63.00000    8.56568  86.4%  30.8  766s
 614701 459520   53.36989   87   59   63.00000    8.57376  86.4%  30.8  771s
 617912 461963   55.15120   98   24   63.00000    8.57813  86.4%  30.8  778s
 618050 462012   61.16179  119   44   63.00000    8.57917  86.4%  30.8  780s
 622713 465429   17.40294   45   84   63.00000    8.58372  86.4%  30.9  786s
 626118 467912   57.12498  101   28   63.00000    8.58452  86.4%  30.9  790s
 631012 471420   30.30109   63   63   63.00000    8.59343  86.4%  30.9  796s
 635416 474570   59.16839   92   56   63.00000    8.59632  86.4%  31.0  801s
 638558 476839   10.25309   30  114   63.00000    8.60409  86.3%  31.0  805s
 643974 480954   59.26212  110   63   63.00000    8.61542  86.3%  31.0  811s
 649287 484962     cutoff   99        63.00000    8.62011  86.3%  31.0  816s
 652602 487515   48.74279   80   41   63.00000    8.62685  86.3%  31.0  821s
 655031 489323   55.75963   95   57   63.00000    8.62875  86.3%  31.0  825s
 660303 493271     cutoff  133        63.00000    8.63317  86.3%  31.0  831s
 663354 495502   58.65644  126   60   63.00000    8.63317  86.3%  31.1  835s
 669125 499938   43.29785   74   77   63.00000    8.64375  86.3%  31.1  840s
 674439 503830   47.17453   79  121   63.00000    8.65174  86.3%  31.1  846s
 679536 507527   61.92985   93  130   63.00000    8.65625  86.3%  31.1  851s
 681385 509051   49.34254   91   69   63.00000    8.65737  86.3%  31.1  855s
 686080 512579   33.92939   67   64   63.00000    8.66672  86.2%  31.1  861s
 691698 516929   39.44429   70   82   63.00000    8.67044  86.2%  31.1  866s
 696331 520545   31.38761   52   50   63.00000    8.67482  86.2%  31.1  871s
 700229 523516    8.99829   32   77   63.00000    8.67614  86.2%  31.0  875s
 706435 528049   44.81627   85   64   63.00000    8.68380  86.2%  31.0  881s
 711913 532212   59.19712  111   38   63.00000    8.68528  86.2%  31.0  886s
 714481 534043   51.16641   92   30   63.00000    8.69160  86.2%  31.1  890s
 718074 536663   10.32441   35   91   63.00000    8.69472  86.2%  31.0  896s
 723553 540694   61.27606   86  101   63.00000    8.69823  86.2%  31.1  901s
 726764 543117   58.15022  117   45   63.00000    8.70175  86.2%  31.1  905s
 732220 547296   55.54234  102   59   63.00000    8.70873  86.2%  31.0  910s
 738882 552349   22.00355   48   58   63.00000    8.71433  86.2%  31.1  916s
 743014 555223   45.40577   91   66   63.00000    8.71644  86.2%  31.1  922s
 745793 557176   10.35874   34  132   63.00000    8.72272  86.2%  31.2  925s
 747269 558229   17.25983   46  117   63.00000    8.72272  86.2%  31.2  930s
 752894 562433   52.24374   96   56   63.00000    8.72932  86.1%  31.2  936s
 756744 565404   16.96288   44  100   63.00000    8.73024  86.1%  31.2  940s
 761935 569261   29.80117   53   97   63.00000    8.73605  86.1%  31.2  945s
 765931 572281   38.35559   68   44   63.00000    8.74152  86.1%  31.2  950s
 771283 576453   31.30903   51   51   63.00000    8.74334  86.1%  31.2  955s
 777731 581215   11.32118   35  100   63.00000    8.75025  86.1%  31.2  961s
 782237 584729   20.97633   54   95   63.00000    8.75284  86.1%  31.2  966s
 785471 587169   33.78096   71  103   63.00000    8.75815  86.1%  31.2  971s
 786873 588111   43.36306   87   94   63.00000    8.75885  86.1%  31.2  975s
 792605 592538   45.20333   94   42   63.00000    8.76594  86.1%  31.2  980s
 797948 596495   18.95897   55  109   63.00000    8.77232  86.1%  31.2  985s
 803006 600376   57.28779  102   50   63.00000    8.77956  86.1%  31.2  990s
 807741 603859   60.48534  113   61   63.00000    8.78386  86.1%  31.2  996s
 812595 607483   56.20662  113   42   63.00000    8.78902  86.0%  31.2 1001s
 818033 611662    9.58543   35   96   63.00000    8.79376  86.0%  31.2 1006s
 822791 615252   11.04742   34   76   63.00000    8.79656  86.0%  31.2 1010s
 825854 617584   43.27526   74   45   63.00000    8.79951  86.0%  31.2 1016s
 828796 619734   49.30108   74   41   63.00000    8.80299  86.0%  31.3 1021s
 834416 624080   59.13288  104   38   63.00000    8.81001  86.0%  31.3 1026s
 836354 625504   51.78006   96   65   63.00000    8.81225  86.0%  31.3 1030s
 841248 629175 infeasible  110        63.00000    8.81427  86.0%  31.3 1035s
 846633 633292   51.50973   78  136   63.00000    8.82013  86.0%  31.3 1041s
 850864 636548 infeasible  129        63.00000    8.82369  86.0%  31.3 1045s
 855836 640388   57.13475   80  113   63.00000    8.83029  86.0%  31.3 1050s
 861131 644460   35.34311   61   61   63.00000    8.83464  86.0%  31.3 1055s
 865572 647586   60.58181   82   71   63.00000    8.83709  86.0%  31.3 1061s
 871218 651898   18.76990   41   85   63.00000    8.84145  86.0%  31.3 1066s
 874456 654227   26.71457   55   75   63.00000    8.84313  86.0%  31.3 1070s
 879713 658150   10.52777   35  119   63.00000    8.84791  86.0%  31.3 1075s
 884382 661659   17.13588   44   58   63.00000    8.85265  85.9%  31.3 1081s
 889215 665365 infeasible   91        63.00000    8.85600  85.9%  31.3 1086s
 892101 667327   14.22227   42   78   63.00000    8.85792  85.9%  31.3 1090s
 895816 670081   60.29926  117   85   63.00000    8.86074  85.9%  31.4 1095s
 900566 673510   17.13458   50   66   63.00000    8.86553  85.9%  31.4 1101s
 903306 675451   53.41692  110   73   63.00000    8.86920  85.9%  31.4 1105s
 909209 679928   49.69805  100   86   63.00000    8.87557  85.9%  31.4 1110s
 914790 684269   57.26753   96   53   63.00000    8.87901  85.9%  31.4 1116s
 917897 686431   10.29043   37  100   63.00000    8.88350  85.9%  31.4 1120s
 922948 690153   41.81134   69   52   63.00000    8.89006  85.9%  31.4 1125s
 926687 693067   57.35341   91   61   63.00000    8.89501  85.9%  31.4 1131s
 931918 696899   41.91132   88   69   63.00000    8.89657  85.9%  31.4 1136s
 935503 699708   39.34144   78   64   63.00000    8.89899  85.9%  31.4 1140s
 940550 703616 infeasible  104        63.00000    8.90107  85.9%  31.4 1145s
 945405 707177    9.91031   35   79   63.00000    8.90691  85.9%  31.4 1150s
 949702 710298   23.92038   50   50   63.00000    8.90768  85.9%  31.5 1155s
 954300 713707   38.38758   83   80   63.00000    8.90842  85.9%  31.5 1160s
 957705 716227   28.08440   55   66   63.00000    8.91441  85.9%  31.5 1166s
 961616 719182   53.12348   89   32   63.00000    8.91638  85.8%  31.5 1171s
 964254 720957   15.76801   36  106   63.00000    8.91862  85.8%  31.5 1175s
 969106 724597   59.54072  109   55   63.00000    8.92217  85.8%  31.6 1180s
 974071 728070   54.22184  103   61   63.00000    8.92408  85.8%  31.6 1186s
 977870 730783    8.92408   35  108   63.00000    8.92408  85.8%  31.6 1191s
 982856 734539   55.20249  108   41   63.00000    8.92878  85.8%  31.6 1196s
 986426 737120   27.94452   55   77   63.00000    8.92997  85.8%  31.6 1200s
 990570 740130   40.24709   80   74   63.00000    8.93132  85.8%  31.7 1206s
 993939 742627 infeasible   49        63.00000    8.93666  85.8%  31.7 1210s
 997896 745581 infeasible   86        63.00000    8.93857  85.8%  31.7 1216s
 1002063 748831 infeasible  113        63.00000    8.94037  85.8%  31.7 1220s
 1006671 752200   17.82561   45   95   63.00000    8.94387  85.8%  31.7 1226s
 1009343 754079   56.81880   93   74   63.00000    8.94763  85.8%  31.8 1230s
 1014754 758224   16.16748   45   79   63.00000    8.94942  85.8%  31.8 1236s
 1020351 762303   19.87291   41   94   63.00000    8.95187  85.8%  31.8 1241s
 1023795 764841   48.86562   80   76   63.00000    8.95627  85.8%  31.8 1245s
 1026449 766882   30.29437   61   84   63.00000    8.95757  85.8%  31.8 1251s
 1029730 769404   57.13097  115   46   63.00000    8.95871  85.8%  31.8 1255s
 1034606 772960   51.51707   87  134   63.00000    8.95871  85.8%  31.8 1260s
 1038070 775388 infeasible   45        63.00000    8.96441  85.8%  31.8 1265s
 1043347 779333   44.38173   78   58   63.00000    8.96698  85.8%  31.8 1271s
 1049127 783746   47.14910   89   64   63.00000    8.97004  85.8%  31.8 1276s
 1054077 787397   59.26562  101   62   63.00000    8.97417  85.8%  31.8 1281s
 1058845 790950    9.42869   29   82   63.00000    8.97766  85.7%  31.8 1286s
 1063890 794933   53.15173   97   38   63.00000    8.98003  85.7%  31.8 1292s
 1067228 797444 infeasible   43        63.00000    8.98159  85.7%  31.8 1295s
 1070023 799386   49.19593   69   45   63.00000    8.98175  85.7%  31.9 1301s
 1073520 802031   58.14340  115   53   63.00000    8.98381  85.7%  31.9 1305s
 1078681 805839    8.98580   32  102   63.00000    8.98580  85.7%  31.9 1310s
 1083587 809534   59.23109   81   53   63.00000    8.99003  85.7%  31.9 1316s
 1086658 811750   61.25679   98   57   63.00000    8.99188  85.7%  31.9 1320s
 1091315 815115   44.39049   72   55   63.00000    8.99499  85.7%  31.9 1325s
 1096128 818673 infeasible  116        63.00000    8.99674  85.7%  31.9 1331s
 1099058 820830   38.30551   90   62   63.00000    8.99703  85.7%  32.0 1335s
 1104531 824917   26.89727   54   54   63.00000    9.00137  85.7%  32.0 1340s
 1106617 826465   45.53843   97   77   63.00000    9.00222  85.7%  32.0 1345s
 1111906 830476   36.40023   80   64   63.00000    9.00393  85.7%  32.0 1351s
 1114851 832524   19.08924   50  118   63.00000    9.00569  85.7%  32.0 1355s
 1119684 836019 infeasible   33        63.00000    9.00825  85.7%  32.1 1361s
 1123510 838961   20.75466   52  110   63.00000    9.00950  85.7%  32.1 1365s
 1128977 843120   47.39643   85   41   63.00000    9.01271  85.7%  32.1 1371s
 1133602 846577   39.31044   64   54   63.00000    9.01363  85.7%  32.1 1376s
 1136118 848544   33.32013   61   96   63.00000    9.01475  85.7%  32.1 1381s
 1138160 850064 infeasible  109        63.00000    9.01502  85.7%  32.1 1386s
 1141533 852621 infeasible   36        63.00000    9.01748  85.7%  32.1 1390s
 1146730 856461   57.88167   99  132   63.00000    9.01997  85.7%  32.1 1396s
 1150392 859206 infeasible   44        63.00000    9.02247  85.7%  32.1 1400s
 1156271 863756   57.17186   96   59   63.00000    9.02480  85.7%  32.1 1406s
 1161714 867991   25.94125   55   58   63.00000    9.02620  85.7%  32.1 1411s
 1163319 869134   61.23317  109   34   63.00000    9.02620  85.7%  32.1 1416s
 1167734 872337   29.71960   62  105   63.00000    9.03039  85.7%  32.1 1421s
 1171021 874807   36.31363   61   48   63.00000    9.03095  85.7%  32.1 1425s
 1176006 878447 infeasible   76        63.00000    9.03315  85.7%  32.1 1430s
 1180402 881520   24.47790   50   96   63.00000    9.03587  85.7%  32.2 1436s
 1183769 884048   55.11416  119   47   63.00000    9.03688  85.7%  32.2 1440s
 1189008 887856   58.26527  100   48   63.00000    9.03968  85.7%  32.2 1446s
 1192547 890522     cutoff  109        63.00000    9.04082  85.6%  32.2 1450s
 1197784 894305   17.08320   44   88   63.00000    9.04229  85.6%  32.2 1455s
 1202532 897726   14.23189   42   87   63.00000    9.04547  85.6%  32.2 1460s
 1207571 901458 infeasible  106        63.00000    9.04801  85.6%  32.2 1465s
 1209320 902725   27.86724   57   95   63.00000    9.04925  85.6%  32.2 1470s
 1214247 906367   59.44685  103  117   63.00000    9.05214  85.6%  32.2 1476s
 1218040 909224   57.99232  111   90   63.00000    9.05367  85.6%  32.2 1480s
 1223455 913405   28.11178   63  100   63.00000    9.05540  85.6%  32.2 1485s
 1228479 917116   61.26157  112   56   63.00000    9.05798  85.6%  32.2 1490s
 1233402 920723   19.16421   45   81   63.00000    9.05945  85.6%  32.2 1495s
 1237501 923717   60.69718  102   34   63.00000    9.05945  85.6%  32.3 1501s
 1241045 926324   11.86648   37   90   63.00000    9.06203  85.6%  32.3 1505s
 1245762 929768     cutoff  100        63.00000    9.06365  85.6%  32.3 1510s
 1249042 932143   44.15551   85   60   63.00000    9.06451  85.6%  32.3 1516s
 1252673 934798   21.99618   44   59   63.00000    9.06616  85.6%  32.3 1520s
 1256213 937483   17.09380   46   90   63.00000    9.06715  85.6%  32.3 1525s
 1261446 941412   28.42673   69   57   63.00000    9.06870  85.6%  32.3 1530s
 1265922 944724   13.49703   44  110   63.00000    9.07009  85.6%  32.3 1536s
 1269608 947589   14.20336   41   74   63.00000    9.07221  85.6%  32.3 1540s
 1274517 951202   57.18457  101  112   63.00000    9.07252  85.6%  32.4 1546s
 1277899 953765   60.13544   99   88   63.00000    9.07504  85.6%  32.4 1551s
 1281575 956507   47.81625   82   58   63.00000    9.07708  85.6%  32.4 1556s
 1284696 958851   31.37456   57   53   63.00000    9.07759  85.6%  32.4 1560s
 1290029 962790   24.01391   57   58   63.00000    9.08068  85.6%  32.4 1566s
 1294659 966336 infeasible   97        63.00000    9.08204  85.6%  32.4 1571s
 1298272 968970   55.35766   99   59   63.00000    9.08204  85.6%  32.4 1576s
 1301388 971287   47.33660   98   56   63.00000    9.08487  85.6%  32.4 1580s
 1306550 975141 infeasible   80        63.00000    9.08624  85.6%  32.5 1585s
 1311800 979032   19.17014   47  110   63.00000    9.08839  85.6%  32.5 1591s
 1314761 981297   54.22337   97   54   63.00000    9.08846  85.6%  32.5 1596s
 1316997 982915 infeasible   92        63.00000    9.09126  85.6%  32.5 1600s
 1322340 986811    9.23761   32   98   63.00000    9.09351  85.6%  32.5 1606s
 1327726 990994   57.15552   99   33   63.00000    9.09527  85.6%  32.5 1611s
 1331135 993440   44.23356   73   59   63.00000    9.09694  85.6%  32.5 1615s
 1335771 996782   13.28826   36  116   63.00000    9.09866  85.6%  32.5 1620s
 1340403 1000024   36.87585   80  143   63.00000    9.09944  85.6%  32.5 1627s
 1343631 1002414 infeasible  117        63.00000    9.10177  85.6%  32.6 1630s
 1348303 1005682 infeasible   73        63.00000    9.10299  85.6%  32.6 1637s
 1350713 1007519   47.39898   82   75   63.00000    9.10434  85.5%  32.6 1641s
 1354612 1010486     cutoff  109        63.00000    9.10592  85.5%  32.6 1645s
 1359780 1014217   11.15431   33   94   63.00000    9.10765  85.5%  32.6 1650s
 1362964 1016502   60.50680  110   73   63.00000    9.10990  85.5%  32.6 1655s
 1368915 1021094 infeasible   66        63.00000    9.11159  85.5%  32.6 1660s
 1373555 1024483   51.24047   88   62   63.00000    9.11327  85.5%  32.6 1665s
 1377951 1027810   58.08463  119   47   63.00000    9.11490  85.5%  32.6 1671s
 1379879 1029232   45.32314   74   35   63.00000    9.11713  85.5%  32.6 1675s
 1384967 1033072   51.21093   78   49   63.00000    9.12068  85.5%  32.7 1680s
 1389806 1036583   11.88495   36  113   63.00000    9.12190  85.5%  32.7 1686s
 1392805 1038804   36.42023   55   76   63.00000    9.12358  85.5%  32.7 1690s
 1399495 1044035     cutoff  101        63.00000    9.12622  85.5%  32.7 1696s
 1404013 1047432   44.38876   64   71   63.00000    9.12696  85.5%  32.7 1701s
 1407561 1050134   12.33929   39  133   63.00000    9.12957  85.5%  32.7 1705s
 1412708 1054040   22.16942   51   57   63.00000    9.13224  85.5%  32.7 1710s
 1417328 1057413    9.22426   30   97   63.00000    9.13437  85.5%  32.7 1716s
 1419487 1059038   56.17723  109   69   63.00000    9.13437  85.5%  32.7 1720s
 1424333 1062679   24.72483   49   82   63.00000    9.13639  85.5%  32.7 1725s
 1429336 1066443   24.77070   55   75   63.00000    9.14013  85.5%  32.7 1731s
 1432399 1068599   43.40998   71   76   63.00000    9.14195  85.5%  32.7 1735s
 1437341 1072213   10.06579   30   96   63.00000    9.14425  85.5%  32.7 1741s
 1442390 1075797   26.27534   64   90   63.00000    9.14540  85.5%  32.7 1746s
 1445926 1078325   21.94557   51  116   63.00000    9.14817  85.5%  32.7 1750s
 1451104 1082218   10.59068   36   89   63.00000    9.15086  85.5%  32.7 1756s
 1455532 1085472   18.57536   43  103   63.00000    9.15181  85.5%  32.7 1764s
 1455722 1085558   20.54654   48  104   63.00000    9.15181  85.5%  32.8 1766s
 1458851 1087790     cutoff   83        63.00000    9.15393  85.5%  32.8 1770s
 1463951 1091466   27.59981   55   76   63.00000    9.15587  85.5%  32.8 1776s
 1468667 1094940   58.07849  104   66   63.00000    9.15682  85.5%  32.8 1782s
 1472602 1097871   29.81294   65   93   63.00000    9.15849  85.5%  32.8 1786s
 1476040 1100517   34.96480   57   88   63.00000    9.15934  85.5%  32.8 1790s
 1481104 1104335   11.64381   31  104   63.00000    9.16153  85.5%  32.8 1795s
 1485911 1107941   17.00687   43  115   63.00000    9.16343  85.5%  32.8 1800s

Explored 1486541 nodes (48779002 simplex iterations) in 1800.19 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 63 64 66 ... 137

Time limit reached
Best objective 6.300000000000e+01, best bound 1.000000000000e+01, gap 84.1270%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1784.7 MiB   1784.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1784.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1784.7 MiB      0.0 MiB       m2 = m.construct()
    28   1784.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1784.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1784.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1784.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1784.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1784.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1784.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1784.7 MiB      0.0 MiB       m2.update()
    44   1784.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1784.7 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1784.7 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1784.7 MiB      0.0 MiB       if(find_optimum):
    55   1784.7 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56   1784.7 MiB      0.0 MiB           m2.update()
    57   1784.7 MiB      0.0 MiB           new_obj = LinExpr(0)
    58   1784.7 MiB      0.0 MiB           for var in current_vars:
    59   1784.7 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60   1784.7 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61   1784.7 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62   1784.7 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1585.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1585.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1585.3 MiB      0.0 MiB       j = 0
    69   1585.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1585.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1585.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1585.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1585.3 MiB      0.0 MiB       if m2.status == 9:
    78   1585.3 MiB      0.0 MiB           result.timeout = True
    79   1585.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1585.3 MiB      0.0 MiB           result.solution = True
    81   1585.3 MiB      0.0 MiB           result.feasible = True
    82   1585.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1585.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1585.3 MiB      0.0 MiB           for v in current_vars:
    85   1585.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1585.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1585.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89   1585.3 MiB      0.0 MiB                       res_vec[j] = 0
    90   1585.3 MiB      0.0 MiB                   j = j+1
    91                             
    92   1585.3 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 20:53:01 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.tra,lab' -mdp /tmp/tmp0zc795n0

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp0zc795n0"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.022 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      65 (1 initial)
Transitions: 80
Choices:     65

Transition matrix: 242 nodes (3 terminal), 80 minterms, vars: 7r/7c/1nd

Prob0A: 51 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 427 iterations in 0.01 seconds (average 0.000019, setup 0.00)

yes = 6, no = 1, maybe = 58

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=7, nodes=235] [11.0 KB]
Adding sparse bits... [levels=7-7, num=1, compact=1/1] [0.4 KB]
Creating vector for yes... [dist=2, compact] [0.1 KB]
Allocating iteration vectors... [3 x 0.5 KB]
TOTAL: [13.0 KB]

Starting iterations...

Iterative method: 2806 iterations in 0.00 seconds (average 0.000001, setup 0.00)

Value in the initial state: 0.4999999918444087

Time for model checking: 0.019 seconds.

Result: 0.4999999918444087 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 1584 columns and 4117 nonzeros
Variable types: 528 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [5e-01, 2e+00]
Presolve removed 289 rows and 280 columns
Presolve time: 0.01s
Presolved: 1296 rows, 1304 columns, 3548 nonzeros
Variable types: 486 continuous, 818 integer (818 binary)

Root relaxation: objective 5.000000e-01, 1 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.50000    0    1          -    0.50000      -     -    0s
     0     2    2.00000    0    2          -    2.00000      -     -    0s
H 2385  2164                      85.0000000    5.50000  93.5%   7.8    1s
H 2820  2505                      82.0000000    6.00000  92.7%   7.8    2s
H 2844  2515                      77.0000000    6.00000  92.2%   7.8    2s
H 2845  2499                      73.0000000    6.00000  91.8%   7.8    2s
H 2960  2501                      72.0000000    6.00000  91.7%   7.8    3s
  6490  4272   21.00000   32    8   72.00000    6.00000  91.7%   8.9    5s
H16294 10893                      71.0000000    8.00000  88.7%   8.7    9s
H16371 10896                      70.0000000    8.00000  88.6%   8.7    9s
 17842 12018   39.00000   49   13   70.00000    8.00000  88.6%   9.0   10s
 32743 23117 infeasible   52        70.00000    9.00000  87.1%   9.3   15s
 51347 37048   64.55556   52   41   70.00000    9.00000  87.1%   9.5   20s
 68795 49987   40.50000   65   13   70.00000    9.66667  86.2%   9.9   25s
 81422 59602   52.00000   51   13   70.00000    9.83333  86.0%  10.1   30s
 95229 69998 infeasible   92        70.00000   10.00000  85.7%  10.1   35s
H98899 72511                      69.0000000   10.00000  85.5%  10.2   37s
 105394 77351   66.90000  102   16   69.00000   10.00000  85.5%  10.2   40s
 118211 87019   65.50000   73   15   69.00000   10.00000  85.5%  10.4   45s
 130584 96249   36.00000   52    9   69.00000   10.00000  85.5%  10.4   50s
 146609 108382   56.33333   65   10   69.00000   10.41667  84.9%  10.5   55s
 159057 117448   57.33401   71   15   69.00000   10.62500  84.6%  10.6   60s
H159062 116821                      68.0000000   10.62500  84.4%  10.6   60s
 167857 123152   12.66667   32    6   68.00000   10.66667  84.3%  10.8   65s
 184043 135152   50.71995   75   25   68.00000   10.83333  84.1%  10.8   70s
 199637 146733 infeasible   61        68.00000   11.00000  83.8%  10.9   75s
 217138 159684   62.33333   71   13   68.00000   11.00000  83.8%  10.9   80s
 230330 169369   21.37500   44   13   68.00000   11.00000  83.8%  11.0   85s
 240726 177128   28.33333   37   17   68.00000   11.00000  83.8%  11.0   90s
 252951 186291 infeasible   87        68.00000   11.00000  83.8%  11.0   95s
 263534 194002   40.50000   46   14   68.00000   11.00000  83.8%  11.1  100s
 275323 202452   28.16667   45   15   68.00000   11.00000  83.8%  11.2  105s
 288330 212002   13.00000   33    2   68.00000   11.33333  83.3%  11.2  110s
 304634 223866   47.00000   61    8   68.00000   11.33333  83.3%  11.2  115s
 320071 234885 infeasible   52        68.00000   11.50000  83.1%  11.2  120s
 333027 244315   65.03186   78   17   68.00000   11.50000  83.1%  11.2  125s
 347232 254631   26.90741   49    9   68.00000   11.62500  82.9%  11.3  130s
 359192 263130   58.35706   88   32   68.00000   11.66667  82.8%  11.3  135s
 369316 270314   42.47980   68   11   68.00000   11.66667  82.8%  11.4  140s
 383271 280554   65.00000   76   14   68.00000   11.66667  82.8%  11.4  145s
 399253 292248   21.66667   37   12   68.00000   11.75000  82.7%  11.4  150s
 413645 302588   46.15649   54   20   68.00000   11.83333  82.6%  11.4  155s
 428695 313572   18.56061   41    7   68.00000   12.00000  82.4%  11.4  160s
 440796 322320   13.66667   34    7   68.00000   12.00000  82.4%  11.4  165s
 455993 333237   37.00000   44   13   68.00000   12.00000  82.4%  11.5  170s
 471890 344818   50.33333   49   12   68.00000   12.00000  82.4%  11.5  175s
 487377 356396 infeasible   67        68.00000   12.00000  82.4%  11.5  180s
 501674 366849   52.89101   72   21   68.00000   12.00000  82.4%  11.5  185s
 519137 379554   38.50000   46   22   68.00000   12.00000  82.4%  11.5  190s
 533320 389804   40.83333   48   13   68.00000   12.00000  82.4%  11.6  195s
 549626 401705   51.00000   55   10   68.00000   12.00000  82.4%  11.6  200s
 564225 412383   45.12500   63   15   68.00000   12.00000  82.4%  11.6  205s
 581791 424989   36.56057   46   20   68.00000   12.25000  82.0%  11.6  210s
 599416 437732   45.36250   61   24   68.00000   12.33333  81.9%  11.6  215s
 611728 446518   64.33333   70   10   68.00000   12.33333  81.9%  11.6  220s
 632474 461442   61.20536   89   16   68.00000   12.33333  81.9%  11.6  225s
 651281 475432 infeasible   95        68.00000   12.33333  81.9%  11.7  230s
 664046 484696   17.50000   40    4   68.00000   12.41667  81.7%  11.7  235s
 678511 494997     cutoff   47        68.00000   12.50000  81.6%  11.6  240s
 693897 505985   58.00000   68    8   68.00000   12.50000  81.6%  11.7  245s
 709022 516949 infeasible   56        68.00000   12.50000  81.6%  11.7  250s
 724438 527691 infeasible   80        68.00000   12.50000  81.6%  11.7  255s
 737249 536677   56.02540   83   27   68.00000   12.58333  81.5%  11.7  260s
 752321 547441   32.91667   62   19   68.00000   12.66667  81.4%  11.7  265s
 766891 557833   17.33333   36   10   68.00000   12.66667  81.4%  11.7  270s
 776146 564448   30.22222   58   12   68.00000   12.66667  81.4%  11.7  275s
 792329 575728   30.25000   58   10   68.00000   12.66667  81.4%  11.8  280s
 803570 583740   64.23410   37   60   68.00000   12.66667  81.4%  11.8  285s
 817281 593263   37.58333   52   14   68.00000   12.66667  81.4%  11.8  290s
 833125 604632   24.33333   41   14   68.00000   12.66667  81.4%  11.8  295s
 849908 616265   21.08333   41    7   68.00000   12.66667  81.4%  11.8  300s
 869382 630459   35.65608   61   11   68.00000   12.83333  81.1%  11.8  305s
 876720 635733   50.33333   64   15   68.00000   12.83333  81.1%  11.8  310s
 886537 642819     cutoff   75        68.00000   12.83333  81.1%  11.8  315s
 896899 650087   45.81061   66   33   68.00000   12.83333  81.1%  11.8  320s
 907709 657786   46.05660   79   13   68.00000   12.83333  81.1%  11.9  325s
 919635 666256 infeasible   43        68.00000   13.00000  80.9%  11.9  330s
 934769 677179   26.33333   52   10   68.00000   13.00000  80.9%  11.9  335s
 954205 691104 infeasible   71        68.00000   13.00000  80.9%  11.9  340s
 971052 703161   28.33333   46   14   68.00000   13.00000  80.9%  11.9  345s
 989841 716879   49.83156   53   17   68.00000   13.00000  80.9%  11.9  350s
 1002504 726077   65.05041   96   31   68.00000   13.00000  80.9%  11.9  355s
 1017991 737235   38.33333   49   10   68.00000   13.00000  80.9%  11.9  360s
 1035161 749745   66.00000   67    8   68.00000   13.00000  80.9%  11.9  365s
 1050614 760980   44.00000   65   10   68.00000   13.00000  80.9%  11.9  370s
 1063158 769860   48.54630   73   14   68.00000   13.00000  80.9%  11.9  375s
 1077878 780490   66.00000   67   10   68.00000   13.00000  80.9%  11.9  380s
 1092836 791118   14.83333   35    7   68.00000   13.00000  80.9%  11.9  385s
 1108218 802046   30.33333   44   10   68.00000   13.00000  80.9%  11.9  390s
 1122153 811820   29.33333   39   14   68.00000   13.00000  80.9%  11.9  395s
 1130509 817650     cutoff   77        68.00000   13.07692  80.8%  12.0  400s
 1144806 827422   22.00000   41    8   68.00000   13.16667  80.6%  12.0  405s
 1160367 838328   29.78519   54   10   68.00000   13.16667  80.6%  12.0  410s
 1174903 848496   31.00000   50   10   68.00000   13.23077  80.5%  12.0  415s
 1189753 858748 infeasible   48        68.00000   13.25000  80.5%  12.0  420s
 1203569 868515   30.16667   55   14   68.00000   13.33333  80.4%  12.0  425s
 1216998 878212   15.00000   36    8   68.00000   13.33333  80.4%  12.0  430s
 1227058 884998     cutoff   69        68.00000   13.33333  80.4%  12.0  435s
 1243096 896492   37.83333   62   13   68.00000   13.33333  80.4%  12.0  440s
 1261419 909297   46.19444   62   24   68.00000   13.33333  80.4%  12.0  445s
 1274823 918868   19.33333   40   11   68.00000   13.33333  80.4%  12.0  450s
 1287052 927568 infeasible   60        68.00000   13.33333  80.4%  12.0  455s
 1302119 938052 infeasible   60        68.00000   13.33333  80.4%  12.0  460s
 1319084 950281 infeasible   77        68.00000   13.33333  80.4%  12.0  465s
 1334119 960893   65.33333   90   12   68.00000   13.33333  80.4%  12.0  470s
 1347444 970147 infeasible   43        68.00000   13.33333  80.4%  12.0  475s
 1360883 979408   58.33333   60   10   68.00000   13.33333  80.4%  12.0  480s
 1377018 990478     cutoff   72        68.00000   13.41667  80.3%  12.0  485s
 1392144 1001092   58.00000   68   14   68.00000   13.44444  80.2%  12.0  490s
 1406191 1010578   44.03333   56   20   68.00000   13.50000  80.1%  12.0  495s
 1422848 1022236   56.60370   80   18   68.00000   13.50000  80.1%  12.0  500s
 1434700 1030664   64.59259   84   29   68.00000   13.50000  80.1%  12.0  505s
 1451197 1042210   33.58333   52   15   68.00000   13.50000  80.1%  12.0  510s
 1466883 1053446   44.50000   61    7   68.00000   13.50000  80.1%  12.0  515s
 1480902 1063220   65.11331   73   36   68.00000   13.50000  80.1%  12.0  520s
 1498282 1075313   65.14683   72   60   68.00000   13.55556  80.1%  12.0  525s
 1507846 1081808   64.98077  102   21   68.00000   13.55556  80.1%  12.0  530s
 1522871 1092104   25.00000   41   11   68.00000   13.58333  80.0%  12.0  535s
 1535021 1100406   16.58333   37    9   68.00000   13.61111  80.0%  12.0  540s
 1549863 1110690 infeasible  105        68.00000   13.66667  79.9%  12.0  545s
 1562193 1119391 infeasible   77        68.00000   13.66667  79.9%  12.0  550s
 1573090 1126879   20.12500   44   10   68.00000   13.66667  79.9%  12.0  555s
 1588538 1137788   26.66667   55    9   68.00000   13.66667  79.9%  12.0  560s
 1603298 1148015   13.66667   32    8   68.00000   13.66667  79.9%  12.0  565s
 1619016 1158946   40.33333   53   12   68.00000   13.66667  79.9%  12.0  570s
 1631445 1167602   64.55976   82   26   68.00000   13.66667  79.9%  12.0  575s
 1647455 1178442   43.90278   63   32   68.00000   13.66667  79.9%  12.0  580s
 1662819 1189320   14.33333   34    9   68.00000   13.66667  79.9%  12.0  585s
 1673595 1196576   25.52778   56   13   68.00000   13.66667  79.9%  12.0  590s
 1686846 1205808   17.72222   38    8   68.00000   13.66667  79.9%  12.0  595s
 1697831 1213379   39.33333   51   10   68.00000   13.66667  79.9%  12.0  600s
 1707936 1220550   45.66505   61   36   68.00000   13.66667  79.9%  12.0  605s
 1721519 1230100   20.22222   37    8   68.00000   13.66667  79.9%  12.0  610s
 1734297 1239031   43.33333   51   12   68.00000   13.66667  79.9%  12.0  615s
 1747300 1247944   29.22222   51   18   68.00000   13.66667  79.9%  12.0  620s
 1759166 1256366   35.66667   50   12   68.00000   13.75000  79.8%  12.0  625s
 1773109 1266076   63.27778   65   42   68.00000   13.75000  79.8%  12.0  630s
 1783706 1273599   42.50000   57   22   68.00000   13.83333  79.7%  12.0  635s
 1797724 1283585   28.50000   48    8   68.00000   13.83333  79.7%  12.0  640s
 1811198 1293168   28.66667   51   20   68.00000   13.83333  79.7%  12.0  645s
 1824088 1302153   51.61111   66   30   68.00000   13.83333  79.7%  12.0  650s
 1837501 1311331   21.83333   49    9   68.00000   13.83333  79.7%  12.0  655s
 1852264 1321659   21.50000   43    8   68.00000   13.83333  79.7%  12.0  660s
 1866918 1331894   47.50000   82   13   68.00000   13.83333  79.7%  12.0  665s
 1878658 1340149   54.70930   76   35   68.00000   13.83333  79.7%  12.0  670s
 1892491 1349816   27.00000   46   12   68.00000   13.88889  79.6%  12.0  675s
 1908181 1360907   42.23333   57   18   68.00000   13.97222  79.5%  12.0  680s
 1918991 1368713   39.33333   44   13   68.00000   14.00000  79.4%  12.0  685s
 1932818 1378705   37.66667   57   21   68.00000   14.00000  79.4%  12.0  690s
 1948303 1389771 infeasible   71        68.00000   14.00000  79.4%  12.0  695s
 1959443 1397520     cutoff   78        68.00000   14.00000  79.4%  12.0  700s
 1973123 1407260   40.08333   48   12   68.00000   14.00000  79.4%  12.0  705s
 1986512 1417004   52.29325   91   11   68.00000   14.00000  79.4%  12.0  710s
 2000744 1426982   23.25000   43    7   68.00000   14.00000  79.4%  12.0  715s
 2011503 1434741   44.52253   66   18   68.00000   14.00000  79.4%  12.0  720s
 2023232 1442968     cutoff   73        68.00000   14.00000  79.4%  12.0  725s
 2036665 1452309 infeasible  103        68.00000   14.00000  79.4%  12.0  731s
 2045865 1458844   54.33333   74   16   68.00000   14.00000  79.4%  12.0  735s
 2060988 1469506   43.94444   60   22   68.00000   14.00000  79.4%  12.0  740s
 2076906 1480673   16.83333   36    9   68.00000   14.00000  79.4%  12.0  745s
 2090353 1489891   22.00000   34   13   68.00000   14.00000  79.4%  12.0  750s
 2105153 1500255   39.83333   49   25   68.00000   14.00000  79.4%  12.0  755s
 2121351 1511440   26.00000   40   15   68.00000   14.00000  79.4%  12.0  760s
 2136818 1522317   40.66667   69   15   68.00000   14.00000  79.4%  12.0  765s
 2153439 1533959   17.58333   37    6   68.00000   14.00000  79.4%  11.9  770s
 2164562 1541849   56.30556   89   17   68.00000   14.00000  79.4%  11.9  775s
 2180875 1553679     cutoff   60        68.00000   14.00000  79.4%  11.9  780s
 2195326 1563984   24.22222   42   13   68.00000   14.00000  79.4%  11.9  785s
 2209087 1573807   37.59230   65   22   68.00000   14.00000  79.4%  11.9  790s
 2222547 1583368   63.33333   73   13   68.00000   14.00000  79.4%  11.9  795s
 2233388 1591258   51.41667   63   26   68.00000   14.00000  79.4%  11.9  800s
 2250194 1603150 infeasible   93        68.00000   14.00000  79.4%  11.9  805s
 2262815 1612135   45.16667   59   13   68.00000   14.00000  79.4%  11.9  810s
 2274748 1620804   38.00000   50    8   68.00000   14.00000  79.4%  11.9  815s
 2287689 1630060     cutoff   67        68.00000   14.00000  79.4%  11.9  820s
H2287782 1624075                      67.0000000   14.00000  79.1%  11.9  821s
 2296489 1630130   55.52018   79   33   67.00000   14.00000  79.1%  11.9  825s
 2312960 1641611 infeasible   80        67.00000   14.05556  79.0%  11.9  830s
 2330418 1653478   14.70833   35    8   67.00000   14.08333  79.0%  11.9  835s
 2347482 1665006   25.33333   41   14   67.00000   14.11111  78.9%  11.9  840s
 2360875 1674220   37.79722   60   19   67.00000   14.16667  78.9%  11.9  845s
 2372886 1682625   41.33333   59   15   67.00000   14.16667  78.9%  11.9  850s
 2384021 1690142   27.33333   52   10   67.00000   14.16667  78.9%  11.9  855s
 2396183 1698207   14.50000   33   10   67.00000   14.16667  78.9%  11.9  860s
 2412406 1709701   22.33333   39   11   67.00000   14.16667  78.9%  11.9  865s
 2426489 1719366   56.00000   70   36   67.00000   14.22222  78.8%  11.9  870s
 2439849 1728419   27.33333   36   17   67.00000   14.23077  78.8%  11.9  875s
 2455978 1739506   43.06061   81    8   67.00000   14.25000  78.7%  11.9  880s
 2470347 1749484   50.00000   74   24   67.00000   14.25000  78.7%  11.9  885s
 2489239 1762587   52.60618   73   25   67.00000   14.27778  78.7%  11.9  890s
 2504439 1773112   34.45139   50   23   67.00000   14.33333  78.6%  11.9  895s
 2520556 1784152     cutoff   71        67.00000   14.33333  78.6%  11.9  900s
 2531854 1791990     cutoff   95        67.00000   14.33333  78.6%  11.9  905s
 2541945 1798962   24.61111   50    7   67.00000   14.33333  78.6%  11.9  910s
 2553652 1807155   38.85185   59   16   67.00000   14.33333  78.6%  11.9  915s
 2567982 1817040   32.45833   46   18   67.00000   14.33333  78.6%  11.9  920s
 2582533 1827018   60.14656   80   24   67.00000   14.33333  78.6%  11.9  925s
 2596607 1836633   37.71167   57   18   67.00000   14.33333  78.6%  11.9  930s
 2610049 1845857   40.45455   57   18   67.00000   14.33333  78.6%  11.9  935s
 2625433 1856649   44.68056   70   19   67.00000   14.33333  78.6%  11.9  940s
 2642474 1868281   23.33333   37   14   67.00000   14.33333  78.6%  11.9  945s
 2653865 1876276   27.16667   44   17   67.00000   14.33333  78.6%  11.9  950s
 2668681 1886471   44.84539   72   15   67.00000   14.33333  78.6%  11.9  955s
 2684868 1897399   64.44828   84   25   67.00000   14.33333  78.6%  11.9  960s
 2699793 1907876   51.00000   70   14   67.00000   14.33333  78.6%  11.9  965s
 2716183 1919572   43.63889   71   19   67.00000   14.33333  78.6%  11.9  970s
 2731998 1930696   61.73333   92   15   67.00000   14.33333  78.6%  11.9  976s
 2739366 1935864   25.44444   54   11   67.00000   14.33333  78.6%  11.9  980s
 2754419 1946643   24.16667   50    6   67.00000   14.33333  78.6%  11.9  985s
 2766175 1954720   46.16667   62    9   67.00000   14.33333  78.6%  11.9  990s
 2780312 1964582   38.55556   64   14   67.00000   14.33333  78.6%  11.9  995s
 2796233 1975739     cutoff   84        67.00000   14.33333  78.6%  11.9 1000s
 2806992 1983304   63.00000   70   12   67.00000   14.33333  78.6%  11.9 1005s
 2823831 1994650   28.62500   49    3   67.00000   14.33333  78.6%  11.9 1010s
 2837981 2004124   44.33333   55   12   67.00000   14.33333  78.6%  11.9 1015s
 2853693 2014925     cutoff   55        67.00000   14.33333  78.6%  11.9 1020s
 2869058 2025686   41.66667   52   17   67.00000   14.33333  78.6%  11.9 1025s
 2884178 2036060   52.66667   61   12   67.00000   14.33333  78.6%  11.9 1030s
 2896199 2044204 infeasible   59        67.00000   14.38889  78.5%  11.9 1035s
 2907853 2052279   59.33333   71   26   67.00000   14.41667  78.5%  11.9 1040s
 2925024 2064140   59.31149   90   20   67.00000   14.41667  78.5%  11.9 1045s
 2940786 2075073   35.00000   53   19   67.00000   14.42857  78.5%  11.9 1050s
 2954052 2083713   18.00000   36   10   67.00000   14.45833  78.4%  11.9 1055s
 2966417 2091990   52.89844   71   21   67.00000   14.50000  78.4%  11.9 1060s
 2981621 2102558   35.31061   65   15   67.00000   14.50000  78.4%  11.9 1065s
 2996811 2113454   22.33333   38   10   67.00000   14.50000  78.4%  11.9 1070s
 3012301 2124213   23.58333   52    8   67.00000   14.50000  78.4%  11.9 1075s
 3023236 2131810 infeasible   70        67.00000   14.50000  78.4%  11.9 1080s
 3037333 2141505   53.94048   73   22   67.00000   14.50000  78.4%  11.9 1085s
 3048337 2149200   28.57143   49    9   67.00000   14.50000  78.4%  11.9 1090s
 3061825 2158628   23.00000   44   12   67.00000   14.50000  78.4%  11.9 1095s
 3074165 2167245   16.48485   37    7   67.00000   14.50000  78.4%  11.9 1100s
 3085852 2175402   32.66667   48   19   67.00000   14.50000  78.4%  11.9 1105s
 3097961 2183696   32.50000   50   17   67.00000   14.50000  78.4%  11.9 1110s
 3114674 2195500   43.80556   76   18   67.00000   14.50000  78.4%  11.8 1115s
 3130956 2206728   54.20370   71   35   67.00000   14.50000  78.4%  11.8 1120s
 3150178 2219664   17.11111   35    8   67.00000   14.54167  78.3%  11.8 1125s
 3162236 2227858   15.33333   33    7   67.00000   14.55556  78.3%  11.8 1130s
 3175031 2236146   54.00000   51   13   67.00000   14.57143  78.3%  11.8 1135s
 3191053 2247021   31.85000   61    8   67.00000   14.58333  78.2%  11.8 1140s
 3206893 2257857   46.81212   68   19   67.00000   14.58333  78.2%  11.8 1145s
 3223225 2268842   54.33333   67   10   67.00000   14.58333  78.2%  11.8 1150s
 3235506 2277204   18.86667   35    9   67.00000   14.61111  78.2%  11.8 1155s
 3251220 2288025   26.72222   45   17   67.00000   14.62500  78.2%  11.8 1160s
 3268116 2299584   16.66667   40    7   67.00000   14.66667  78.1%  11.8 1165s
 3286420 2312240     cutoff   70        67.00000   14.66667  78.1%  11.8 1170s
 3295686 2318642 infeasible   67        67.00000   14.66667  78.1%  11.8 1175s
 3306715 2326270   64.15208   98   24   67.00000   14.66667  78.1%  11.8 1180s
 3320713 2335947   44.95370   50   42   67.00000   14.66667  78.1%  11.8 1185s
 3337503 2347726   24.09091   47    9   67.00000   14.66667  78.1%  11.8 1190s
 3352362 2357945   32.00000   46    8   67.00000   14.66667  78.1%  11.8 1195s
 3364143 2366081   61.96441   94   37   67.00000   14.66667  78.1%  11.8 1200s
 3381248 2377659   27.87496   41   21   67.00000   14.66667  78.1%  11.8 1205s
 3395756 2387805   40.33333   50   18   67.00000   14.66667  78.1%  11.8 1210s
 3412141 2399355   55.00000   68   10   67.00000   14.66667  78.1%  11.8 1215s
 3428889 2411123 infeasible   63        67.00000   14.66667  78.1%  11.8 1220s
 3444128 2421646   28.74242   57   12   67.00000   14.66667  78.1%  11.8 1225s
 3455574 2429399   48.48148   74   14   67.00000   14.66667  78.1%  11.8 1230s
 3471986 2440704     cutoff   74        67.00000   14.66667  78.1%  11.8 1235s
 3487880 2451603 infeasible   42        67.00000   14.66667  78.1%  11.8 1240s
 3502012 2461282   22.22222   45    6   67.00000   14.66667  78.1%  11.8 1245s
 3513547 2469180   34.00000   63   12   67.00000   14.66667  78.1%  11.8 1250s
 3527358 2478840   43.84302   74   19   67.00000   14.66667  78.1%  11.8 1255s
 3539520 2487368   59.12963   92   19   67.00000   14.66667  78.1%  11.8 1260s
 3554893 2498049   28.60000   52   12   67.00000   14.66667  78.1%  11.8 1265s
 3568832 2507573 infeasible   76        67.00000   14.66667  78.1%  11.8 1270s
 3578563 2514245   57.89583   89   20   67.00000   14.66667  78.1%  11.8 1275s
 3594446 2525594 infeasible   66        67.00000   14.66667  78.1%  11.8 1280s
 3608823 2535366   48.62500   74   25   67.00000   14.66667  78.1%  11.8 1285s
 3625694 2547021   48.16667   76   16   67.00000   14.66667  78.1%  11.8 1290s
 3639865 2556813   61.95960  100   12   67.00000   14.66667  78.1%  11.8 1295s
 3651271 2564624   20.83333   47   10   67.00000   14.66667  78.1%  11.8 1300s
 3664457 2573614 infeasible   46        67.00000   14.66667  78.1%  11.8 1305s
 3679849 2584076 infeasible   43        67.00000   14.70950  78.0%  11.8 1310s
 3694492 2594635   53.66667   76   16   67.00000   14.74245  78.0%  11.8 1315s
 3706251 2602834   38.70000   69    9   67.00000   14.75000  78.0%  11.8 1320s
 3715066 2608918   48.95833   67   23   67.00000   14.75000  78.0%  11.8 1325s
 3730659 2620147   21.00000   44    8   67.00000   14.75000  78.0%  11.8 1330s
 3746921 2631400     cutoff   92        67.00000   14.77778  77.9%  11.8 1335s
 3761702 2641847   30.97748   51   17   67.00000   14.81481  77.9%  11.8 1340s
 3775379 2651323   35.28009   63   17   67.00000   14.83333  77.9%  11.8 1345s
 3788335 2660711   21.33333   46    9   67.00000   14.83333  77.9%  11.8 1350s
 3801342 2669979     cutoff   74        67.00000   14.83333  77.9%  11.8 1355s
 3811905 2677341   23.50000   49    4   67.00000   14.83333  77.9%  11.8 1360s
 3822766 2684810 infeasible   67        67.00000   14.83333  77.9%  11.8 1365s
 3832423 2691542   63.81250   86   23   67.00000   14.83333  77.9%  11.8 1370s
 3847243 2701935   46.83801   74   13   67.00000   14.83333  77.9%  11.8 1375s
 3865367 2714629   16.00000   37    7   67.00000   14.83333  77.9%  11.8 1380s
 3878988 2724164   44.75000   62   17   67.00000   14.83333  77.9%  11.7 1385s
 3892719 2733938   44.00000   49    8   67.00000   14.83333  77.9%  11.7 1390s
 3910114 2746142   59.31205   75   31   67.00000   14.83333  77.9%  11.7 1395s
 3922997 2755414   34.10417   61   12   67.00000   14.83333  77.9%  11.7 1400s
 3935099 2763806   61.04091   99   12   67.00000   14.83333  77.9%  11.7 1405s
 3947872 2772705 infeasible   89        67.00000   14.83333  77.9%  11.7 1410s
 3964120 2784106   30.06667   61    6   67.00000   14.83333  77.9%  11.7 1415s
 3974957 2791542   29.76942   61   11   67.00000   14.83333  77.9%  11.7 1420s
 3991330 2802605   38.53175   53   21   67.00000   14.88095  77.8%  11.7 1425s
 4005343 2812036 infeasible   40        67.00000   14.88889  77.8%  11.7 1430s
 4021851 2823436   45.58163   78   18   67.00000   14.91667  77.7%  11.7 1435s
 4035599 2832715   44.15278   52   28   67.00000   14.93333  77.7%  11.7 1440s
 4050108 2842574 infeasible   82        67.00000   14.97436  77.7%  11.7 1445s
 4064666 2852705   39.05556   51   26   67.00000   15.00000  77.6%  11.7 1450s
 4075890 2860536   39.01389   57   20   67.00000   15.00000  77.6%  11.7 1455s
 4088794 2869631   20.33333   40    4   67.00000   15.00000  77.6%  11.7 1460s
 4098401 2876423   24.00000   38   15   67.00000   15.00000  77.6%  11.7 1465s
 4109355 2884225   37.06250   69   16   67.00000   15.00000  77.6%  11.7 1470s
 4123073 2893799 infeasible   78        67.00000   15.00000  77.6%  11.7 1475s
 4136414 2902961   63.65556   91   18   67.00000   15.00000  77.6%  11.7 1480s
 4152285 2914160   20.50000   39   11   67.00000   15.00000  77.6%  11.7 1485s
 4166991 2924574   38.18182   69    9   67.00000   15.00000  77.6%  11.7 1490s
 4183869 2936513   42.88889   65   22   67.00000   15.00000  77.6%  11.7 1495s
 4195578 2945103   65.00000   77    9   67.00000   15.00000  77.6%  11.7 1500s
 4211052 2956040   64.33333   68   10   67.00000   15.00000  77.6%  11.7 1505s
 4226560 2966948   50.33333   68   10   67.00000   15.00000  77.6%  11.7 1510s
 4240901 2977219   42.98485   54   27   67.00000   15.00000  77.6%  11.7 1515s
 4254713 2987190   62.33333   75   10   67.00000   15.00000  77.6%  11.7 1520s
 4270992 2998635   25.06790   42   10   67.00000   15.00000  77.6%  11.7 1525s
 4282273 3006427   55.00000   80   20   67.00000   15.00000  77.6%  11.7 1530s
 4297961 3017374   27.28788   54   10   67.00000   15.00000  77.6%  11.7 1535s
 4313949 3028541   65.24818  103   11   67.00000   15.00000  77.6%  11.7 1540s
 4331079 3040349   57.59184   92   17   67.00000   15.00000  77.6%  11.7 1545s
 4344486 3049652   57.00000   63   14   67.00000   15.00000  77.6%  11.7 1550s
 4359055 3059659   24.07143   45    8   67.00000   15.00000  77.6%  11.7 1555s
 4371765 3068282   64.33333   70    9   67.00000   15.00000  77.6%  11.7 1560s
 4387360 3079137 infeasible   72        67.00000   15.00000  77.6%  11.7 1565s
 4401813 3088915   35.28125   61   18   67.00000   15.00000  77.6%  11.7 1570s
 4418131 3100276   17.00000   37    8   67.00000   15.00000  77.6%  11.7 1575s
 4428864 3107960   48.30653   65   21   67.00000   15.00000  77.6%  11.7 1580s
 4445329 3119182   26.83333   54    9   67.00000   15.00000  77.6%  11.7 1585s
 4457165 3127379   39.00000   51   21   67.00000   15.00000  77.6%  11.7 1590s
 4469631 3135870   51.75356   87   17   67.00000   15.00000  77.6%  11.7 1595s
 4480656 3143371   22.33333   44    8   67.00000   15.00000  77.6%  11.7 1600s
 4489759 3149316   15.88889   38   11   67.00000   15.00000  77.6%  11.7 1605s
 4501682 3157577   47.00000   71   13   67.00000   15.00000  77.6%  11.7 1610s
 4513078 3165785 infeasible   59        67.00000   15.00000  77.6%  11.7 1615s
 4524639 3173568     cutoff   69        67.00000   15.00000  77.6%  11.7 1620s
 4537548 3182709   34.55612   59   11   67.00000   15.00000  77.6%  11.7 1625s
 4550959 3192151     cutoff   80        67.00000   15.00000  77.6%  11.7 1630s
 4566056 3202928   21.85185   42   14   67.00000   15.00000  77.6%  11.7 1635s
 4575082 3209373   41.36667   66   12   67.00000   15.00000  77.6%  11.7 1640s
 4591791 3221262 infeasible   86        67.00000   15.00000  77.6%  11.7 1645s
 4604926 3230462     cutoff   70        67.00000   15.00000  77.6%  11.7 1650s
 4618623 3240157   15.00000   36    4   67.00000   15.00000  77.6%  11.7 1655s
 4631773 3249239 infeasible   73        67.00000   15.00000  77.6%  11.7 1660s
 4641220 3256013   20.50000   44    6   67.00000   15.00000  77.6%  11.7 1665s
 4656151 3266524   43.83333   49   13   67.00000   15.00000  77.6%  11.7 1670s
 4671156 3276971   52.00000   54   14   67.00000   15.00000  77.6%  11.7 1675s
 4688152 3288937   48.70277   59   41   67.00000   15.00000  77.6%  11.7 1680s
 4703737 3299880   54.01372   75   15   67.00000   15.00000  77.6%  11.7 1685s
 4717801 3309662     cutoff   75        67.00000   15.00000  77.6%  11.7 1690s
 4728840 3317390   38.86797   57   26   67.00000   15.00000  77.6%  11.7 1695s
 4742037 3326604   61.00000   61   17   67.00000   15.00000  77.6%  11.7 1700s
 4755683 3336199   29.48485   55   12   67.00000   15.00000  77.6%  11.7 1705s
 4768635 3345256     cutoff   81        67.00000   15.00000  77.6%  11.7 1710s
 4782705 3355134   35.33333   66   10   67.00000   15.00000  77.6%  11.7 1715s
 4797371 3365174 infeasible   46        67.00000   15.00000  77.6%  11.7 1720s
 4812225 3375431     cutoff   70        67.00000   15.00000  77.6%  11.7 1725s
 4826458 3385426 infeasible   69        67.00000   15.00000  77.6%  11.7 1730s
 4841525 3395789   41.54167   69   20   67.00000   15.00000  77.6%  11.7 1735s
 4852246 3403194   47.13889   62   27   67.00000   15.00000  77.6%  11.7 1740s
 4864011 3411372 infeasible   73        67.00000   15.00000  77.6%  11.7 1745s
 4877941 3420940   49.95139   64   44   67.00000   15.05556  77.5%  11.7 1750s
 4892455 3430520   29.66667   39   16   67.00000   15.07692  77.5%  11.7 1755s
 4908300 3441146 infeasible   52        67.00000   15.08333  77.5%  11.7 1760s
 4921474 3450238   20.33333   44    4   67.00000   15.08333  77.5%  11.7 1765s
 4938086 3461481   16.10256   33    8   67.00000   15.10000  77.5%  11.7 1770s
 4954066 3472016   21.33333   39   11   67.00000   15.11111  77.4%  11.7 1775s
 4965594 3479711 infeasible   66        67.00000   15.12500  77.4%  11.7 1780s
 4981747 3490955   32.54762   61   11   67.00000   15.13889  77.4%  11.7 1785s
 4994134 3499324   30.12500   45   18   67.00000   15.16667  77.4%  11.7 1790s
 5009831 3509826   34.66667   53   16   67.00000   15.16667  77.4%  11.7 1795s
 5024908 3519935   30.73333   49   16   67.00000   15.16667  77.4%  11.7 1800s

Explored 5025017 nodes (58779387 simplex iterations) in 1800.01 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 67 68 69 ... 85

Time limit reached
Best objective 6.700000000000e+01, best bound 1.600000000000e+01, gap 76.1194%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1014.2 MiB   1014.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1014.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1014.2 MiB      0.0 MiB       m2 = m.construct()
    28   1014.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1014.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1014.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1014.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1014.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1014.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1014.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1014.2 MiB      0.0 MiB       m2.update()
    44   1014.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1014.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1014.2 MiB      0.0 MiB       if(set_binary):
    51   1014.2 MiB      0.0 MiB           for x in set_binary:
    52   1014.2 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1014.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   4158.6 MiB   3144.4 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   4158.6 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   4158.6 MiB      0.0 MiB       j = 0
    69   4158.6 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   4158.6 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   4158.6 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   4158.6 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   4158.6 MiB      0.0 MiB       if m2.status == 9:
    78   4158.6 MiB      0.0 MiB           result.timeout = True
    79   4158.6 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   4158.6 MiB      0.0 MiB           result.solution = True
    81   4158.6 MiB      0.0 MiB           result.feasible = True
    82   4158.6 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   4158.6 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   4158.6 MiB      0.0 MiB           for v in current_vars:
    85   4158.6 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   4158.6 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   4158.6 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   4158.6 MiB      0.0 MiB                   j = j+1
    91                             
    92   4158.6 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 21:23:08 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.tra,lab' -mdp /tmp/tmp4yicib2c

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.5.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp4yicib2c"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.026 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      69 (1 initial)
Transitions: 149
Choices:     134

Transition matrix: 283 nodes (3 terminal), 149 minterms, vars: 7r/7c/2nd

Prob0A: 49 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 410 iterations in 0.01 seconds (average 0.000029, setup 0.00)

yes = 6, no = 1, maybe = 62

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=7, nodes=299] [14.0 KB]
Adding sparse bits... [levels=7-7, num=2, compact=2/2] [0.7 KB]
Creating vector for yes... [dist=2, compact] [0.2 KB]
Allocating iteration vectors... [3 x 0.5 KB]
TOTAL: [16.5 KB]

Starting iterations...

Iterative method: 2804 iterations in 0.01 seconds (average 0.000003, setup 0.00)

Value in the initial state: 0.4999999918444087

Time for model checking: 0.024 seconds.

Result: 0.4999999918444087 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [6e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   6.000000e-01   0.000000e+00      0s
     561    1.1420000e+02   0.000000e+00   0.000000e+00      0s

Solved in 561 iterations and 0.03 seconds
Optimal objective  1.142000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2339.5 MiB   2339.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2339.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2339.5 MiB      0.0 MiB       m2 = m.construct()
    28   2339.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2339.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2339.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2339.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2339.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2339.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2339.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2339.5 MiB      0.0 MiB       m2.update()
    44   2339.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2339.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2339.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2339.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2339.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2339.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2339.5 MiB      0.0 MiB       j = 0
    69   2339.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2339.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2339.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2339.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2339.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2339.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2339.5 MiB      0.0 MiB           result.solution = True
    81   2339.5 MiB      0.0 MiB           result.feasible = True
    82   2339.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2339.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2339.5 MiB      0.0 MiB           for v in current_vars:
    85   2339.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2339.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2339.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2339.5 MiB      0.0 MiB                   j = j+1
    91                             
    92   2339.5 MiB      0.0 MiB       return result, res_vec



subsystem size:205

probability: 0.6
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 21:23:09 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.tra,lab' -mdp /tmp/tmpm__a_ub_

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpm__a_ub_"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 79 iterations in 0.01 seconds (average 0.000101, setup 0.00)

Time for model construction: 0.038 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      206 (1 initial)
Transitions: 256
Choices:     207

Transition matrix: 540 nodes (3 terminal), 256 minterms, vars: 8r/8c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 90 iterations in 0.00 seconds (average 0.000044, setup 0.00)

yes = 203, no = 1, maybe = 2

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=8, nodes=39] [1.8 KB]
Adding sparse bits... [levels=8-8, num=1, compact=1/1] [0.2 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.6 KB]
TOTAL: [7.3 KB]

Starting iterations...

Iterative method: 3 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 1.0

Time for model checking: 0.01 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [6e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   6.000000e-01   0.000000e+00      0s
     561    1.1420000e+02   0.000000e+00   0.000000e+00      0s

Solved in 561 iterations and 0.03 seconds
Optimal objective  1.142000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2339.5 MiB   2339.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2339.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2339.5 MiB      0.0 MiB       m2 = m.construct()
    28   2339.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2339.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2339.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2339.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2339.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2339.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2339.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2339.5 MiB      0.0 MiB       m2.update()
    44   2339.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2339.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2339.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2339.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2339.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2339.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2339.5 MiB      0.0 MiB       j = 0
    69   2339.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2339.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2339.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2339.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2339.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2339.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2339.5 MiB      0.0 MiB           result.solution = True
    81   2339.5 MiB      0.0 MiB           result.feasible = True
    82   2339.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2339.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2339.5 MiB      0.0 MiB           for v in current_vars:
    85   2339.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2339.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2339.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2339.5 MiB      0.0 MiB                   j = j+1
    91                             
    92   2339.5 MiB      0.0 MiB       return result, res_vec



subsystem size:205

probability: 0.6
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [2e-01, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [6e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   6.000000e-01   0.000000e+00      0s
     142    1.4766625e+02   0.000000e+00   0.000000e+00      0s

Solved in 142 iterations and 0.01 seconds
Optimal objective  1.476662509e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2339.5 MiB   2339.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2339.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2339.5 MiB      0.0 MiB       m2 = m.construct()
    28   2339.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2339.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2339.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2339.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2339.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2339.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2339.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2339.5 MiB      0.0 MiB       m2.update()
    44   2339.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2339.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2339.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2339.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2339.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2339.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2339.5 MiB      0.0 MiB       j = 0
    69   2339.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2339.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2339.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2339.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2339.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2339.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2339.5 MiB      0.0 MiB           result.solution = True
    81   2339.5 MiB      0.0 MiB           result.feasible = True
    82   2339.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2339.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2339.5 MiB      0.0 MiB           for v in current_vars:
    85   2339.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2339.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2339.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2339.5 MiB      0.0 MiB                   j = j+1
    91                             
    92   2339.5 MiB      0.0 MiB       return result, res_vec



subsystem size:139

probability: 0.6
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 21:23:11 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.tra,lab' -mdp /tmp/tmpgvb2svf3

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpgvb2svf3"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 38 iterations in 0.00 seconds (average 0.000105, setup 0.00)

Time for model construction: 0.03 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      140 (1 initial)
Transitions: 174
Choices:     141

Transition matrix: 386 nodes (3 terminal), 174 minterms, vars: 8r/8c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 433 iterations in 0.02 seconds (average 0.000037, setup 0.00)

yes = 12, no = 1, maybe = 127

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=383] [18.0 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [0.9 KB]
Creating vector for yes... [dist=2, compact] [0.3 KB]
Allocating iteration vectors... [3 x 1.1 KB]
TOTAL: [22.4 KB]

Starting iterations...

Iterative method: 2058 iterations in 0.01 seconds (average 0.000004, setup 0.00)

Value in the initial state: 0.7619047342193609

Time for model checking: 0.028 seconds.

Result: 0.7619047342193609 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 287 rows and 572 columns
Presolve time: 0.00s
Presolved: 242 rows, 484 columns, 1076 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -8.0800000e+32   1.800000e+32   8.080000e+02      0s
     517   -2.4400000e+02   0.000000e+00   0.000000e+00      0s

Solved in 517 iterations and 0.01 seconds
Optimal objective -2.440000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2339.5 MiB   2339.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2339.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2339.5 MiB      0.0 MiB       m2 = m.construct()
    28   2339.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2339.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2339.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2339.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2339.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2339.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2339.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2339.5 MiB      0.0 MiB       m2.update()
    44   2339.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2339.5 MiB      0.0 MiB       if(zero_vars):
    47   2339.5 MiB      0.0 MiB           for x in zero_vars:
    48   2339.5 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2339.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2339.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2339.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2339.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2339.5 MiB      0.0 MiB       j = 0
    69   2339.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2339.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2339.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2339.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2339.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2339.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2339.5 MiB      0.0 MiB           result.solution = True
    81   2339.5 MiB      0.0 MiB           result.feasible = True
    82   2339.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2339.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2339.5 MiB      0.0 MiB           for v in current_vars:
    85   2339.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2339.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2339.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2339.5 MiB      0.0 MiB                   j = j+1
    91                             
    92   2339.5 MiB      0.0 MiB       return result, res_vec


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 2112 columns and 3868 nonzeros
Variable types: 1056 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 2e+02]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [6e-01, 1e+00]
Presolve removed 428 rows and 700 columns
Presolve time: 0.01s
Presolved: 1157 rows, 1412 columns, 3016 nonzeros
Variable types: 704 continuous, 708 integer (708 binary)

Root relaxation: objective 3.462787e+00, 1375 iterations, 0.11 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.46279    0  209          -    3.46279      -     -    0s
H    0     0                     247.0000000    3.46279  98.6%     -    0s
     0     2    3.46279    0  209  247.00000    3.46279  98.6%     -    1s
H    3     8                     168.0000000    3.60646  97.9%   170    3s
H   11    10                     149.0000000    3.94085  97.4%   210    3s
H   12    10                     148.0000000    3.94261  97.3%   211    3s
H   17    18                     133.0000000    4.38607  96.7%   188    3s
H   22    18                     107.0000000    4.72787  95.6%   205    3s
H   43    48                      84.0000000    4.95628  94.1%   143    4s
    73    69    7.60840    8  124   84.00000    4.95628  94.1%   104    5s
H   90    80                      72.0000000    4.95628  93.1%  97.5    8s
H   93    83                      71.0000000    4.95628  93.0%  97.3    8s
   365   325   10.98721   19  164   71.00000    4.95628  93.0%  83.2   10s
  3233  2622   38.35392   63  209   71.00000    5.39508  92.4%  34.0   18s
  3237  2628    5.39508   16   94   71.00000    5.39508  92.4%  34.4   20s
H 3263  2515                      70.0000000    5.39508  92.3%  35.6   22s
  3746  2802   33.48862   50   72   70.00000    5.39508  92.3%  34.9   25s
H 4250  3003                      69.0000000    5.39508  92.2%  35.6   27s
  5368  3639 infeasible   60        69.00000    5.39508  92.2%  34.3   30s
  8174  4824   46.44815  139   80   69.00000    5.42192  92.1%  36.5   35s
 11996  6956   29.55365   49   81   69.00000    6.03469  91.3%  36.4   40s
 15904 10175   54.49132  127   89   69.00000    6.03469  91.3%  34.6   45s
H17949 11711                      68.0000000    6.25971  90.8%  34.0   49s
 18710 12375   23.59151   56   83   68.00000    6.25971  90.8%  34.2   50s
 22457 15395   29.49160   60   78   68.00000    6.55909  90.4%  34.3   55s
 26951 19076   64.32201  105   85   68.00000    6.55909  90.4%  33.5   60s
 29058 20794 infeasible  109        68.00000    6.72534  90.1%  33.5   65s
 34198 24824   61.29718  112   74   68.00000    7.10999  89.5%  33.3   71s
 38953 28780   41.50159   64   80   68.00000    7.18543  89.4%  32.6   75s
 43514 32334   64.26965  119   52   68.00000    7.46155  89.0%  32.3   81s
 48320 36208   39.59986   99   90   68.00000    7.49902  89.0%  32.2   86s
 53445 40314   64.91393   98   78   68.00000    7.50442  89.0%  32.0   91s
 56527 42755   60.18462  109   46   68.00000    7.56099  88.9%  32.1   95s
 61326 46491   19.58190   47   82   68.00000    7.66729  88.7%  32.1  100s
 66347 50348   33.77820   55  207   68.00000    7.67785  88.7%  32.1  106s
 71387 54254   25.75720   57   83   68.00000    7.67934  88.7%  32.1  111s
 74552 56900   43.69614   84   72   68.00000    7.69286  88.7%  32.0  115s
 79610 61024   20.42231   38  105   68.00000    7.99441  88.2%  32.0  120s
 84646 64994   66.93569  112   78   68.00000    8.00309  88.2%  32.0  126s
 89717 69020   47.90230   74   69   68.00000    8.06024  88.1%  31.9  131s
 94076 72403   59.53233   93   73   68.00000    8.07715  88.1%  32.1  136s
 96036 73983   34.77465   50   93   68.00000    8.17148  88.0%  32.1  140s
 100574 77417   65.50638  103   85   68.00000    8.19573  87.9%  32.3  146s
 104610 80791   40.47269   70   76   68.00000    8.19901  87.9%  32.1  150s
 108135 83623   64.17169  137   43   68.00000    8.20951  87.9%  31.9  156s
 112001 86774   48.64130   98   92   68.00000    8.22243  87.9%  31.8  160s
 116950 90620   52.25219   84  101   68.00000    8.35162  87.7%  31.8  165s
 121904 94538   64.69584  102   72   68.00000    8.43179  87.6%  31.8  170s
 125161 97169   36.64001   61   93   68.00000    8.44931  87.6%  31.7  175s
 128971 100392   65.91937  102  103   68.00000    8.45656  87.6%  31.6  181s
 134851 105326   65.23572  129   68   68.00000    8.45812  87.6%  31.2  186s
 139764 109175 infeasible   48        68.00000    8.48008  87.5%  31.1  191s
 144699 113234   24.97840   59   77   68.00000    8.48925  87.5%  31.0  195s
 148829 116435   65.04566  119   78   68.00000    8.49388  87.5%  31.0  201s
 154079 120716   60.74977  115   66   68.00000    8.50032  87.5%  30.9  206s
 159144 124910   56.17376  104   65   68.00000    8.51060  87.5%  30.8  211s
 163680 128484 infeasible   79        68.00000    8.53402  87.4%  30.9  216s
 166640 130786   16.44008   46   83   68.00000    8.53621  87.4%  30.9  221s
 170020 133393    9.39748   26  113   68.00000    8.54171  87.4%  30.9  225s
 175069 137387   22.35042   45   95   68.00000    8.54942  87.4%  30.9  230s
 179713 141035 infeasible  142        68.00000    8.59117  87.4%  31.1  235s
 184204 144361 infeasible   58        68.00000    8.64911  87.3%  31.3  241s
 187168 146591   51.77808   96   77   68.00000    8.65113  87.3%  31.4  245s
 191882 150169     cutoff  111        68.00000    8.66437  87.3%  31.5  251s
 197187 154359 infeasible  110        68.00000    8.66782  87.3%  31.6  256s
 200058 156695   51.76922  109   81   68.00000    8.67399  87.2%  31.6  261s
 203640 159397   24.40772   56   82   68.00000    8.68241  87.2%  31.6  265s
 208785 163447   66.42915  112   75   68.00000    8.74409  87.1%  31.6  271s
 213288 167091   46.29360  105   54   68.00000    8.78147  87.1%  31.5  275s
 218559 171328   44.05306   72   94   68.00000    8.79603  87.1%  31.4  280s
 223905 175599   44.65385   77   78   68.00000    8.83717  87.0%  31.4  285s
 228677 179573   44.64151   76   91   68.00000    8.85135  87.0%  31.3  290s
 233531 183483   56.83925  100   96   68.00000    8.93386  86.9%  31.3  296s
 235251 184887   61.18060  113   75   68.00000    8.93619  86.9%  31.3  300s
 239494 188232   33.68616   56   90   68.00000    8.95661  86.8%  31.4  305s
 244127 191929   22.88614   47   93   68.00000    8.99441  86.8%  31.5  311s
 247722 194805   56.51681  114   55   68.00000    8.99441  86.8%  31.5  315s
 253108 199107   41.45387   80   93   68.00000    9.02688  86.7%  31.4  321s
 256177 201573   65.86755  118   83   68.00000    9.03382  86.7%  31.5  325s
 261334 205439   12.96893   29  110   68.00000    9.03433  86.7%  31.4  330s
 266546 209527   58.52991  108   74   68.00000    9.04028  86.7%  31.4  335s
 269779 212101 infeasible   43        68.00000    9.04346  86.7%  31.4  341s
 272282 214009   59.16016   98   48   68.00000    9.04346  86.7%  31.5  345s
 277902 218446   33.78031   57   80   68.00000    9.05542  86.7%  31.5  351s
 283096 222567   51.99677  117   74   68.00000    9.14313  86.6%  31.4  356s
 286494 225198   32.39723   61   83   68.00000    9.14891  86.5%  31.4  360s
 291602 229302   43.52581   81   58   68.00000    9.15196  86.5%  31.4  365s
 296590 233205 infeasible   96        68.00000    9.16049  86.5%  31.4  371s
 300871 236497   66.78115  116   47   68.00000    9.16639  86.5%  31.4  376s
 305709 240302   22.06409   51   77   68.00000    9.17191  86.5%  31.5  382s
 307403 241583   43.06702   83   91   68.00000    9.17191  86.5%  31.5  386s
 312093 245161   16.13706   48   84   68.00000    9.19216  86.5%  31.6  391s
 315059 247419   50.86606   94   58   68.00000    9.19286  86.5%  31.6  395s
 318938 250515   14.15843   36  131   68.00000    9.19782  86.5%  31.6  400s
 323768 254324 infeasible   97        68.00000    9.20261  86.5%  31.6  405s
 328808 258245   61.40353  120   59   68.00000    9.20621  86.5%  31.6  411s
 333479 261644   17.48953   56   76   68.00000    9.21457  86.4%  31.7  416s
 336901 264236   65.65086  108   71   68.00000    9.21691  86.4%  31.8  420s
 340350 266977   62.30793  131   59   68.00000    9.22253  86.4%  31.8  426s
 343975 269859    9.25302   29  111   68.00000    9.22585  86.4%  31.7  430s
 348784 273700   66.89696  107  111   68.00000    9.25722  86.4%  31.7  436s
 354371 278229   62.56773   98   76   68.00000    9.33861  86.3%  31.7  441s
 357536 280793     cutoff  110        68.00000    9.38823  86.2%  31.7  445s
 362085 284243   64.23109  138   60   68.00000    9.40696  86.2%  31.7  451s
 365511 286865   38.03960   68   80   68.00000    9.41259  86.2%  31.8  455s
 370571 290982   51.39368   97   82   68.00000    9.41675  86.2%  31.7  460s
 375883 295066   61.74808   94   75   68.00000    9.42246  86.1%  31.7  466s
 378915 297428   34.37561   59   67   68.00000    9.42604  86.1%  31.7  471s
 380816 298926   38.68866   70   62   68.00000    9.42864  86.1%  31.7  477s
 383783 301401   30.87264   54   76   68.00000    9.43914  86.1%  31.7  481s
 387359 304319   10.43914   35  118   68.00000    9.43954  86.1%  31.7  485s
 392777 308641   44.65921   92   74   68.00000    9.44392  86.1%  31.6  490s
 397374 312250   26.52293   66   85   68.00000    9.44977  86.1%  31.7  496s
 402483 316222   31.86698   57  104   68.00000    9.46098  86.1%  31.6  502s
 405498 318482   17.33692   33   98   68.00000    9.46461  86.1%  31.7  505s
 410018 322013   10.45183   32   95   68.00000    9.46796  86.1%  31.7  510s
 415067 326073   35.81285   58   93   68.00000    9.47089  86.1%  31.7  517s
 416804 327398   65.88712  119   88   68.00000    9.47089  86.1%  31.7  520s
 422258 331737   27.87427   48   99   68.00000    9.47448  86.1%  31.7  526s
 425819 334694   58.98508   99   83   68.00000    9.47644  86.1%  31.6  530s
 430848 338558   30.80475   53  104   68.00000    9.47915  86.1%  31.6  536s
 435676 342275   34.79643   62   90   68.00000    9.48328  86.1%  31.7  541s
 438566 344456 infeasible   66        68.00000    9.48412  86.1%  31.7  545s
 444376 349061   28.25046   47   75   68.00000    9.48690  86.0%  31.6  550s
 449002 352694   65.07260  112   77   68.00000    9.48690  86.0%  31.6  556s
 451892 354883 infeasible   65        68.00000    9.49184  86.0%  31.7  560s
 455504 357575   66.65849  114   81   68.00000    9.49388  86.0%  31.7  566s
 459138 360259   32.87723   71  116   68.00000    9.49612  86.0%  31.7  571s
 463193 363457   47.63226   81   83   68.00000    9.49695  86.0%  31.7  575s
 467933 367191   58.72332  103   74   68.00000    9.50302  86.0%  31.7  581s
 471698 370213   53.35408   82   84   68.00000    9.50550  86.0%  31.7  585s
 476990 374446   39.67853   87   82   68.00000    9.50880  86.0%  31.7  590s
 481662 378158   14.45437   34   98   68.00000    9.51104  86.0%  31.7  595s
 487016 382374 infeasible   61        68.00000    9.51247  86.0%  31.7  602s
 490325 385016 infeasible   88        68.00000    9.51776  86.0%  31.6  605s
 495513 389065   21.43982   50  101   68.00000    9.52165  86.0%  31.6  610s
 498359 391188   48.58986  101   70   68.00000    9.52165  86.0%  31.7  615s
 501497 393617   26.33390   48   96   68.00000    9.52165  86.0%  31.7  620s
 506314 397396   62.17859  112   37   68.00000    9.52825  86.0%  31.7  626s
 509529 399874   26.59016   61  103   68.00000    9.53110  86.0%  31.7  630s
 513775 403091 infeasible   79        68.00000    9.53110  86.0%  31.8  635s
 519209 407349   21.08729   52   74   68.00000    9.53836  86.0%  31.8  640s
 524942 411866   58.23773  112   67   68.00000    9.53836  86.0%  31.7  645s
 529801 415590   31.67842   64  120   68.00000    9.54527  86.0%  31.7  650s
 535830 420169   61.72990   94   71   68.00000    9.55160  86.0%  31.8  656s
 541273 424437   64.95626  124   83   68.00000    9.56863  85.9%  31.8  661s
 544105 426572   47.02321   86   85   68.00000    9.57068  85.9%  31.8  666s
 548736 430157   18.46743   53  107   68.00000    9.60287  85.9%  31.9  671s
 553352 433398   29.57110   48   68   68.00000    9.61094  85.9%  31.9  676s
 558378 437243   64.12104  106   36   68.00000    9.63630  85.8%  32.0  681s
 563373 441110   25.59395   54   84   68.00000    9.63968  85.8%  32.0  685s
 568288 444789   31.43928   61   79   68.00000    9.64613  85.8%  32.1  690s
 573357 448931   65.80159  115   75   68.00000    9.64800  85.8%  32.1  695s
 576542 451498   13.57744   42   92   68.00000    9.65015  85.8%  32.1  700s
 580120 454247 infeasible   42        68.00000    9.65056  85.8%  32.1  705s
 584550 457587   62.07932  100   82   68.00000    9.65261  85.8%  32.2  710s
 589250 461299   19.55972   39   99   68.00000    9.65501  85.8%  32.3  715s
 594185 465195 infeasible   48        68.00000    9.65762  85.8%  32.3  721s
 598634 468620   16.67707   53  115   68.00000    9.66375  85.8%  32.4  726s
 603893 472746   10.78227   38  108   68.00000    9.66786  85.8%  32.4  731s
 609337 476938   57.23894  107   68   68.00000    9.67678  85.8%  32.5  736s
 610768 477988   47.95928   92   96   68.00000    9.68437  85.8%  32.5  740s
 616243 482198   33.82054   61   67   68.00000    9.68907  85.8%  32.5  745s
 621502 486223 infeasible   71        68.00000    9.70082  85.7%  32.6  750s
 625382 489005   66.57423  108   68   68.00000    9.70387  85.7%  32.7  755s
 631304 493601   50.43035   93  103   68.00000    9.74506  85.7%  32.7  761s
 636670 497829   16.65339   47   90   68.00000    9.76079  85.6%  32.7  766s
 640242 500547   54.13129   94   46   68.00000    9.76991  85.6%  32.7  770s
 645954 504973   14.60144   38  111   68.00000    9.77652  85.6%  32.7  776s
 651642 509515   49.08282   86   79   68.00000    9.77814  85.6%  32.6  781s
 656737 513453     cutoff  117        68.00000    9.78956  85.6%  32.6  785s
 661242 516967   42.39742   94   77   68.00000    9.79193  85.6%  32.6  790s
 667651 521743 infeasible  103        68.00000    9.80196  85.6%  32.6  796s
 671558 524901   45.94812   92   61   68.00000    9.80433  85.6%  32.6  801s
 676684 528882   12.17518   39  127   68.00000    9.81308  85.6%  32.6  806s
 680814 531903   50.85699   93   82   68.00000    9.81974  85.6%  32.6  811s
 685816 535754   54.37187   98   71   68.00000    9.82082  85.6%  32.6  816s
 690758 539490   13.74318   39  105   68.00000    9.83059  85.5%  32.7  821s
 695696 543301   66.41009  128   75   68.00000    9.83702  85.5%  32.7  825s
 700960 547363   56.29133   84   71   68.00000    9.84580  85.5%  32.7  831s
 703966 549689   54.27258  100   85   68.00000    9.85380  85.5%  32.7  835s
 707627 552632   50.92951   83   96   68.00000    9.91581  85.4%  32.7  840s
 712417 556356   44.65830   86   70   68.00000    9.92506  85.4%  32.8  845s
 718312 560960   61.12068  103   45   68.00000    9.93489  85.4%  32.8  851s
 721507 563356   37.70452   59   85   68.00000    9.94757  85.4%  32.9  855s
 727248 567994   51.22932  104   74   68.00000    9.95492  85.4%  32.9  860s
 732137 571873   61.70778  100   71   68.00000    9.95866  85.4%  32.9  865s
 736941 575500   49.98305   76   91   68.00000    9.95998  85.4%  32.9  874s
 738386 576656   65.53712  106   57   68.00000    9.96889  85.3%  32.9  876s
 742437 579728   34.65458   63   70   68.00000    9.97295  85.3%  32.9  880s
 747930 584129   39.94419   79  101   68.00000    9.98131  85.3%  32.9  885s
 752982 588056   64.44313  106   80   68.00000    9.99149  85.3%  32.9  890s
 757672 591746   13.93542   43  120   68.00000   10.00263  85.3%  32.9  895s
 763276 596195   65.37096  114   82   68.00000   10.00899  85.3%  32.9  900s
 768699 600388   54.88810   99   77   68.00000   10.01399  85.3%  32.9  905s
 775447 605747   32.82435   71   56   68.00000   10.01691  85.3%  32.9  911s
 780110 609380   18.93999   50   88   68.00000   10.01996  85.3%  32.9  916s
 784020 612521   65.24013  137   50   68.00000   10.01996  85.3%  32.9  920s
 787403 615200 infeasible   71        68.00000   10.02183  85.3%  32.9  925s
 790699 617732   34.87703   59   85   68.00000   10.02325  85.3%  32.9  930s
 795405 621379   59.13223  103   66   68.00000   10.02761  85.3%  32.9  936s
 800222 625029   49.89865   88   83   68.00000   10.03003  85.2%  32.9  941s
 803569 627569   64.99738  111   78   68.00000   10.03110  85.2%  32.9  945s
 808611 631540   16.02308   45  102   68.00000   10.03390  85.2%  32.9  951s
 813906 635637   40.32074   86   89   68.00000   10.03691  85.2%  32.9  956s
 817230 638293   28.82564   52   68   68.00000   10.03691  85.2%  32.9  960s
 821860 641851   64.21060  127   53   68.00000   10.03979  85.2%  32.9  965s
 826318 645268   56.71057  105   63   68.00000   10.04366  85.2%  32.9  971s
 829559 647694   46.80067   80   88   68.00000   10.04645  85.2%  32.9  975s
 832967 650313   35.81484   56   90   68.00000   10.04666  85.2%  32.9  981s
 836360 652959   60.19909  114   53   68.00000   10.04984  85.2%  32.9  985s
 841454 656816   59.14459  104   71   68.00000   10.05484  85.2%  33.0  990s
 846612 660846   64.21288  136   53   68.00000   10.05720  85.2%  33.0  996s
 849176 662757   66.37836  118   65   68.00000   10.06510  85.2%  33.0 1000s
 854468 666814   13.96619   36  102   68.00000   10.07018  85.2%  33.0 1006s
 857793 669478   51.84952  100   45   68.00000   10.07114  85.2%  33.0 1010s
 860854 671815   54.35697   98   72   68.00000   10.08610  85.2%  33.0 1016s
 863516 673807   13.03709   44  108   68.00000   10.08610  85.2%  33.1 1020s
 869141 677992   13.08299   32  102   68.00000   10.10876  85.1%  33.1 1027s
 872469 680509   66.02580   95   70   68.00000   10.11274  85.1%  33.1 1031s
 876391 683621   38.39825   83   88   68.00000   10.11274  85.1%  33.1 1035s
 882128 688272   16.15418   49  119   68.00000   10.13091  85.1%  33.1 1040s
 887415 692483   24.41882   62  124   68.00000   10.13674  85.1%  33.1 1046s
 890467 694748   45.98173   93   92   68.00000   10.13734  85.1%  33.1 1050s
 895559 698764   14.18982   42   84   68.00000   10.14196  85.1%  33.1 1055s
 898469 700940   18.11337   48  126   68.00000   10.14359  85.1%  33.1 1060s
 903080 704444   65.99229  109   79   68.00000   10.14484  85.1%  33.1 1066s
 906066 706657   40.98043   63   75   68.00000   10.14611  85.1%  33.1 1070s
 910926 710316 infeasible  115        68.00000   10.14765  85.1%  33.2 1076s
 914598 713228   64.15702  125   53   68.00000   10.14765  85.1%  33.1 1080s
 919684 717146   29.08840   70   90   68.00000   10.14775  85.1%  33.1 1085s
 923732 720185   58.20865  110   55   68.00000   10.15105  85.1%  33.2 1091s
 927132 722765   26.73117   77  105   68.00000   10.15366  85.1%  33.2 1095s
 930767 725597   59.21136  132   49   68.00000   10.15366  85.1%  33.2 1100s
 932845 727093   52.09945   88   54   68.00000   10.15450  85.1%  33.2 1105s
 938308 731368   31.96070   66   72   68.00000   10.15808  85.1%  33.2 1111s
 941331 733654   25.30426   58   92   68.00000   10.15871  85.1%  33.2 1115s
 946519 737685   32.93733   71  116   68.00000   10.16234  85.1%  33.2 1121s
 949823 740220   36.51447   58   97   68.00000   10.16268  85.1%  33.3 1125s
 953406 743055   56.07392  123   77   68.00000   10.16540  85.1%  33.3 1130s
 958448 746889   61.92894   89   77   68.00000   10.16693  85.0%  33.3 1136s
 961973 749499   65.95132  116   72   68.00000   10.16884  85.0%  33.3 1140s
 963966 750975   63.00321  111   97   68.00000   10.17123  85.0%  33.3 1145s
 967597 753894   57.23099  110   74   68.00000   10.17258  85.0%  33.3 1151s
 971260 756619   31.55694   55   90   68.00000   10.17435  85.0%  33.3 1155s
 975894 760136   45.62055   67   72   68.00000   10.17474  85.0%  33.3 1161s
 979452 762913   55.58464   97   74   68.00000   10.17759  85.0%  33.3 1165s
 985134 767360   26.96711   54   92   68.00000   10.17849  85.0%  33.3 1170s
 989624 770745   59.59863   99   75   68.00000   10.18101  85.0%  33.4 1176s
 993277 773579   32.48665   66   67   68.00000   10.18129  85.0%  33.4 1180s
 996579 776162   11.66213   32  112   68.00000   10.18431  85.0%  33.4 1185s
 999772 778621   10.18501   34  106   68.00000   10.18501  85.0%  33.4 1190s
 1004884 782531   27.36617   60   78   68.00000   10.18686  85.0%  33.4 1196s
 1008333 785212   65.61494  101   77   68.00000   10.18686  85.0%  33.4 1200s
 1013200 788955   49.65133   79   85   68.00000   10.18953  85.0%  33.4 1205s
 1016252 791312   18.06551   45  104   68.00000   10.19104  85.0%  33.4 1210s
 1021397 795265   63.51364  107   70   68.00000   10.19306  85.0%  33.4 1216s
 1024418 797481   28.05954   69   87   68.00000   10.19496  85.0%  33.5 1220s
 1029392 801186   39.30486   79   67   68.00000   10.19611  85.0%  33.5 1225s
 1030993 802422 infeasible   49        68.00000   10.19696  85.0%  33.5 1230s
 1036423 806681   65.56808  104   70   68.00000   10.19959  85.0%  33.5 1236s
 1039589 808970   23.85672   53  101   68.00000   10.19959  85.0%  33.5 1240s
 1044927 813152   46.64417   80   87   68.00000   10.20006  85.0%  33.5 1246s
 1049652 816731   54.89381   92   54   68.00000   10.20261  85.0%  33.5 1251s
 1052909 819175   25.85358   55  125   68.00000   10.20261  85.0%  33.5 1255s
 1057650 822929   66.26702  114   76   68.00000   10.20261  85.0%  33.5 1261s
 1061162 825669     cutoff  119        68.00000   10.20523  85.0%  33.5 1265s
 1066138 829539   66.20902  117   88   68.00000   10.20706  85.0%  33.5 1271s
 1067934 830786   38.28792   80   93   68.00000   10.20951  85.0%  33.6 1275s
 1072825 834536   35.49221   72   69   68.00000   10.21278  85.0%  33.6 1281s
 1076112 836934   55.18992  117   57   68.00000   10.21296  85.0%  33.6 1285s
 1081097 840651   12.17427   47  110   68.00000   10.21840  85.0%  33.6 1291s
 1084455 843181   52.11118  105   89   68.00000   10.21840  85.0%  33.6 1295s
 1088829 846267 infeasible  126        68.00000   10.22516  85.0%  33.7 1301s
 1092075 848573   16.33867   44  117   68.00000   10.22774  85.0%  33.7 1305s
 1097545 852805   55.66626   99   93   68.00000   10.22774  85.0%  33.7 1311s
 1099003 853880   33.96151   77  101   68.00000   10.23723  84.9%  33.7 1315s
 1102630 856439   57.91261  100   63   68.00000   10.24216  84.9%  33.7 1320s
 1107711 860205   40.87080   69   83   68.00000   10.25298  84.9%  33.8 1326s
 1111209 862901   62.74747  110   61   68.00000   10.27265  84.9%  33.8 1330s
 1115449 866067   39.43344   80   86   68.00000   10.28181  84.9%  33.8 1337s
 1118958 868741   23.14949   59  109   68.00000   10.31042  84.8%  33.8 1342s
 1122430 871334   59.09544   96   18   68.00000   10.31663  84.8%  33.8 1346s
 1124022 872543 infeasible   62        68.00000   10.32604  84.8%  33.8 1350s
 1129249 876475   61.27737  111   65   68.00000   10.33930  84.8%  33.8 1357s
 1133067 879474   51.20573  101   60   68.00000   10.35891  84.8%  33.8 1361s
 1136637 882294   59.74050  104   91   68.00000   10.37006  84.7%  33.8 1365s
 1142142 886818   42.67026   83   62   68.00000   10.37451  84.7%  33.8 1371s
 1145559 889597 infeasible  110        68.00000   10.37952  84.7%  33.8 1375s
 1150835 893804 infeasible  114        68.00000   10.38552  84.7%  33.8 1380s
 1155937 897745   65.19175  115   54   68.00000   10.38907  84.7%  33.8 1385s
 1161091 901746   52.25582   83   80   68.00000   10.39558  84.7%  33.8 1390s
 1165760 905454   36.83811   70   92   68.00000   10.39748  84.7%  33.8 1395s
 1170689 909233   43.77001   79   93   68.00000   10.39904  84.7%  33.8 1401s
 1175768 913119   62.32451  107   81   68.00000   10.40328  84.7%  33.7 1406s
 1180261 916593   45.15270  101  100   68.00000   10.40696  84.7%  33.7 1411s
 1185054 920237   28.82949   67  109   68.00000   10.40857  84.7%  33.8 1416s
 1188477 922829   44.92437   81   86   68.00000   10.40892  84.7%  33.8 1420s
 1193529 926713   19.22860   45   97   68.00000   10.40892  84.7%  33.8 1427s
 1196561 929125   21.40393   54  100   68.00000   10.41296  84.7%  33.7 1431s
 1199978 931762   13.98472   44  114   68.00000   10.41296  84.7%  33.7 1435s
 1204183 934801 infeasible   60        68.00000   10.41675  84.7%  33.8 1441s
 1207574 937331   16.30715   43  100   68.00000   10.41866  84.7%  33.8 1446s
 1210712 939582   63.63683  117   74   68.00000   10.42028  84.7%  33.8 1450s
 1215687 943354   56.95530  100   85   68.00000   10.42246  84.7%  33.8 1456s
 1221076 947485   64.70786  109   76   68.00000   10.42616  84.7%  33.8 1461s
 1226427 951635   65.99087  123   88   68.00000   10.42941  84.7%  33.8 1466s
 1230925 955032   32.55898   76   82   68.00000   10.43015  84.7%  33.8 1472s
 1234070 957439 infeasible  110        68.00000   10.43015  84.7%  33.8 1475s
 1238669 960922   65.19978  122   52   68.00000   10.43676  84.7%  33.8 1480s
 1244086 965042   48.88886   86   84   68.00000   10.43799  84.7%  33.8 1485s
 1249161 968853   34.60009   79  105   68.00000   10.43954  84.6%  33.8 1490s
 1252278 971171   66.53987  122   65   68.00000   10.43981  84.6%  33.8 1495s
 1256967 974729 infeasible  117        68.00000   10.44246  84.6%  33.8 1500s
 1262073 978693   18.32713   40  107   68.00000   10.44392  84.6%  33.8 1505s
 1267266 982742   34.02796   61   80   68.00000   10.44620  84.6%  33.8 1511s
 1272512 986954   53.51211  105   64   68.00000   10.44766  84.6%  33.8 1516s
 1275637 989454   64.87742  116   65   68.00000   10.44889  84.6%  33.8 1520s
 1280969 993476 infeasible   64        68.00000   10.44947  84.6%  33.8 1525s
 1285354 996765   65.26476  118   71   68.00000   10.45111  84.6%  33.8 1530s
 1290275 1000483   34.78766   58   90   68.00000   10.45241  84.6%  33.8 1536s
 1295683 1004750   66.35598  105   88   68.00000   10.45408  84.6%  33.8 1542s
 1298818 1007079   34.81276   64   88   68.00000   10.45408  84.6%  33.8 1545s
 1304098 1011290   43.28183   84   92   68.00000   10.45408  84.6%  33.8 1550s
 1309080 1015262   57.10727  107   92   68.00000   10.45607  84.6%  33.7 1555s
 1313935 1018974   25.55425   57   96   68.00000   10.45766  84.6%  33.7 1560s
 1319450 1023324   31.02806   77   80   68.00000   10.45790  84.6%  33.7 1566s
 1324319 1027084   45.32375   90   81   68.00000   10.45962  84.6%  33.7 1571s
 1327981 1029976   34.11692   55   97   68.00000   10.46098  84.6%  33.7 1575s
 1334303 1034823   33.19961   55   84   68.00000   10.46252  84.6%  33.7 1581s
 1339453 1038910   56.28696  106   61   68.00000   10.46252  84.6%  33.7 1586s
 1342200 1040956 infeasible   36        68.00000   10.46395  84.6%  33.7 1590s
 1346633 1044400   60.20236  114   50   68.00000   10.46395  84.6%  33.7 1595s
 1351780 1048414     cutoff  130        68.00000   10.46395  84.6%  33.7 1600s
 1356376 1051831   59.57210  121   57   68.00000   10.46561  84.6%  33.7 1605s
 1361263 1055776   57.34850  105   78   68.00000   10.46659  84.6%  33.7 1611s
 1365095 1058759   25.27754   53   89   68.00000   10.46659  84.6%  33.6 1615s
 1370257 1062771   64.87576  110   58   68.00000   10.46917  84.6%  33.6 1620s
 1374551 1065925   58.22635  115   66   68.00000   10.46917  84.6%  33.7 1625s
 1379783 1070151   50.98823   86   90   68.00000   10.47105  84.6%  33.6 1630s
 1384792 1074036   59.42755  118   75   68.00000   10.47107  84.6%  33.6 1636s
 1389656 1077737   49.63038   97  173   68.00000   10.47107  84.6%  33.6 1641s
 1394357 1081282   12.57821   40  111   68.00000   10.47191  84.6%  33.6 1646s
 1397617 1083772   44.40689   87   84   68.00000   10.47201  84.6%  33.6 1650s
 1402963 1087988   39.63043   75   90   68.00000   10.47380  84.6%  33.6 1655s
 1408045 1092060   56.18826  115   67   68.00000   10.47380  84.6%  33.6 1661s
 1412722 1095673   15.40158   38   95   68.00000   10.47380  84.6%  33.6 1666s
 1415411 1097637   62.17577  115   40   68.00000   10.47510  84.6%  33.6 1670s
 1420593 1101543   20.35951   43  102   68.00000   10.47665  84.6%  33.6 1675s
 1425625 1105547   39.75189   63  105   68.00000   10.47710  84.6%  33.6 1681s
 1430977 1109704   46.72792   70   79   68.00000   10.47963  84.6%  33.6 1686s
 1434148 1112135   44.35681   93   68   68.00000   10.48087  84.6%  33.6 1690s
 1439796 1116426   38.41713   84  144   68.00000   10.48114  84.6%  33.6 1695s
 1444128 1119733   35.46645   72   76   68.00000   10.48114  84.6%  33.6 1700s
 1449236 1123610 infeasible  123        68.00000   10.48114  84.6%  33.6 1705s
 1453822 1127044   65.87075  109  125   68.00000   10.48326  84.6%  33.6 1711s
 1458665 1130693   54.87521   99   74   68.00000   10.48428  84.6%  33.6 1716s
 1463613 1134394   25.25268   50   73   68.00000   10.48596  84.6%  33.6 1721s
 1467433 1137417 infeasible   48        68.00000   10.48644  84.6%  33.6 1726s
 1472606 1141445   25.24553   46  105   68.00000   10.48690  84.6%  33.6 1731s
 1477563 1145358   35.14932   67   79   68.00000   10.48901  84.6%  33.6 1736s
 1482401 1149226   48.72991   84   78   68.00000   10.48950  84.6%  33.6 1740s
 1487110 1152672   59.01012  105   94   68.00000   10.49179  84.6%  33.6 1746s
 1489841 1154664   51.88608   86   73   68.00000   10.49184  84.6%  33.6 1750s
 1494929 1158652   25.27787   50   93   68.00000   10.49299  84.6%  33.6 1755s
 1500148 1162737   17.47109   56  109   68.00000   10.49384  84.6%  33.6 1761s
 1505101 1166531   66.16370  130   49   68.00000   10.49443  84.6%  33.6 1766s
 1509404 1169713   43.33396   79  102   68.00000   10.49492  84.6%  33.6 1772s
 1513087 1172640   64.49288  104   95   68.00000   10.49526  84.6%  33.6 1775s
 1518219 1176737   29.57422   75   73   68.00000   10.49602  84.6%  33.6 1780s
 1523352 1180755   51.01937   96   93   68.00000   10.49695  84.6%  33.6 1786s
 1527722 1184054   31.87374   58   86   68.00000   10.49844  84.6%  33.6 1791s
 1531535 1186977     cutoff  114        68.00000   10.49860  84.6%  33.6 1796s
 1537291 1191523   26.56610   60   71   68.00000   10.49879  84.6%  33.6 1800s

Explored 1538102 nodes (51660571 simplex iterations) in 1800.04 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 68 69 70 ... 149

Time limit reached
Best objective 6.800000000000e+01, best bound 1.100000000000e+01, gap 83.8235%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2339.5 MiB   2339.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2339.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2339.5 MiB      0.0 MiB       m2 = m.construct()
    28   2339.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2339.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2339.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2339.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2339.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2339.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2339.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2339.5 MiB      0.0 MiB       m2.update()
    44   2339.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2339.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2339.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2339.5 MiB      0.0 MiB       if(find_optimum):
    55   2339.5 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56   2339.5 MiB      0.0 MiB           m2.update()
    57   2339.5 MiB      0.0 MiB           new_obj = LinExpr(0)
    58   2339.5 MiB      0.0 MiB           for var in current_vars:
    59   2339.5 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60   2339.5 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61   2339.5 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62   2339.5 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1675.8 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1675.8 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1675.8 MiB      0.0 MiB       j = 0
    69   1675.8 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1675.8 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1675.8 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1675.8 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1675.8 MiB      0.0 MiB       if m2.status == 9:
    78   1675.8 MiB      0.0 MiB           result.timeout = True
    79   1675.8 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1675.8 MiB      0.0 MiB           result.solution = True
    81   1675.8 MiB      0.0 MiB           result.feasible = True
    82   1675.8 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1675.8 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1675.8 MiB      0.0 MiB           for v in current_vars:
    85   1675.8 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1675.8 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1675.8 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89   1675.8 MiB      0.0 MiB                       res_vec[j] = 0
    90   1675.8 MiB      0.0 MiB                   j = j+1
    91                             
    92   1675.8 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 21:53:15 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.tra,lab' -mdp /tmp/tmpa8avtff9

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpa8avtff9"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.023 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      70 (1 initial)
Transitions: 85
Choices:     70

Transition matrix: 255 nodes (3 terminal), 85 minterms, vars: 7r/7c/1nd

Prob0A: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 378 iterations in 0.01 seconds (average 0.000032, setup 0.00)

yes = 11, no = 1, maybe = 58

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=7, nodes=237] [11.1 KB]
Adding sparse bits... [levels=7-7, num=1, compact=1/1] [0.4 KB]
Creating vector for yes... [dist=2, compact] [0.2 KB]
Allocating iteration vectors... [3 x 0.5 KB]
TOTAL: [13.3 KB]

Starting iterations...

Iterative method: 2134 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 0.619047607394404

Time for model checking: 0.02 seconds.

Result: 0.619047607394404 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 1584 columns and 4117 nonzeros
Variable types: 528 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [6e-01, 2e+00]
Presolve removed 289 rows and 280 columns
Presolve time: 0.01s
Presolved: 1296 rows, 1304 columns, 3548 nonzeros
Variable types: 486 continuous, 818 integer (818 binary)

Root relaxation: objective 6.000000e-01, 2 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.60000    0    2          -    0.60000      -     -    0s
     0     2    2.20000    0    4          -    2.20000      -     -    0s
H 2354  1965                     174.0000000    6.73333  96.1%   9.0    1s
H 2452  1927                     135.0000000    6.73333  95.0%   9.4    2s
H 4331  2849                     124.0000000    6.73333  94.6%  10.5    4s
  4560  2914   49.24955   90   17  124.00000    6.73333  94.6%  10.3    5s
H12881  8096                     113.0000000    8.60000  92.4%  10.1    7s
H16348 10689                     110.0000000    8.80000  92.0%   9.7    8s
H17678 11687                     105.0000000    9.10000  91.3%   9.6    8s
 22465 15506 infeasible   76       105.00000    9.40000  91.0%   9.3   10s
H22595 15572                     104.0000000    9.40000  91.0%   9.2   10s
H23290 16096                     103.0000000    9.40000  90.9%   9.3   10s
H23513 16154                     100.0000000    9.40000  90.6%   9.3   10s
H23902 16260                      96.0000000    9.40000  90.2%   9.3   10s
 39102 27459   33.75278   50   13   96.00000    9.96667  89.6%   9.9   15s
H44188 31090                      93.0000000   10.21111  89.0%  10.3   17s
H46119 32044                      90.0000000   10.30000  88.6%  10.4   18s
 52095 36394   54.10855   78   27   90.00000   10.40000  88.4%  10.6   20s
 69975 48938   27.56667   42   18   90.00000   10.76667  88.0%  11.2   25s
 87827 61620 infeasible   32        90.00000   10.96667  87.8%  11.6   30s
 105702 74118 infeasible   59        90.00000   11.40000  87.3%  11.9   35s
 122323 86172   26.26667   44   10   90.00000   11.53333  87.2%  12.2   40s
 140297 99118   85.09815   37   46   90.00000   11.68333  87.0%  12.3   45s
 157667 111334   29.93333   45   20   90.00000   11.80000  86.9%  12.5   50s
 174528 123457   45.13175   76   21   90.00000   11.86667  86.8%  12.6   55s
H174529 122960                      88.0000000   11.86667  86.5%  12.6   55s
 189289 133166     cutoff   63        88.00000   12.00000  86.4%  12.7   60s
 206466 145210   71.74379   99   55   88.00000   12.20000  86.1%  12.7   65s
 223489 157200   51.62786   40   38   88.00000   12.30769  86.0%  12.9   70s
 239713 168797   21.73333   41    5   88.00000   12.40000  85.9%  13.0   75s
H247704 172777                      85.0000000   12.40000  85.4%  13.0   77s
 253761 177037   62.75000   69   39   85.00000   12.43333  85.4%  13.0   80s
 270792 189343   33.65556   49   16   85.00000   12.52222  85.3%  13.0   85s
 285829 200086   41.24035   55   16   85.00000   12.60000  85.2%  13.1   90s
 298747 209199   22.63333   37    9   85.00000   12.62222  85.2%  13.1   95s
 316639 222032 infeasible   80        85.00000   12.71111  85.0%  13.1  100s
H319883 223607                      84.0000000   12.71111  84.9%  13.1  101s
H320086 221683                      82.0000000   12.71111  84.5%  13.1  101s
 328147 227383   62.35622   73   54   82.00000   12.76667  84.4%  13.2  105s
 341072 236510   49.67685   77   29   82.00000   12.80000  84.4%  13.2  110s
 357150 248427 infeasible   39        82.00000   12.82222  84.4%  13.2  115s
 370496 258115   33.80000   53    7   82.00000   12.87778  84.3%  13.3  120s
H380202 261117                      79.0000000   12.91905  83.6%  13.2  124s
 381491 262005   67.97778   85   35   79.00000   12.91905  83.6%  13.3  125s
 396490 272857   29.63333   47   20   79.00000   12.96667  83.6%  13.3  130s
 414178 285477     cutoff   84        79.00000   13.10000  83.4%  13.3  135s
 425337 293484   29.57879   43   17   79.00000   13.13333  83.4%  13.3  140s
 439296 303532   56.97778   83   13   79.00000   13.20000  83.3%  13.3  145s
 451953 312787     cutoff   78        79.00000   13.20000  83.3%  13.2  150s
 462703 320484 infeasible   69        79.00000   13.20952  83.3%  13.3  155s
 476620 330296   38.56418   64   14   79.00000   13.26667  83.2%  13.3  160s
 491191 340804   59.78333   81   21   79.00000   13.31111  83.2%  13.3  165s
 505652 351323 infeasible   76        79.00000   13.36667  83.1%  13.3  170s
 518332 360523 infeasible   94        79.00000   13.40000  83.0%  13.3  175s
 534112 372062   76.57963   92   54   79.00000   13.40000  83.0%  13.3  181s
H534244 368289                      77.0000000   13.40000  82.6%  13.3  181s
 544247 375575     cutoff   44        77.00000   13.43333  82.6%  13.3  185s
 559589 386550   64.40896   80   22   77.00000   13.46667  82.5%  13.3  190s
 577608 399785   69.31596   93   36   77.00000   13.51111  82.5%  13.3  195s
 591472 409801   13.92121   31    7   77.00000   13.53333  82.4%  13.3  200s
 599499 415631   74.53333  126   12   77.00000   13.55714  82.4%  13.3  205s
 610672 423635   47.97419   70   14   77.00000   13.60000  82.3%  13.3  210s
 620880 430804   22.53333   36   15   77.00000   13.60000  82.3%  13.3  215s
 636251 441897   14.62381   30    8   77.00000   13.62400  82.3%  13.3  220s
 648488 450898   43.40000   56   19   77.00000   13.63636  82.3%  13.3  225s
 663525 461837   17.80000   35   11   77.00000   13.70000  82.2%  13.3  230s
 677337 471731   37.54444   54   19   77.00000   13.72121  82.2%  13.3  235s
 689752 480741   32.47500   49    9   77.00000   13.75238  82.1%  13.3  240s
 702864 489946   22.06296   41   10   77.00000   13.78667  82.1%  13.3  245s
 718326 500693 infeasible   68        77.00000   13.80000  82.1%  13.3  250s
 731533 510353   43.60000   61   15   77.00000   13.80000  82.1%  13.3  255s
 747706 521967   35.77449   53   23   77.00000   13.86667  82.0%  13.3  260s
 762212 532169   36.07949   48   20   77.00000   13.88687  82.0%  13.3  265s
 773271 540373   75.11351  104   18   77.00000   13.90000  81.9%  13.3  270s
 787994 551022   36.05455   44   23   77.00000   13.93333  81.9%  13.3  275s
 805651 563769   25.80889   42   12   77.00000   13.95556  81.9%  13.3  280s
 823561 576814   22.83902   36   12   77.00000   14.00000  81.8%  13.3  285s
 840467 589172   50.45833   62   26   77.00000   14.06190  81.7%  13.3  290s
 855221 599789   65.70000   78   17   77.00000   14.10000  81.7%  13.3  295s
 869620 609947   53.86875   63   21   77.00000   14.10909  81.7%  13.3  300s
 884761 620723   53.01667   74   19   77.00000   14.13333  81.6%  13.3  305s
 899599 631442   55.18667   77   21   77.00000   14.18095  81.6%  13.3  310s
 918032 644516   42.56667   57   17   77.00000   14.20000  81.6%  13.3  315s
 930700 653723   69.61678   96   33   77.00000   14.20000  81.6%  13.3  320s
 945143 664110   16.73333   37    5   77.00000   14.20000  81.6%  13.3  325s
 962646 677069   55.70000   65   15   77.00000   14.20000  81.6%  13.3  330s
 981530 690603     cutoff   58        77.00000   14.25556  81.5%  13.3  335s
 999177 703105 infeasible   54        77.00000   14.26667  81.5%  13.3  340s
 1015526 715110   73.11912  102   20   77.00000   14.26667  81.5%  13.3  345s
 1029598 725326   22.05140   39   12   77.00000   14.30000  81.4%  13.2  350s
 1044006 735757 infeasible   96        77.00000   14.33333  81.4%  13.2  355s
 1058409 746295   33.00455   49   12   77.00000   14.35556  81.4%  13.2  360s
 1072681 756483   69.88503   94   27   77.00000   14.36667  81.3%  13.2  365s
 1087115 766883   14.40000   31    6   77.00000   14.40000  81.3%  13.2  370s
 1097738 774551   72.91016  103   22   77.00000   14.40000  81.3%  13.2  375s
 1113691 786317 infeasible   88        77.00000   14.40000  81.3%  13.2  380s
 1128218 796849     cutoff   63        77.00000   14.41905  81.3%  13.2  385s
 1140559 805674   71.34956  101   17   77.00000   14.43333  81.3%  13.2  390s
 1155557 816612   71.12360   76   29   77.00000   14.43810  81.2%  13.2  395s
 1166790 824510     cutoff   76        77.00000   14.45714  81.2%  13.2  400s
 1179679 833410   18.60000   35   11   77.00000   14.46667  81.2%  13.2  405s
 1192963 842944   70.70721  101   34   77.00000   14.46667  81.2%  13.2  410s
 1207479 853598   52.42222   79   15   77.00000   14.52222  81.1%  13.2  415s
 1219975 862718   61.15000   71   52   77.00000   14.53333  81.1%  13.2  420s
 1232821 871666 infeasible   64        77.00000   14.53868  81.1%  13.2  425s
 1250282 884119   51.58267   87   14   77.00000   14.60000  81.0%  13.2  430s
 1263596 893559   38.09697   61   14   77.00000   14.60000  81.0%  13.2  435s
 1276415 902612   33.42222   50   20   77.00000   14.60000  81.0%  13.2  440s
 1289803 912035   30.94878   51   12   77.00000   14.60667  81.0%  13.2  445s
 1301088 920396   23.13333   48    6   77.00000   14.62020  81.0%  13.2  450s
 1313657 929601     cutoff   81        77.00000   14.63333  81.0%  13.2  455s
 1324809 937780   71.13333   81   27   77.00000   14.63333  81.0%  13.2  460s
 1337918 947068   52.47778   64   22   77.00000   14.66667  81.0%  13.2  465s
 1351559 957184 infeasible   97        77.00000   14.68889  80.9%  13.2  470s
 1363841 965870   49.53333   54   17   77.00000   14.70000  80.9%  13.1  475s
 1370384 970518     cutoff   63        77.00000   14.71111  80.9%  13.1  480s
 1380824 977994   56.60000   57   19   77.00000   14.73333  80.9%  13.1  485s
H1383367 970870                      75.0000000   14.73333  80.4%  13.1  487s
 1388844 974950   60.97576   68   18   75.00000   14.73333  80.4%  13.1  490s
 1405630 987293 infeasible   70        75.00000   14.74000  80.3%  13.1  495s
 1421821 999163   22.20000   33   15   75.00000   14.75238  80.3%  13.1  500s
 1437920 1010388   43.74167   65   22   75.00000   14.76667  80.3%  13.1  505s
 1446334 1016171   51.64938   66   26   75.00000   14.78889  80.3%  13.1  510s
 1457056 1024013   26.60000   48    9   75.00000   14.80000  80.3%  13.1  515s
 1470341 1032719 infeasible   34        75.00000   14.80000  80.3%  13.1  520s
 1484885 1043170     cutoff   87        75.00000   14.80000  80.3%  13.2  525s
 1500058 1054007   55.48333   69   32   75.00000   14.80000  80.3%  13.1  530s
 1514094 1064046   62.74971   91   12   75.00000   14.83333  80.2%  13.1  535s
 1525840 1072446   18.53333   36    7   75.00000   14.86111  80.2%  13.1  540s
 1540157 1082719 infeasible  106        75.00000   14.86667  80.2%  13.1  545s
 1555852 1093947   29.38889   58   10   75.00000   14.88333  80.2%  13.1  550s
 1572754 1106327   71.93850   89   52   75.00000   14.90000  80.1%  13.1  555s
 1592268 1120225   30.69347   49   15   75.00000   14.93333  80.1%  13.1  560s
 1601046 1126408 infeasible   83        75.00000   14.93333  80.1%  13.1  565s
 1613741 1135471 infeasible   81        75.00000   14.93333  80.1%  13.1  570s
 1622376 1141584   28.63333   47   13   75.00000   14.93333  80.1%  13.1  575s
 1632656 1148832   29.26667   44   17   75.00000   14.93333  80.1%  13.1  580s
 1643229 1156511   54.93913   64   56   75.00000   14.95000  80.1%  13.1  585s
 1653107 1163460   18.79259   34    9   75.00000   14.96190  80.1%  13.1  590s
 1666232 1172776     cutoff   66        75.00000   14.96847  80.0%  13.1  595s
 1677043 1180525   17.58889   31   17   75.00000   15.00000  80.0%  13.1  600s
 1685997 1186946     cutoff   95        75.00000   15.01667  80.0%  13.1  605s
 1698321 1195856   22.13333   38   10   75.00000   15.03333  80.0%  13.1  610s
 1709857 1204168   41.70488   65   21   75.00000   15.04444  79.9%  13.1  615s
 1723162 1213703   29.65000   56   13   75.00000   15.06667  79.9%  13.1  620s
 1733887 1221363   38.03333   46   21   75.00000   15.06667  79.9%  13.1  625s
 1747525 1231069     cutoff   62        75.00000   15.10000  79.9%  13.1  630s
 1759423 1239575 infeasible   53        75.00000   15.10000  79.9%  13.1  636s
 1768501 1246157 infeasible   49        75.00000   15.10000  79.9%  13.1  640s
 1781665 1255564   65.96956   82   28   75.00000   15.11111  79.9%  13.1  645s
 1795715 1265693   70.83728  101   36   75.00000   15.13333  79.8%  13.1  650s
 1807509 1274297   19.93333   39   10   75.00000   15.13333  79.8%  13.1  655s
 1822744 1285296   71.96944   95   34   75.00000   15.13333  79.8%  13.1  660s
 1836852 1295670 infeasible   89        75.00000   15.15000  79.8%  13.1  665s
 1848031 1303617   47.73141   65   24   75.00000   15.17593  79.8%  13.1  670s
 1862905 1314409     cutoff   78        75.00000   15.20000  79.7%  13.1  675s
 1872989 1321468   31.28333   46   19   75.00000   15.20000  79.7%  13.1  680s
 1882303 1328106   32.36944   49   18   75.00000   15.20000  79.7%  13.0  685s
 1893017 1335767   15.26667   36    4   75.00000   15.20000  79.7%  13.0  690s
 1906751 1345760   19.93333   36   10   75.00000   15.20000  79.7%  13.0  695s
 1918486 1353953   30.03750   44   11   75.00000   15.20000  79.7%  13.0  700s
 1931706 1363367   38.86667   60   18   75.00000   15.20000  79.7%  13.0  705s
 1945559 1373094   31.57201   49   13   75.00000   15.20000  79.7%  13.0  710s
 1959310 1382880   73.48447  106   22   75.00000   15.20000  79.7%  13.0  715s
 1974572 1393610   29.44444   46   11   75.00000   15.20000  79.7%  13.0  720s
 1985691 1401712   37.28067   61   16   75.00000   15.20556  79.7%  13.0  725s
 2001485 1412787 infeasible   95        75.00000   15.21905  79.7%  13.0  730s
 2016905 1423884   63.63333   79   19   75.00000   15.26667  79.6%  13.0  735s
 2030974 1434176   28.61111   48   14   75.00000   15.26667  79.6%  13.0  740s
 2044756 1444210   71.51250   77   19   75.00000   15.26667  79.6%  13.0  745s
 2060633 1455915   53.82222   66   24   75.00000   15.26667  79.6%  13.0  750s
 2071101 1463553   40.37417   48   26   75.00000   15.26667  79.6%  13.0  755s
 2083996 1472657   57.84815   72   44   75.00000   15.26667  79.6%  13.0  760s
 2099478 1484058   36.64444   46   19   75.00000   15.26667  79.6%  13.0  765s
 2113321 1493845   24.89333   46   11   75.00000   15.28889  79.6%  13.0  770s
 2125805 1503079   36.85000   57   18   75.00000   15.30000  79.6%  13.0  775s
 2139129 1512728   64.43000  101   22   75.00000   15.30000  79.6%  13.0  780s
 2149556 1520113   65.10000   72   25   75.00000   15.31905  79.6%  13.0  785s
 2165968 1531730   55.28333   76   17   75.00000   15.33889  79.5%  13.0  790s
 2179360 1541623   22.25000   42   11   75.00000   15.35556  79.5%  13.0  795s
 2195207 1553362   65.24167   90   36   75.00000   15.35556  79.5%  13.0  800s
 2205820 1560913   68.89474   77   20   75.00000   15.36667  79.5%  13.0  805s
 2215765 1568166   37.91412   53   16   75.00000   15.37778  79.5%  13.0  810s
 2228785 1577427   67.19889   89   38   75.00000   15.39444  79.5%  13.0  815s
 2246785 1590595   68.45801   84   40   75.00000   15.40000  79.5%  12.9  820s
 2264421 1603518   23.36154   43    7   75.00000   15.40000  79.5%  12.9  825s
 2275261 1611527   30.97778   54   11   75.00000   15.40000  79.5%  12.9  830s
 2288837 1621281   43.42889   72   22   75.00000   15.40000  79.5%  12.9  835s
 2299967 1629173   59.00000   79   29   75.00000   15.41905  79.4%  12.9  840s
 2310741 1636911   63.60000   67   34   75.00000   15.41905  79.4%  12.9  845s
 2324811 1647142   25.36667   38   16   75.00000   15.41905  79.4%  12.9  850s
 2337027 1655769     cutoff   62        75.00000   15.43333  79.4%  12.9  855s
 2348284 1663830   73.49864   97   23   75.00000   15.43333  79.4%  12.9  860s
 2361662 1673429   56.97377   68   26   75.00000   15.43333  79.4%  12.9  865s
 2370549 1679873   72.70125  102   32   75.00000   15.43810  79.4%  12.9  870s
 2383024 1688570 infeasible   82        75.00000   15.45714  79.4%  12.9  875s
 2395366 1697338   38.02746   58   14   75.00000   15.46667  79.4%  12.9  880s
 2410236 1708251   16.36667   32   14   75.00000   15.46667  79.4%  12.9  885s
 2423897 1718347 infeasible   88        75.00000   15.46667  79.4%  12.9  890s
 2434130 1725792   60.47205   81   28   75.00000   15.46667  79.4%  12.9  895s
 2451221 1738162   16.46667   35    8   75.00000   15.46667  79.4%  12.9  900s
 2463154 1746552   70.11618  102   20   75.00000   15.50000  79.3%  12.9  905s
 2473604 1754347   43.11111   60   22   75.00000   15.51429  79.3%  12.9  910s
 2487483 1764447   20.11515   38    8   75.00000   15.53333  79.3%  12.9  915s
 2501666 1774890     cutoff   57        75.00000   15.53333  79.3%  12.9  920s
 2511914 1782258     cutoff  101        75.00000   15.53333  79.3%  12.9  925s
 2527371 1793210   25.76667   48    9   75.00000   15.53333  79.3%  12.9  930s
 2541489 1803262   72.05255   82   52   75.00000   15.56667  79.2%  12.9  935s
 2557330 1814547   53.26667   70   22   75.00000   15.58889  79.2%  12.9  940s
 2571680 1824666 infeasible   94        75.00000   15.60000  79.2%  12.8  945s
 2582650 1832565   28.13795   45   13   75.00000   15.60000  79.2%  12.9  950s
 2597151 1842687   22.53333   44    9   75.00000   15.60000  79.2%  12.9  955s
 2612632 1853718   45.90000   57   24   75.00000   15.60000  79.2%  12.9  960s
 2630592 1866642   15.96667   34    7   75.00000   15.61667  79.2%  12.8  965s
 2644941 1876674   44.01667   69   13   75.00000   15.63333  79.2%  12.8  970s
 2656854 1885353   71.41597   89   42   75.00000   15.63333  79.2%  12.8  975s
 2673575 1897626   50.32083   58   23   75.00000   15.63333  79.2%  12.8  980s
 2690535 1909793   70.89278   87   28   75.00000   15.65000  79.1%  12.8  985s
 2704782 1919905   15.70000   32    9   75.00000   15.67619  79.1%  12.8  990s
 2714306 1926773   36.48254   67   10   75.00000   15.68889  79.1%  12.8  995s
 2728754 1937335   41.86667   40   34   75.00000   15.68889  79.1%  12.8 1000s
 2743358 1947587   24.90222   42    9   75.00000   15.70000  79.1%  12.8 1005s
 2758798 1958446     cutoff   77        75.00000   15.70952  79.1%  12.8 1010s
 2772130 1967917   48.07315   67   18   75.00000   15.72308  79.0%  12.8 1015s
 2785392 1977589   73.12566   77   43   75.00000   15.73333  79.0%  12.8 1020s
 2799033 1987579   69.81944   86   27   75.00000   15.73333  79.0%  12.8 1025s
 2814877 1999042     cutoff   94        75.00000   15.73333  79.0%  12.8 1030s
 2830024 2010249 infeasible   89        75.00000   15.73333  79.0%  12.8 1035s
 2846132 2021930   57.30476   81   29   75.00000   15.73333  79.0%  12.8 1040s
 2859872 2032013   50.89380   75   27   75.00000   15.73333  79.0%  12.8 1045s
 2876745 2044145   53.97976   79   14   75.00000   15.73529  79.0%  12.7 1050s
 2890292 2053837     cutoff   80        75.00000   15.75238  79.0%  12.7 1055s
 2903885 2063690   69.21481  100   22   75.00000   15.75238  79.0%  12.7 1060s
 2920231 2075497   39.37447   55   24   75.00000   15.75238  79.0%  12.7 1065s
 2933785 2085140   61.85833   79   20   75.00000   15.76667  79.0%  12.7 1070s
 2945240 2093156   38.68333   64   15   75.00000   15.76667  79.0%  12.7 1075s
 2958471 2102400   70.50222   58   40   75.00000   15.78333  79.0%  12.7 1080s
 2970043 2110634   65.66228   89   30   75.00000   15.79048  78.9%  12.7 1085s
 2982466 2119190   71.13333   45   35   75.00000   15.80000  78.9%  12.7 1090s
 2994788 2127699   37.43333   62   14   75.00000   15.80000  78.9%  12.7 1095s
 3009261 2137515   51.30000   63   22   75.00000   15.80000  78.9%  12.7 1100s
 3024023 2147977   23.40000   40   13   75.00000   15.80000  78.9%  12.7 1105s
 3039472 2158784   40.05000   55   16   75.00000   15.80000  78.9%  12.7 1110s
 3054988 2169788   30.80000   46   17   75.00000   15.80000  78.9%  12.7 1115s
 3067604 2179085 infeasible   49        75.00000   15.81667  78.9%  12.7 1120s
 3084697 2191096   64.08358   76   45   75.00000   15.83333  78.9%  12.7 1125s
 3095721 2198705   21.24242   42    7   75.00000   15.84444  78.9%  12.7 1130s
 3110866 2209718     cutoff   69        75.00000   15.85556  78.9%  12.7 1135s
 3123730 2218791   17.83030   35   10   75.00000   15.86667  78.8%  12.7 1140s
 3134845 2226413   17.65833   35   12   75.00000   15.86667  78.8%  12.7 1145s
 3148221 2236013   52.31667   64   20   75.00000   15.86667  78.8%  12.7 1150s
 3161208 2245266   66.88903   87   22   75.00000   15.87778  78.8%  12.7 1155s
 3178362 2257252 infeasible   95        75.00000   15.89710  78.8%  12.7 1160s
 3191502 2266577   53.13846   68   29   75.00000   15.90000  78.8%  12.7 1165s
 3207192 2278108   27.52500   49    8   75.00000   15.90000  78.8%  12.7 1170s
 3218640 2286376 infeasible   87        75.00000   15.90952  78.8%  12.7 1175s
 3233944 2297501 infeasible   95        75.00000   15.91667  78.8%  12.7 1180s
 3247486 2307249   22.66667   38   15   75.00000   15.93250  78.8%  12.7 1185s
 3260493 2316664   35.88889   51   16   75.00000   15.93333  78.8%  12.7 1190s
 3271420 2324497   66.89247   95   11   75.00000   15.93333  78.8%  12.7 1195s
 3286775 2335428   56.81667   70   31   75.00000   15.93333  78.8%  12.7 1200s
 3300870 2345464     cutoff   80        75.00000   15.93333  78.8%  12.7 1205s
 3317835 2357408     cutoff   69        75.00000   15.93333  78.8%  12.7 1210s
 3330527 2366385   25.62222   41   13   75.00000   15.93333  78.8%  12.7 1215s
 3345223 2376735   18.73333   31   12   75.00000   15.93333  78.8%  12.7 1220s
 3357324 2385289 infeasible   85        75.00000   15.93333  78.8%  12.7 1225s
 3372682 2396375   58.68458   70   41   75.00000   15.95556  78.7%  12.7 1230s
 3385615 2405562   37.38667   50   21   75.00000   15.95556  78.7%  12.7 1235s
 3400486 2416204   72.37001  107   22   75.00000   15.96667  78.7%  12.7 1240s
 3416285 2427477   67.27917   85   16   75.00000   15.97778  78.7%  12.7 1245s
 3427896 2436032   57.03636   89   15   75.00000   15.98384  78.7%  12.7 1250s
 3441604 2445714   25.45000   42   13   75.00000   16.00000  78.7%  12.7 1255s
 3454523 2454552   17.00000   34   10   75.00000   16.00952  78.7%  12.7 1260s
 3468012 2464316   38.10000   48   23   75.00000   16.02222  78.6%  12.6 1265s
 3480698 2473548   31.52500   56    9   75.00000   16.02222  78.6%  12.6 1270s
 3492853 2482162 infeasible   86        75.00000   16.03333  78.6%  12.6 1275s
 3502529 2488918   48.40000   62   24   75.00000   16.03333  78.6%  12.6 1280s
 3515573 2498465   30.65165   51   14   75.00000   16.03333  78.6%  12.6 1285s
 3531527 2509893   54.09804   71   25   75.00000   16.05000  78.6%  12.6 1290s
 3549013 2522329   69.90000   90   25   75.00000   16.06667  78.6%  12.6 1295s
 3560272 2530282   65.17614   70   46   75.00000   16.06667  78.6%  12.6 1300s
 3567392 2535394   60.41998   78   32   75.00000   16.06667  78.6%  12.6 1305s
 3577452 2542519   46.23333   62   15   75.00000   16.06957  78.6%  12.6 1310s
 3590322 2551881   34.30000   59   19   75.00000   16.08571  78.6%  12.6 1315s
 3604733 2562214   22.76667   41   10   75.00000   16.10000  78.5%  12.6 1320s
 3616065 2570433   24.20000   39   19   75.00000   16.10000  78.5%  12.6 1325s
 3629337 2579889   54.68889   91   16   75.00000   16.10000  78.5%  12.6 1330s
 3641452 2588481     cutoff   98        75.00000   16.10000  78.5%  12.6 1335s
 3654104 2597214   40.05556   58   21   75.00000   16.10667  78.5%  12.6 1340s
 3669233 2607970     cutoff   47        75.00000   16.11667  78.5%  12.6 1345s
 3683116 2617781   20.20000   33   14   75.00000   16.12381  78.5%  12.6 1350s
 3697013 2627545 infeasible   70        75.00000   16.13333  78.5%  12.6 1355s
 3712378 2638487 infeasible   67        75.00000   16.13333  78.5%  12.6 1360s
 3719942 2644039   61.18018   73   30   75.00000   16.13333  78.5%  12.6 1365s
 3734539 2654548   69.56154   91   44   75.00000   16.13333  78.5%  12.6 1370s
 3747383 2663916   47.29444   61   28   75.00000   16.13333  78.5%  12.6 1375s
 3762233 2674283   41.71333   63   11   75.00000   16.13333  78.5%  12.6 1380s
 3777025 2684850   45.96116   81   13   75.00000   16.13333  78.5%  12.6 1385s
 3787660 2692376   18.71111   38    9   75.00000   16.14444  78.5%  12.6 1390s
 3802450 2702617   24.90000   44    7   75.00000   16.16000  78.5%  12.6 1395s
 3818558 2714231   69.27222   78   46   75.00000   16.17333  78.4%  12.6 1400s
 3832226 2724038   44.52014   54   30   75.00000   16.18333  78.4%  12.6 1405s
 3842612 2731319   35.51206   49   14   75.00000   16.20000  78.4%  12.6 1410s
 3856427 2741044   40.41389   58   30   75.00000   16.20000  78.4%  12.6 1415s
 3870816 2751329   46.36000   67   14   75.00000   16.20000  78.4%  12.6 1420s
 3885113 2761377   37.03333   56   16   75.00000   16.20000  78.4%  12.6 1425s
 3896418 2769448   53.25507   71   27   75.00000   16.20000  78.4%  12.6 1430s
 3907500 2777268   20.70000   38    9   75.00000   16.20000  78.4%  12.6 1435s
 3917025 2783806   71.32353   90   29   75.00000   16.20000  78.4%  12.6 1440s
 3931234 2793799   16.30000   34    4   75.00000   16.20000  78.4%  12.6 1445s
 3944558 2802937   26.00000   45    6   75.00000   16.20000  78.4%  12.6 1450s
 3959335 2813242   31.46667   52   11   75.00000   16.20000  78.4%  12.6 1455s
 3973341 2823345   65.83476   94   33   75.00000   16.20000  78.4%  12.6 1460s
 3986787 2832863   56.36615   77   34   75.00000   16.20000  78.4%  12.6 1465s
 4000050 2842117   29.76812   51   10   75.00000   16.20000  78.4%  12.6 1470s
 4015146 2852613 infeasible   72        75.00000   16.20000  78.4%  12.6 1475s
 4030307 2863189   60.30746   89   24   75.00000   16.20000  78.4%  12.6 1480s
 4045105 2873532   28.23860   48   10   75.00000   16.20444  78.4%  12.6 1485s
 4060928 2884801   29.62564   60    7   75.00000   16.21905  78.4%  12.6 1490s
 4075250 2895000   70.34310   86   26   75.00000   16.22778  78.4%  12.6 1495s
 4085911 2902335   27.45333   43   11   75.00000   16.23333  78.4%  12.6 1500s
 4102321 2914191   20.13333   40    6   75.00000   16.24444  78.3%  12.6 1505s
 4115943 2924117   28.44359   43   15   75.00000   16.25143  78.3%  12.6 1510s
 4130743 2934700 infeasible   91        75.00000   16.26667  78.3%  12.6 1515s
 4147165 2946212   43.35944   57   24   75.00000   16.26667  78.3%  12.6 1520s
 4160170 2955517     cutoff   78        75.00000   16.26667  78.3%  12.6 1525s
 4174775 2965805   16.70000   38    7   75.00000   16.26667  78.3%  12.6 1530s
 4189164 2976214     cutoff   73        75.00000   16.26667  78.3%  12.6 1535s
H4196946 2970526                      74.0000000   16.26667  78.0%  12.6 1540s
 4210701 2980409   66.09163   67   57   74.00000   16.26667  78.0%  12.6 1545s
 4225227 2990789   26.26667   43   13   74.00000   16.26667  78.0%  12.6 1550s
 4239252 3000923   44.20000   54   18   74.00000   16.26667  78.0%  12.6 1555s
 4252148 3010136   69.46032   82   30   74.00000   16.26667  78.0%  12.6 1560s
 4265397 3019738   69.93333  108   19   74.00000   16.26667  78.0%  12.5 1565s
 4275064 3026567   59.77222   86   22   74.00000   16.26667  78.0%  12.5 1570s
 4287888 3035609   16.53333   37    7   74.00000   16.26667  78.0%  12.5 1575s
 4300273 3044397   17.23333   33    9   74.00000   16.27692  78.0%  12.5 1580s
 4310922 3052038   47.43704   58   23   74.00000   16.28333  78.0%  12.5 1585s
 4324654 3061619     cutoff   99        74.00000   16.29333  78.0%  12.5 1590s
 4338253 3071362   63.91948   75   32   74.00000   16.30000  78.0%  12.5 1595s
 4351380 3080722   34.80247   52   15   74.00000   16.30000  78.0%  12.5 1600s
 4361318 3087918   19.40000   37    5   74.00000   16.30000  78.0%  12.5 1605s
 4377189 3099127   40.85000   55   24   74.00000   16.30000  78.0%  12.5 1610s
 4392127 3109648     cutoff  103        74.00000   16.30667  78.0%  12.5 1615s
 4408345 3121240   18.78632   39   10   74.00000   16.32222  77.9%  12.5 1620s
 4422814 3131935   60.93333   97    4   74.00000   16.33194  77.9%  12.5 1625s
 4437694 3142646   56.96375   70   21   74.00000   16.33333  77.9%  12.5 1630s
 4448125 3149856   42.66383   56   22   74.00000   16.35000  77.9%  12.5 1635s
 4462424 3160027   17.93333   37   10   74.00000   16.35556  77.9%  12.5 1640s
 4473140 3167988   65.34815  106   12   74.00000   16.35556  77.9%  12.5 1645s
 4488337 3179105 infeasible   87        74.00000   16.36000  77.9%  12.5 1650s
 4503186 3189698   67.22766  104   18   74.00000   16.36667  77.9%  12.5 1655s
 4517830 3199687   29.69854   46   11   74.00000   16.37778  77.9%  12.5 1660s
 4530884 3209015   16.80000   34    5   74.00000   16.38551  77.9%  12.5 1665s
 4542415 3217232   45.32778   66   16   74.00000   16.39231  77.8%  12.5 1670s
 4554961 3226139   63.40667   82   23   74.00000   16.40000  77.8%  12.5 1675s
 4568740 3235909   42.46439   77   11   74.00000   16.40000  77.8%  12.5 1680s
 4584517 3247311   40.62500   60   20   74.00000   16.40000  77.8%  12.5 1685s
 4600305 3258666   16.56667   29   10   74.00000   16.40000  77.8%  12.5 1690s
 4615490 3269517 infeasible   60        74.00000   16.40000  77.8%  12.5 1695s
 4625978 3277159   56.56667   90   14   74.00000   16.40000  77.8%  12.5 1700s
 4639412 3286620   59.12238   75   22   74.00000   16.40000  77.8%  12.4 1705s
 4650717 3294702   43.83333   59   23   74.00000   16.40000  77.8%  12.4 1710s
 4664117 3304089   41.45000   53   25   74.00000   16.40476  77.8%  12.4 1715s
 4675755 3312352   29.53333   54   14   74.00000   16.41667  77.8%  12.4 1720s
 4686670 3320247   55.74028   78   14   74.00000   16.41905  77.8%  12.4 1725s
 4695432 3326507   44.24444   56   20   74.00000   16.41905  77.8%  12.4 1730s
 4711321 3337879   38.33333   60   16   74.00000   16.41905  77.8%  12.4 1735s
 4727495 3349434   69.33083   91   32   74.00000   16.41905  77.8%  12.4 1740s
 4742273 3360009   60.75833   81   33   74.00000   16.41905  77.8%  12.4 1745s
 4756527 3369951   66.58056   88   21   74.00000   16.43333  77.8%  12.4 1750s
 4767513 3377765   48.90000   52   29   74.00000   16.43333  77.8%  12.4 1755s
 4777556 3384873   69.15376  104   14   74.00000   16.43333  77.8%  12.4 1760s
 4791106 3394432   19.73333   32   11   74.00000   16.43333  77.8%  12.4 1765s
 4801880 3401982   31.77222   42   16   74.00000   16.43333  77.8%  12.4 1770s
 4817812 3413254   28.21414   46   16   74.00000   16.43333  77.8%  12.4 1775s
 4831845 3423190   20.20000   38    9   74.00000   16.43810  77.8%  12.4 1780s
 4847855 3434361   71.75000   86   30   74.00000   16.45714  77.8%  12.4 1785s
 4857933 3441286   18.26667   36    9   74.00000   16.45714  77.8%  12.4 1790s
 4866237 3446956 infeasible   67        74.00000   16.45714  77.8%  12.4 1795s
 4878544 3455702   70.63884   93   23   74.00000   16.46667  77.7%  12.4 1800s

Explored 4879277 nodes (60594550 simplex iterations) in 1800.04 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 74 75 77 ... 93

Time limit reached
Best objective 7.400000000000e+01, best bound 1.700000000000e+01, gap 77.0270%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1122.2 MiB   1122.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1122.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1122.2 MiB      0.0 MiB       m2 = m.construct()
    28   1122.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1122.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1122.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1122.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1122.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1122.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1122.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1122.2 MiB      0.0 MiB       m2.update()
    44   1122.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1122.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1122.2 MiB      0.0 MiB       if(set_binary):
    51   1122.2 MiB      0.0 MiB           for x in set_binary:
    52   1122.2 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1122.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   4051.8 MiB   2929.6 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   4051.8 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   4051.8 MiB      0.0 MiB       j = 0
    69   4051.8 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   4051.8 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   4051.8 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   4051.8 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   4051.8 MiB      0.0 MiB       if m2.status == 9:
    78   4051.8 MiB      0.0 MiB           result.timeout = True
    79   4051.8 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   4051.8 MiB      0.0 MiB           result.solution = True
    81   4051.8 MiB      0.0 MiB           result.feasible = True
    82   4051.8 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   4051.8 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   4051.8 MiB      0.0 MiB           for v in current_vars:
    85   4051.8 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   4051.8 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   4051.8 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   4051.8 MiB      0.0 MiB                   j = j+1
    91                             
    92   4051.8 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 22:23:22 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.tra,lab' -mdp /tmp/tmp9o03ai36

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.6.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp9o03ai36"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Time for model construction: 0.029 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      76 (1 initial)
Transitions: 163
Choices:     146

Transition matrix: 283 nodes (3 terminal), 163 minterms, vars: 7r/7c/2nd

Prob0A: 32 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 514 iterations in 0.02 seconds (average 0.000031, setup 0.00)

yes = 10, no = 1, maybe = 65

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=7, nodes=287] [13.5 KB]
Adding sparse bits... [levels=7-7, num=2, compact=2/2] [0.7 KB]
Creating vector for yes... [dist=2, compact] [0.2 KB]
Allocating iteration vectors... [3 x 0.6 KB]
TOTAL: [16.1 KB]

Starting iterations...

Iterative method: 3007 iterations in 0.00 seconds (average 0.000001, setup 0.00)

Value in the initial state: 0.7352940863942236

Time for model checking: 0.029 seconds.

Result: 0.7352940863942236 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [7e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   7.000000e-01   0.000000e+00      0s
     566    1.3390000e+02   0.000000e+00   0.000000e+00      0s

Solved in 566 iterations and 0.03 seconds
Optimal objective  1.339000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1941.0 MiB   1941.0 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1941.0 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1941.0 MiB      0.0 MiB       m2 = m.construct()
    28   1941.0 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1941.0 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1941.0 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1941.0 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1941.0 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1941.0 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1941.0 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1941.0 MiB      0.0 MiB       m2.update()
    44   1941.0 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1941.0 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1941.0 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1941.0 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1941.0 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1941.0 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1941.0 MiB      0.0 MiB       j = 0
    69   1941.0 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1941.0 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1941.0 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1941.0 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1941.0 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1941.0 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1941.0 MiB      0.0 MiB           result.solution = True
    81   1941.0 MiB      0.0 MiB           result.feasible = True
    82   1941.0 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1941.0 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1941.0 MiB      0.0 MiB           for v in current_vars:
    85   1941.0 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1941.0 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1941.0 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1941.0 MiB      0.0 MiB                   j = j+1
    91                             
    92   1941.0 MiB      0.0 MiB       return result, res_vec



subsystem size:208

probability: 0.7
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 22:23:24 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.tra,lab' -mdp /tmp/tmpql9i90m2

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpql9i90m2"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 79 iterations in 0.00 seconds (average 0.000051, setup 0.00)

Time for model construction: 0.039 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      209 (1 initial)
Transitions: 260
Choices:     210

Transition matrix: 557 nodes (3 terminal), 260 minterms, vars: 8r/8c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 409 iterations in 0.02 seconds (average 0.000059, setup 0.00)

yes = 76, no = 1, maybe = 132

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=454] [21.3 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [1.1 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.6 KB]
TOTAL: [27.7 KB]

Starting iterations...

Iterative method: 2238 iterations in 0.01 seconds (average 0.000004, setup 0.00)

Value in the initial state: 0.8182288627615273

Time for model checking: 0.042 seconds.

Result: 0.8182288627615273 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [7e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   7.000000e-01   0.000000e+00      0s
     566    1.3390000e+02   0.000000e+00   0.000000e+00      0s

Solved in 566 iterations and 0.03 seconds
Optimal objective  1.339000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1941.0 MiB   1941.0 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1941.0 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1941.0 MiB      0.0 MiB       m2 = m.construct()
    28   1941.0 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1941.0 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1941.0 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1941.0 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1941.0 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1941.0 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1941.0 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1941.0 MiB      0.0 MiB       m2.update()
    44   1941.0 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1941.0 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1941.0 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1941.0 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1941.0 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1941.0 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1941.0 MiB      0.0 MiB       j = 0
    69   1941.0 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1941.0 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1941.0 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1941.0 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1941.0 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1941.0 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1941.0 MiB      0.0 MiB           result.solution = True
    81   1941.0 MiB      0.0 MiB           result.feasible = True
    82   1941.0 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1941.0 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1941.0 MiB      0.0 MiB           for v in current_vars:
    85   1941.0 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1941.0 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1941.0 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1941.0 MiB      0.0 MiB                   j = j+1
    91                             
    92   1941.0 MiB      0.0 MiB       return result, res_vec



subsystem size:208

probability: 0.7
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [2e-01, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [7e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   7.000000e-01   0.000000e+00      0s
     148    1.4541436e+02   0.000000e+00   0.000000e+00      0s

Solved in 148 iterations and 0.01 seconds
Optimal objective  1.454143586e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1941.0 MiB   1941.0 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1941.0 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1941.0 MiB      0.0 MiB       m2 = m.construct()
    28   1941.0 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1941.0 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1941.0 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1941.0 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1941.0 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1941.0 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1941.0 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1941.0 MiB      0.0 MiB       m2.update()
    44   1941.0 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1941.0 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1941.0 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1941.0 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1941.0 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1941.0 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1941.0 MiB      0.0 MiB       j = 0
    69   1941.0 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1941.0 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1941.0 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1941.0 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1941.0 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1941.0 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1941.0 MiB      0.0 MiB           result.solution = True
    81   1941.0 MiB      0.0 MiB           result.feasible = True
    82   1941.0 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1941.0 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1941.0 MiB      0.0 MiB           for v in current_vars:
    85   1941.0 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1941.0 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1941.0 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1941.0 MiB      0.0 MiB                   j = j+1
    91                             
    92   1941.0 MiB      0.0 MiB       return result, res_vec



subsystem size:141

probability: 0.7
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 22:23:25 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.tra,lab' -mdp /tmp/tmpaxb7kc3k

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpaxb7kc3k"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 38 iterations in 0.00 seconds (average 0.000105, setup 0.00)

Time for model construction: 0.032 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      143 (1 initial)
Transitions: 177
Choices:     143

Transition matrix: 372 nodes (3 terminal), 177 minterms, vars: 8r/8c/1nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 266 iterations in 0.01 seconds (average 0.000045, setup 0.00)

yes = 12, no = 1, maybe = 130

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=8, nodes=373] [17.5 KB]
Adding sparse bits... [levels=8-8, num=1, compact=1/1] [0.8 KB]
Creating vector for yes... [dist=2, compact] [0.3 KB]
Allocating iteration vectors... [3 x 1.1 KB]
TOTAL: [21.9 KB]

Starting iterations...

Iterative method: 1960 iterations in 0.00 seconds (average 0.000002, setup 0.00)

Value in the initial state: 0.7026867198338895

Time for model checking: 0.024 seconds.

Result: 0.7026867198338895 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 287 rows and 572 columns
Presolve time: 0.00s
Presolved: 242 rows, 484 columns, 1076 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -8.0800000e+32   1.800000e+32   8.080000e+02      0s
     517   -2.4400000e+02   0.000000e+00   0.000000e+00      0s

Solved in 517 iterations and 0.01 seconds
Optimal objective -2.440000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1941.0 MiB   1941.0 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1941.0 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1941.0 MiB      0.0 MiB       m2 = m.construct()
    28   1941.0 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1941.0 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1941.0 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1941.0 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1941.0 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1941.0 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1941.0 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1941.0 MiB      0.0 MiB       m2.update()
    44   1941.0 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1941.0 MiB      0.0 MiB       if(zero_vars):
    47   1941.0 MiB      0.0 MiB           for x in zero_vars:
    48   1941.0 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1941.0 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1941.0 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1941.0 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1941.0 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1941.0 MiB      0.0 MiB       j = 0
    69   1941.0 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1941.0 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1941.0 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1941.0 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1941.0 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1941.0 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1941.0 MiB      0.0 MiB           result.solution = True
    81   1941.0 MiB      0.0 MiB           result.feasible = True
    82   1941.0 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1941.0 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1941.0 MiB      0.0 MiB           for v in current_vars:
    85   1941.0 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1941.0 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1941.0 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1941.0 MiB      0.0 MiB                   j = j+1
    91                             
    92   1941.0 MiB      0.0 MiB       return result, res_vec


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 2112 columns and 3868 nonzeros
Variable types: 1056 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 2e+02]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [7e-01, 1e+00]
Presolve removed 428 rows and 700 columns
Presolve time: 0.01s
Presolved: 1157 rows, 1412 columns, 3016 nonzeros
Variable types: 704 continuous, 708 integer (708 binary)

Root relaxation: objective 3.542582e+00, 1401 iterations, 0.11 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.54258    0  209          -    3.54258      -     -    0s
H    0     0                     247.0000000    3.54258  98.6%     -    0s
     0     2    3.54258    0  209  247.00000    3.54258  98.6%     -    1s
H    3     8                     168.0000000    3.71428  97.8%   139    2s
H    7    12                     162.0000000    4.05090  97.5%   131    3s
H   11    12                     156.0000000    4.17834  97.3%   175    3s
H   12    12                     147.0000000    4.17834  97.2%   178    3s
H   19    20                     118.0000000    4.54877  96.1%   169    3s
    27    32    5.16201    5  165  118.00000    4.77965  95.9%   166    5s
H   49    44                     103.0000000    5.06284  95.1%   126    5s
H 1662  1402                      98.0000000    5.48917  94.4%  36.6    9s
  2541  2134   57.38961  132   71   98.00000    5.54901  94.3%  31.1   10s
H 2675  2233                      94.0000000    5.54901  94.1%  31.0   10s
H 3006  2481                      92.0000000    5.54901  94.0%  30.7   10s
H 3142  2581                      86.0000000    5.54901  93.5%  30.5   10s
  3442  2795   35.40080   64   95   86.00000    5.55054  93.5%  30.9   15s
  3470  2817 infeasible   20        86.00000    5.55054  93.5%  32.0   20s
H 3482  2673                      71.0000000    5.55054  92.2%  32.2   20s
  3873  2925    9.68938   30  135   71.00000    5.55054  92.2%  31.7   25s
  6732  4536   54.06531  113  131   71.00000    5.55054  92.2%  30.0   30s
  8043  5033   45.07143   69   73   71.00000    6.12146  91.4%  30.6   35s
 10949  6213    9.05008   26  100   71.00000    6.13910  91.4%  31.9   40s
 14815  9274   56.27086  110   60   71.00000    6.26119  91.2%  31.9   45s
 16386 10581    9.67586   28   99   71.00000    6.26119  91.2%  31.8   50s
 19365 13076   55.38502  134   66   71.00000    6.26119  91.2%  32.2   55s
 23137 16007   39.01847   63   96   71.00000    6.65727  90.6%  32.8   60s
H26847 18698                      70.0000000    6.65727  90.5%  33.0   64s
 27500 19190   56.33760  128   78   70.00000    6.65727  90.5%  32.8   65s
 31927 22631   23.91128   47   93   70.00000    6.80462  90.3%  32.6   71s
 35739 25682 infeasible  118        70.00000    6.80462  90.3%  32.5   76s
 38871 28049   14.72098   50   89   70.00000    6.80462  90.3%  32.4   81s
 41704 30347   65.12164  130   28   70.00000    7.09210  89.9%  32.7   85s
 46493 34041   66.27037  157   53   70.00000    7.09210  89.9%  33.0   91s
 50043 36807   53.55555  104   63   70.00000    7.18012  89.7%  32.8   98s
H50243 35397                      67.0000000    7.18012  89.3%  32.8   98s
 50293 35422   49.05212   87   77   67.00000    7.18012  89.3%  32.8  100s
 55177 39271   27.50691   63  110   67.00000    7.18012  89.3%  32.8  106s
 58819 42075   47.51169   75   62   67.00000    7.28758  89.1%  32.8  110s
 62707 45242   59.61373   64  146   67.00000    7.45986  88.9%  32.2  115s
 68023 49546   64.96714  126  147   67.00000    7.63316  88.6%  31.9  120s
 73020 53427   46.27025   84   51   67.00000    7.64062  88.6%  31.8  125s
 77771 57234   13.56264   43  111   67.00000    7.65472  88.6%  31.9  131s
 82221 60515   40.95337   81   89   67.00000    7.65738  88.6%  32.2  136s
 85728 63258 infeasible  110        67.00000    7.65738  88.6%  32.1  141s
 88558 65419   46.42434  100   72   67.00000    7.69232  88.5%  32.3  145s
 93473 69184   64.29863  163   56   67.00000    7.70865  88.5%  32.5  151s
 96092 71006   64.21810  102   40   67.00000    7.72094  88.5%  32.7  155s
 101076 74660   20.06197   51   94   67.00000    7.75224  88.4%  32.9  161s
 105057 77864   64.37138  107   88   67.00000    7.76850  88.4%  32.7  166s
 108365 80465   43.43534   95   98   67.00000    7.76850  88.4%  32.8  170s
 113676 84732   35.62600   77   60   67.00000    7.78962  88.4%  32.5  175s
 118267 88482   45.82777   81   80   67.00000    7.79568  88.4%  32.6  181s
 123541 92666     cutoff  106        67.00000    7.82156  88.3%  32.4  186s
 126421 94741   41.98871   84   82   67.00000    7.84223  88.3%  32.5  191s
 129107 96735   64.17751  125   45   67.00000    7.88269  88.2%  32.7  195s
 133735 100198   15.28253   46  114   67.00000    7.88269  88.2%  32.7  201s
 138130 103797   60.24842  130   72   67.00000    7.88269  88.2%  32.5  205s
 142329 107017 infeasible   90        67.00000    7.88269  88.2%  32.4  211s
 145279 109296   52.78561  103   80   67.00000    8.01203  88.0%  32.5  215s
 148317 111611 infeasible  107        67.00000    8.04778  88.0%  32.6  220s
 153286 115391   63.29739  129   70   67.00000    8.05759  88.0%  32.6  226s
 156810 118228   17.54851   53   94   67.00000    8.08694  87.9%  32.6  230s
 161651 121957   29.29818   52   60   67.00000    8.10890  87.9%  32.6  236s
 165338 124875   37.31069   61   56   67.00000    8.11244  87.9%  32.6  240s
 170476 129050   51.35596  107   74   67.00000    8.11244  87.9%  32.5  247s
 172601 130794   60.33368  130   74   67.00000    8.12875  87.9%  32.5  250s
 177174 134372   58.59511   99  109   67.00000    8.13593  87.9%  32.4  255s
 181217 137510   42.28056   95   63   67.00000    8.13593  87.9%  32.4  260s
 185855 141163   24.99727   46   94   67.00000    8.17471  87.8%  32.4  266s
 189219 143894   46.60893   77   97   67.00000    8.17471  87.8%  32.4  271s
 192475 146346   42.92769   70   55   67.00000    8.18012  87.8%  32.5  275s
 197944 150623   19.06611   51  101   67.00000    8.26680  87.7%  32.5  281s
 199821 152102   40.98228   88   80   67.00000    8.26680  87.7%  32.5  285s
 204656 155903   65.33844  122   82   67.00000    8.28323  87.6%  32.5  291s
 208326 158805   62.18853  104   98   67.00000    8.28323  87.6%  32.4  295s
 211752 161458   41.50059   80   50   67.00000    8.28323  87.6%  32.4  300s
 216587 165266   41.00486   76   72   67.00000    8.32688  87.6%  32.4  305s
 221751 169419   15.32165   43  111   67.00000    8.37840  87.5%  32.4  311s
 224976 171686   50.50083   89   79   67.00000    8.37840  87.5%  32.4  315s
 228322 174170   36.51103   70   71   67.00000    8.40584  87.5%  32.4  321s
 231376 176515     cutoff  121        67.00000    8.41378  87.4%  32.4  327s
 232998 177691   18.16252   46  105   67.00000    8.42373  87.4%  32.4  331s
 236935 180791   30.31556   55   62   67.00000    8.43889  87.4%  32.3  337s
 238457 182018   33.56163   58   82   67.00000    8.43889  87.4%  32.3  340s
 243547 185972   45.32768   97   62   67.00000    8.55986  87.2%  32.3  346s
 246474 188348   65.45375  106  118   67.00000    8.55986  87.2%  32.3  350s
 251723 192491   60.22622  121   74   67.00000    8.55986  87.2%  32.3  356s
 255862 195907   48.45905   94   69   67.00000    8.61581  87.1%  32.2  360s
 260466 199502   55.99704  112   73   67.00000    8.62254  87.1%  32.2  367s
 262150 200848   29.87212   51   56   67.00000    8.63316  87.1%  32.2  371s
 265599 203491   29.59301   71   59   67.00000    8.63316  87.1%  32.2  375s
 270298 207159   49.03806   89   77   67.00000    8.63316  87.1%  32.2  381s
 273427 209540   52.56246   94   99   67.00000    8.63802  87.1%  32.2  385s
 276905 212310   46.29688   84   66   67.00000    8.63814  87.1%  32.2  390s
 282045 216388   64.17468  110   89   67.00000    8.63888  87.1%  32.2  396s
 286920 220122 infeasible   47        67.00000    8.64441  87.1%  32.2  401s
 290011 222606 infeasible  110        67.00000    8.64473  87.1%  32.2  405s
 295288 226678   58.26245  108   91   67.00000    8.64473  87.1%  32.2  411s
 296861 227918   41.57414   74   64   67.00000    8.64473  87.1%  32.2  416s
 299860 230219   60.34935  127   69   67.00000    8.64971  87.1%  32.2  420s
 305178 234370   61.29569  121   78   67.00000    8.65053  87.1%  32.2  426s
 308377 236758   61.16915  106   77   67.00000    8.65472  87.1%  32.2  430s
 313174 240511     cutoff  137        67.00000    8.65727  87.1%  32.2  436s
 316025 242613   14.56141   45  108   67.00000    8.65727  87.1%  32.3  440s
 319577 245406   52.54283  104   79   67.00000    8.65727  87.1%  32.3  445s
 324700 249470   45.89595   88   30   67.00000    8.65997  87.1%  32.3  450s
 329243 253127   57.22514  121   42   67.00000    8.65997  87.1%  32.3  457s
 331522 254849   60.53830   98   85   67.00000    8.65997  87.1%  32.3  461s
 334991 257511 infeasible  121        67.00000    8.67274  87.1%  32.3  465s
 338078 259903   21.57588   58  105   67.00000    8.67485  87.1%  32.4  470s
 341609 262644   54.47162  107   74   67.00000    8.67799  87.0%  32.4  475s
 344768 264972   38.92742   95  105   67.00000    8.67799  87.0%  32.4  480s
 348203 267517     cutoff  101        67.00000    8.68061  87.0%  32.4  485s
 352150 270610   38.94772   75   46   67.00000    8.68569  87.0%  32.4  490s
 355152 272818   56.22474  116   71   67.00000    8.68569  87.0%  32.4  495s
 358659 275508   18.09123   43   87   67.00000    8.69058  87.0%  32.4  500s
 361809 277943     cutoff  124        67.00000    8.69934  87.0%  32.4  506s
 363704 279365    8.70045   34   99   67.00000    8.70045  87.0%  32.4  511s
 367327 282120   42.45608   84   66   67.00000    8.70359  87.0%  32.4  516s
 370668 284644 infeasible  116        67.00000    8.70528  87.0%  32.4  521s
 374580 287713   39.94022   72   92   67.00000    8.70962  87.0%  32.4  525s
 379635 291604 infeasible  106        67.00000    8.71602  87.0%  32.3  531s
 382682 293915     cutoff  118        67.00000    8.72188  87.0%  32.3  535s
 387854 297845   60.30237  116   52   67.00000    8.72668  87.0%  32.3  541s
 392447 301396   13.64804   40  115   67.00000    8.73324  87.0%  32.3  546s
 395573 303793   49.08494   93   61   67.00000    8.73324  87.0%  32.3  550s
 398674 306022   38.63419   74   93   67.00000    8.73979  87.0%  32.4  556s
 401714 308283   54.71759  111   86   67.00000    8.73979  87.0%  32.4  560s
 404553 310378   43.30651   84   79   67.00000    8.73979  87.0%  32.4  565s
 409330 314054   40.35076   77   89   67.00000    8.75004  86.9%  32.5  570s
 414162 317781   63.27798  122   74   67.00000    8.75209  86.9%  32.5  576s
 417545 320308   29.64342   58   96   67.00000    8.75277  86.9%  32.6  580s
 420952 323032   61.35676  104   74   67.00000    8.76048  86.9%  32.6  585s
 426448 327462   35.26581   74   53   67.00000    8.76226  86.9%  32.6  591s
 429654 329989   53.22024  122   76   67.00000    8.76226  86.9%  32.6  595s
 432832 332435   40.19060   70   50   67.00000    8.76636  86.9%  32.6  600s
 438019 336561   36.57844   81   71   67.00000    8.76707  86.9%  32.6  605s
 442547 340161 infeasible   75        67.00000    8.77105  86.9%  32.7  610s
 447072 343696   64.01280   95  169   67.00000    8.77169  86.9%  32.7  616s
 451970 347475   52.49662  118   71   67.00000    8.77203  86.9%  32.8  621s
 457814 352263   65.18099   98   93   67.00000    8.77652  86.9%  32.8  626s
 461060 354775   19.64067   50   90   67.00000    8.77913  86.9%  32.8  630s
 464168 357047   39.52039   80   50   67.00000    8.78185  86.9%  32.8  635s
 469061 360856   58.07426   94   58   67.00000    8.78486  86.9%  32.9  640s
 474026 364687   29.88469   54   84   67.00000    8.78681  86.9%  32.9  645s
 478624 368198   10.73878   36  113   67.00000    8.79228  86.9%  33.0  651s
 482989 371616   31.61428   72   97   67.00000    8.79442  86.9%  33.0  656s
 485251 373393   52.52378  103   60   67.00000    8.79568  86.9%  33.0  660s
 490592 377567   27.51590   63   60   67.00000    8.79908  86.9%  33.0  666s
 494334 380449   53.57782  112   52   67.00000    8.79908  86.9%  33.0  670s
 499532 384422   30.98685   65   95   67.00000    8.80199  86.9%  33.1  675s
 504330 388011   32.16776   79   85   67.00000    8.80199  86.9%  33.1  680s
 509339 391793   36.97885   76  103   67.00000    8.86095  86.8%  33.1  686s
 512823 394565   64.98080  129   79   67.00000    8.86095  86.8%  33.1  690s
 516621 397445   24.72416   73   99   67.00000    8.86095  86.8%  33.1  696s
 520041 400042   48.25471   75   69   67.00000    8.86095  86.8%  33.1  700s
 525518 404374   27.08591   59   85   67.00000    8.89529  86.7%  33.1  706s
 528874 407033   16.88882   43  116   67.00000    8.90263  86.7%  33.1  710s
 532359 409806   55.35784  111   71   67.00000    8.91358  86.7%  33.1  715s
 538006 414276   62.22582  132   50   67.00000    8.92962  86.7%  33.1  721s
 540827 416418   57.14531   99   54   67.00000    8.96053  86.6%  33.1  725s
 546542 420972   33.22255   72   92   67.00000    8.97057  86.6%  33.0  731s
 548153 422206   56.32508  107   67   67.00000    8.97057  86.6%  33.0  735s
 554203 426980   63.36993  130   60   67.00000    8.98887  86.6%  33.0  741s
 559448 431127   56.36422  105   89   67.00000    8.99509  86.6%  32.9  746s
 564244 434707   47.94351   87   81   67.00000    8.99946  86.6%  32.9  751s
 567067 436880   44.23546   90   59   67.00000    9.01203  86.5%  32.8  755s
 572422 441195   11.99061   38  110   67.00000    9.02021  86.5%  32.8  760s
 575139 443417   45.61114   92  102   67.00000    9.02120  86.5%  32.8  765s
 579604 446994   48.23940  103   61   67.00000    9.02589  86.5%  32.8  770s
 583860 450279   29.84172   63   79   67.00000    9.03806  86.5%  32.9  776s
 585171 451234   44.10020   93   85   67.00000    9.03806  86.5%  32.9  780s
 590300 455166   31.45989   63   71   67.00000    9.04521  86.5%  32.9  786s
 593636 457708   51.90896   92   70   67.00000    9.04758  86.5%  32.9  790s
 596693 460109   49.33861   92   62   67.00000    9.04778  86.5%  32.9  795s
 601897 464197   64.04687  108  106   67.00000    9.05008  86.5%  32.9  801s
 605177 466660   55.22277   90   87   67.00000    9.06372  86.5%  32.9  805s
 609205 469562   34.70075   82  108   67.00000    9.07069  86.5%  33.0  811s
 612964 472540   63.15327  136   71   67.00000    9.07360  86.5%  33.0  815s
 615902 474746 infeasible  103        67.00000    9.07728  86.5%  33.0  821s
 617721 476108     cutoff  106        67.00000    9.07759  86.5%  33.0  825s
 623376 480603   47.86984   95   90   67.00000    9.08898  86.4%  33.0  831s
 627041 483548   40.28775   67   58   67.00000    9.08944  86.4%  32.9  835s
 631726 487015     cutoff  110        67.00000    9.09434  86.4%  33.0  841s
 635237 489713   64.08257  104   94   67.00000    9.09434  86.4%  33.0  845s
 640379 493517   48.26041   80   72   67.00000    9.10523  86.4%  33.0  851s
 643610 495962   58.12949   96   96   67.00000    9.10847  86.4%  33.0  855s
 648848 500219   61.27319  120   65   67.00000    9.11496  86.4%  32.9  861s
 650535 501544   19.02326   53  101   67.00000    9.11505  86.4%  32.9  865s
 654766 504804   55.33135  136   78   67.00000    9.11505  86.4%  32.9  871s
 657991 507224   38.38214   87   93   67.00000    9.12298  86.4%  33.0  875s
 661473 510018   63.19622  103   71   67.00000    9.12445  86.4%  32.9  880s
 666914 514216   13.04280   45  105   67.00000    9.12445  86.4%  32.9  885s
 671880 518227   64.26183  134   56   67.00000    9.12445  86.4%  32.9  891s
 676171 521400   32.03301   56   86   67.00000    9.13875  86.4%  32.9  896s
 679659 524095   44.58757   80   57   67.00000    9.13875  86.4%  32.9  900s
 684801 528191   40.02549   71   90   67.00000    9.14694  86.3%  32.9  907s
 688205 531051   37.31329   68   69   67.00000    9.14740  86.3%  32.9  910s
 691389 533663   63.31515  128   60   67.00000    9.14740  86.3%  32.9  915s
 695037 536534   42.47405   98   74   67.00000    9.15073  86.3%  32.9  920s
 698793 539411   60.10724  107   64   67.00000    9.15208  86.3%  32.9  926s
 702487 542349   39.25938   66   67   67.00000    9.15208  86.3%  32.9  931s
 704224 543655   52.33891   96   78   67.00000    9.15923  86.3%  32.9  935s
 709750 548050   64.32996  131   79   67.00000    9.16223  86.3%  32.9  941s
 712991 550516   55.84129  104   37   67.00000    9.16223  86.3%  32.9  945s
 716370 553274   41.15843   64   82   67.00000    9.16898  86.3%  33.0  952s
 720481 556544   43.07097   82   80   67.00000    9.16898  86.3%  33.0  956s
 724238 559582   62.33520  102   63   67.00000    9.17455  86.3%  32.9  961s
 727192 561898   40.75077   69   79   67.00000    9.17889  86.3%  33.0  965s
 732813 566468   26.99769   48   80   67.00000    9.18265  86.3%  32.9  970s
 737355 570078   43.67160   77   51   67.00000    9.19060  86.3%  33.0  975s
 742745 574295   64.49402  128   74   67.00000    9.20539  86.3%  33.0  980s
 746679 577399   62.90913  117   72   67.00000    9.23073  86.2%  33.0  985s
 751416 581122   31.19255   55   78   67.00000    9.23968  86.2%  32.9  990s
 756807 585475     cutoff  122        67.00000    9.24248  86.2%  32.9  995s
 761384 589033   40.56785   87   66   67.00000    9.25284  86.2%  32.9 1000s
 765940 592394   60.18348  128   69   67.00000    9.25395  86.2%  33.0 1006s
 770815 596243   33.02612   77   60   67.00000    9.25792  86.2%  33.0 1011s
 774203 598983   37.95209   68  113   67.00000    9.26104  86.2%  33.0 1015s
 777689 601746   49.35185   90   70   67.00000    9.27049  86.2%  33.0 1021s
 780822 604195     cutoff  120        67.00000    9.27049  86.2%  33.0 1025s
 785446 607574   41.70208   90   76   67.00000    9.27731  86.2%  33.0 1031s
 789120 610581   54.86097  114   78   67.00000    9.28321  86.1%  33.0 1035s
 794212 614561   18.23279   51  103   67.00000    9.28702  86.1%  33.0 1041s
 797318 616826   10.85961   33  121   67.00000    9.28966  86.1%  33.1 1045s
 802096 620590   59.28672  106   85   67.00000    9.29692  86.1%  33.1 1052s
 805503 623155   47.17334   93   90   67.00000    9.30069  86.1%  33.1 1056s
 808853 625755   45.23946   92   93   67.00000    9.30069  86.1%  33.1 1062s
 810595 627156   34.31902   59   96   67.00000    9.30274  86.1%  33.1 1066s
 813901 629691 infeasible  110        67.00000    9.30422  86.1%  33.1 1070s
 819312 633952   33.75271   60   70   67.00000    9.33657  86.1%  33.1 1076s
 822789 636639   53.29983   96   76   67.00000    9.33657  86.1%  33.1 1080s
 827501 640447   48.23082   85   84   67.00000    9.34257  86.1%  33.1 1086s
 831032 643145   41.82505   80   91   67.00000    9.34796  86.0%  33.1 1090s
 836128 647150   65.26515  132   70   67.00000    9.34796  86.0%  33.1 1096s
 839292 649557   11.32170   37  109   67.00000    9.35714  86.0%  33.1 1100s
 844186 653398   26.11589   51   93   67.00000    9.35714  86.0%  33.1 1106s
 846138 654930   65.55510  120   70   67.00000    9.36792  86.0%  33.1 1111s
 849603 657712   47.98778   93  110   67.00000    9.37181  86.0%  33.1 1116s
 853067 660376   49.22644   83   53   67.00000    9.37223  86.0%  33.0 1121s
 856909 663356   17.21746   43  112   67.00000    9.37223  86.0%  33.0 1125s
 862140 667566 infeasible  114        67.00000    9.38544  86.0%  33.0 1130s
 867100 671412   52.55680  110   72   67.00000    9.38898  86.0%  33.0 1135s
 872075 675288   21.18563   45  118   67.00000    9.39380  86.0%  33.0 1140s
 878450 680229   24.19517   59   99   67.00000    9.39963  86.0%  32.9 1146s
 883381 684172   13.33903   45   84   67.00000    9.40458  86.0%  32.9 1151s
 886161 686230   24.08854   54   95   67.00000    9.40458  86.0%  32.9 1156s
 891315 690096   28.93272   55   67   67.00000    9.40509  86.0%  32.9 1160s
 896245 693883   31.61961   57   92   67.00000    9.40509  86.0%  32.9 1166s
 900481 697098   64.88919  115   73   67.00000    9.42190  85.9%  33.0 1170s
 905167 700550   36.55639   78   61   67.00000    9.43114  85.9%  33.0 1176s
 910326 704456   48.30827   96   74   67.00000    9.43889  85.9%  33.0 1181s
 915225 708197   12.26653   41  132   67.00000    9.43889  85.9%  33.0 1187s
 916446 709155   26.08483   63   96   67.00000    9.43889  85.9%  33.0 1190s
 920267 712112   58.54983  104   94   67.00000    9.43889  85.9%  33.0 1195s
 925247 715829   19.22400   46   93   67.00000    9.52373  85.8%  33.0 1200s
 930510 719878   43.99249   72   76   67.00000    9.54792  85.7%  33.0 1205s
 936310 724415   60.30606  125   70   67.00000    9.56331  85.7%  33.0 1212s
 939660 727048   37.88579   62   84   67.00000    9.57281  85.7%  33.0 1216s
 943202 729884   64.93580  119   73   67.00000    9.57557  85.7%  33.0 1221s
 946182 732282   54.26182   96   84   67.00000    9.58443  85.7%  33.0 1226s
 949689 735027   54.18619   98   49   67.00000    9.58443  85.7%  33.0 1230s
 952774 737357   50.05739   83   87   67.00000    9.58808  85.7%  33.0 1235s
 956162 739945    9.63060   38  120   67.00000    9.59035  85.7%  33.0 1240s
 958047 741375 infeasible   60        67.00000    9.59054  85.7%  33.0 1245s
 960674 743262   62.22041  118   65   67.00000    9.59054  85.7%  33.0 1250s
 963900 745663   53.15273   90   85   67.00000    9.59054  85.7%  33.0 1255s
 967857 748795   62.17854  104   60   67.00000    9.59748  85.7%  33.0 1260s
 972448 752405   65.60713  118   53   67.00000    9.59849  85.7%  33.0 1266s
 976379 755620     cutoff  129        67.00000    9.60048  85.7%  32.9 1270s
 981814 759903   61.30322  122   57   67.00000    9.60240  85.7%  32.9 1276s
 985100 762453   59.12789   99   93   67.00000    9.60261  85.7%  32.9 1280s
 990126 766462   31.68746   69   99   67.00000    9.60674  85.7%  32.9 1285s
 995193 770455   15.48682   35   83   67.00000    9.60943  85.7%  32.9 1292s
 996521 771424   46.30956   91   57   67.00000    9.61002  85.7%  32.9 1296s
 999729 773793   21.63770   58   96   67.00000    9.61122  85.7%  32.9 1300s
 1004805 777843   29.36727   64   86   67.00000    9.61315  85.7%  32.8 1306s
 1008243 780523 infeasible   92        67.00000    9.61412  85.7%  32.8 1310s
 1013042 784286   12.55444   42  108   67.00000    9.61496  85.6%  32.8 1316s
 1017709 787926   46.03290   79   51   67.00000    9.61629  85.6%  32.8 1321s
 1021005 790427   32.59034   68  109   67.00000    9.61651  85.6%  32.8 1325s
 1025085 793347   65.12650  106  107   67.00000    9.61735  85.6%  32.8 1331s
 1028822 796306   17.18376   52  107   67.00000    9.61833  85.6%  32.8 1335s
 1032129 798885   49.83647   99   92   67.00000    9.61979  85.6%  32.8 1341s
 1033983 800329   36.32195   62   82   67.00000    9.61979  85.6%  32.8 1346s
 1037531 803172   22.60648   56   96   67.00000    9.62157  85.6%  32.8 1350s
 1042994 807398   56.93808  111   92   67.00000    9.62292  85.6%  32.8 1356s
 1047689 811077   32.47393   67   96   67.00000    9.62364  85.6%  32.8 1361s
 1050784 813340     cutoff  121        67.00000    9.62364  85.6%  32.8 1365s
 1056008 817510   52.33147  103   56   67.00000    9.62450  85.6%  32.8 1370s
 1061140 821412   62.23624  119   61   67.00000    9.62555  85.6%  32.8 1375s
 1066141 825331   49.17609   84   65   67.00000    9.62694  85.6%  32.8 1381s
 1071104 829265   61.19989  133   34   67.00000    9.62735  85.6%  32.8 1386s
 1072597 830478   53.48328   97   82   67.00000    9.62735  85.6%  32.8 1391s
 1075775 833018   54.11811   91  127   67.00000    9.62825  85.6%  32.8 1395s
 1080935 837076   32.57106   66   90   67.00000    9.62965  85.6%  32.8 1401s
 1083958 839448   42.19586   70   47   67.00000    9.63021  85.6%  32.7 1405s
 1089553 843768   57.30171   97   73   67.00000    9.63127  85.6%  32.7 1410s
 1094780 847832   35.46811   73   79   67.00000    9.63211  85.6%  32.7 1416s
 1099752 851825   55.55106   97   91   67.00000    9.63361  85.6%  32.7 1421s
 1104262 855507   65.24771  113   52   67.00000    9.63378  85.6%  32.7 1426s
 1107785 858231   53.48674   97   50   67.00000    9.63413  85.6%  32.7 1430s
 1112573 861853 infeasible  120        67.00000    9.63509  85.6%  32.7 1437s
 1114422 863351   21.60112   56   87   67.00000    9.63512  85.6%  32.7 1440s
 1119447 867284   63.14460   90   40   67.00000    9.63512  85.6%  32.7 1446s
 1122218 869493   63.43349  118   66   67.00000    9.63563  85.6%  32.7 1450s
 1127188 873222   64.47280  119   81   67.00000    9.63666  85.6%  32.7 1456s
 1130371 875758 infeasible  134        67.00000    9.63666  85.6%  32.7 1460s
 1135253 879397   24.47709   54   75   67.00000    9.63803  85.6%  32.7 1466s
 1138489 881828   32.30592   57   61   67.00000    9.63838  85.6%  32.7 1470s
 1143738 885963   56.24889   95   75   67.00000    9.63838  85.6%  32.7 1476s
 1148651 889814 infeasible   70        67.00000    9.63888  85.6%  32.7 1483s
 1148812 889895 infeasible   71        67.00000    9.63888  85.6%  32.7 1485s
 1153472 893487   33.64915   68   90   67.00000    9.63965  85.6%  32.7 1491s
 1156345 895663   55.43292  110  119   67.00000    9.63995  85.6%  32.7 1495s
 1161592 899557   29.48320   66   98   67.00000    9.63995  85.6%  32.7 1501s
 1165354 902383   33.39482   59   75   67.00000    9.64155  85.6%  32.7 1505s
 1170904 906861 infeasible   48        67.00000    9.64170  85.6%  32.7 1511s
 1174178 909387   36.36554   77   83   67.00000    9.64170  85.6%  32.7 1515s
 1179037 913097   11.61525   38  105   67.00000    9.64261  85.6%  32.7 1521s
 1182614 915883   62.20525  103   78   67.00000    9.64472  85.6%  32.7 1525s
 1186631 919020   15.64378   49  135   67.00000    9.64490  85.6%  32.7 1530s
 1188597 920474   40.63959   86   63   67.00000    9.64490  85.6%  32.7 1535s
 1192610 923702   64.16520  113   76   67.00000    9.64580  85.6%  32.7 1540s
 1197592 927483    9.66757   32  107   67.00000    9.64660  85.6%  32.7 1545s
 1202252 930921   37.66099   73   69   67.00000    9.64718  85.6%  32.7 1551s
 1205945 933754   24.46779   61   85   67.00000    9.64718  85.6%  32.7 1555s
 1210869 937543     cutoff  124        67.00000    9.64823  85.6%  32.7 1561s
 1214270 940215   51.24940  103   78   67.00000    9.64881  85.6%  32.7 1565s
 1218889 943768   50.62676   87   63   67.00000    9.64925  85.6%  32.7 1570s
 1223431 947235   55.22588  121   81   67.00000    9.65053  85.6%  32.7 1577s
 1225446 948769   60.39727  109  117   67.00000    9.65061  85.6%  32.7 1581s
 1228891 951452 infeasible  129        67.00000    9.65061  85.6%  32.7 1585s
 1234489 956011   61.27534  123   63   67.00000    9.65248  85.6%  32.7 1591s
 1239577 960044     cutoff  110        67.00000    9.65354  85.6%  32.7 1596s
 1243284 962938   51.24428   85   80   67.00000    9.65381  85.6%  32.7 1600s
 1248242 966842   48.11219   98   90   67.00000    9.65386  85.6%  32.7 1605s
 1252524 970100   40.25299   73   55   67.00000    9.65573  85.6%  32.7 1611s
 1256039 972888   65.18400  127   49   67.00000    9.65605  85.6%  32.7 1615s
 1260515 976290   19.49285   54  108   67.00000    9.65656  85.6%  32.7 1621s
 1263644 978592   28.41254   63   97   67.00000    9.65722  85.6%  32.7 1626s
 1265426 979993   47.28172   92   67   67.00000    9.65722  85.6%  32.7 1630s
 1270960 984294   65.63955  116   86   67.00000    9.65738  85.6%  32.7 1636s
 1274124 986537   30.39925   72   88   67.00000    9.65739  85.6%  32.7 1640s
 1278617 989757   59.53642  111   72   67.00000    9.65785  85.6%  32.7 1646s
 1282049 992272   59.74456  104   99   67.00000    9.65923  85.6%  32.7 1650s
 1287060 996020   11.62898   36  115   67.00000    9.65932  85.6%  32.7 1656s
 1290572 998835   34.39370   77   67   67.00000    9.66028  85.6%  32.7 1660s
 1295728 1002810   23.43495   51  104   67.00000    9.66124  85.6%  32.7 1666s
 1297503 1004167   10.64961   41  124   67.00000    9.66137  85.6%  32.7 1671s
 1300355 1006212   18.54445   53   98   67.00000    9.66158  85.6%  32.7 1676s
 1303850 1008928   36.35081   69   84   67.00000    9.66158  85.6%  32.7 1680s
 1309261 1013057   40.85406   85   61   67.00000    9.66336  85.6%  32.7 1686s
 1312424 1015438   40.34585   88   65   67.00000    9.66396  85.6%  32.7 1690s
 1317314 1019177   49.41536   91   66   67.00000    9.66396  85.6%  32.8 1696s
 1321236 1022303   49.30892   84   78   67.00000    9.66534  85.6%  32.7 1700s
 1326155 1026187   64.88779  114   79   67.00000    9.66684  85.6%  32.7 1705s
 1331405 1030344   64.52482  123   69   67.00000    9.66786  85.6%  32.7 1711s
 1334920 1033138   65.29199  123   59   67.00000    9.66942  85.6%  32.7 1715s
 1339953 1037121   42.02319   86   61   67.00000    9.66991  85.6%  32.7 1720s
 1342034 1038677   58.17846  129   50   67.00000    9.66991  85.6%  32.7 1725s
 1345498 1041132   53.55218  104   79   67.00000    9.66991  85.6%  32.7 1731s
 1349066 1043812   57.58953  103   86   67.00000    9.67099  85.6%  32.8 1735s
 1354357 1047940   13.21209   48  105   67.00000    9.67330  85.6%  32.7 1740s
 1360031 1052359   38.64022   87   69   67.00000    9.67330  85.6%  32.7 1746s
 1363088 1054642   55.05226  103   69   67.00000    9.67659  85.6%  32.7 1750s
 1368213 1058629   53.22445   82   67   67.00000    9.67659  85.6%  32.7 1756s
 1371529 1061175   53.06397   96   78   67.00000    9.67914  85.6%  32.7 1760s
 1376398 1064973   55.14172   90  102   67.00000    9.68053  85.6%  32.7 1765s
 1379263 1067027   60.19800   86   55   67.00000    9.68111  85.6%  32.7 1770s
 1381785 1068735   39.95502   88   94   67.00000    9.68167  85.5%  32.8 1776s
 1385393 1071452   46.55044   81   55   67.00000    9.68175  85.5%  32.8 1781s
 1390166 1074898   50.21613  107   57   67.00000    9.68175  85.5%  32.8 1786s
 1393621 1077486     cutoff  112        67.00000    9.68456  85.5%  32.8 1790s
 1396670 1079733   63.30200  128   67   67.00000    9.68549  85.5%  32.8 1795s
 1402442 1084142   58.54803  116   81   67.00000    9.68651  85.5%  32.8 1800s

Explored 1403615 nodes (46012629 simplex iterations) in 1800.03 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 67 70 71 ... 147

Time limit reached
Best objective 6.700000000000e+01, best bound 1.000000000000e+01, gap 85.0746%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1941.0 MiB   1941.0 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1941.0 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1941.0 MiB      0.0 MiB       m2 = m.construct()
    28   1941.0 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1941.0 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1941.0 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1941.0 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1941.0 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1941.0 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1941.0 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1941.0 MiB      0.0 MiB       m2.update()
    44   1941.0 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1941.0 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1941.0 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1941.0 MiB      0.0 MiB       if(find_optimum):
    55   1941.0 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56   1941.0 MiB      0.0 MiB           m2.update()
    57   1941.0 MiB      0.0 MiB           new_obj = LinExpr(0)
    58   1941.0 MiB      0.0 MiB           for var in current_vars:
    59   1941.0 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60   1941.0 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61   1941.0 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62   1941.0 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1552.1 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1552.1 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1552.1 MiB      0.0 MiB       j = 0
    69   1552.1 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1552.1 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1552.1 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1552.1 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1552.1 MiB      0.0 MiB       if m2.status == 9:
    78   1552.1 MiB      0.0 MiB           result.timeout = True
    79   1552.1 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1552.1 MiB      0.0 MiB           result.solution = True
    81   1552.1 MiB      0.0 MiB           result.feasible = True
    82   1552.1 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1552.1 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1552.1 MiB      0.0 MiB           for v in current_vars:
    85   1552.1 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1552.1 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1552.1 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89   1552.1 MiB      0.0 MiB                       res_vec[j] = 0
    90   1552.1 MiB      0.0 MiB                   j = j+1
    91                             
    92   1552.1 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 22:53:29 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.tra,lab' -mdp /tmp/tmpsv5zlrmj

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpsv5zlrmj"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.023 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      69 (1 initial)
Transitions: 84
Choices:     69

Transition matrix: 241 nodes (3 terminal), 84 minterms, vars: 7r/7c/1nd

Prob0A: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 427 iterations in 0.01 seconds (average 0.000028, setup 0.00)

yes = 10, no = 1, maybe = 58

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=7, nodes=228] [10.7 KB]
Adding sparse bits... [levels=7-7, num=1, compact=1/1] [0.4 KB]
Creating vector for yes... [dist=2, compact] [0.2 KB]
Allocating iteration vectors... [3 x 0.5 KB]
TOTAL: [12.8 KB]

Starting iterations...

Iterative method: 2371 iterations in 0.00 seconds (average 0.000002, setup 0.00)

Value in the initial state: 0.733333308566913

Time for model checking: 0.021 seconds.

Result: 0.733333308566913 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 1584 columns and 4117 nonzeros
Variable types: 528 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [7e-01, 2e+00]
Presolve removed 289 rows and 280 columns
Presolve time: 0.01s
Presolved: 1296 rows, 1304 columns, 3548 nonzeros
Variable types: 486 continuous, 818 integer (818 binary)

Root relaxation: objective 9.000000e-01, 7 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    0.90000    0    3          -    0.90000      -     -    0s
     0     2    2.60000    0    5          -    2.60000      -     -    0s
H 2354  1954                     173.0000000    7.33333  95.8%   7.5    2s
H 2450  1918                     129.0000000    7.80000  94.0%   7.7    2s
H 4342  2897                     119.0000000    8.00000  93.3%   9.0    4s
  6879  4019   74.78956  118   22  119.00000    8.00000  93.3%   8.7    5s
H 6881  3771                      91.0000000    8.00000  91.2%   8.7    5s
H13221  8688                      90.0000000    9.06667  89.9%   8.3    8s
H14461  9654                      88.0000000    9.80000  88.9%   8.4    8s
 19609 13661   26.06667   36   19   88.00000   10.29375  88.3%   8.6   10s
H28555 20460                      87.0000000   10.70000  87.7%   8.6   13s
H28557 20358                      86.0000000   10.70000  87.6%   8.6   13s
H28564 19899                      83.0000000   10.70000  87.1%   8.6   13s
 34197 24253 infeasible   98        83.00000   10.81667  87.0%   8.7   15s
 53755 38779 infeasible   77        83.00000   11.40000  86.3%   9.2   20s
 72756 52850     cutoff   34        83.00000   11.80000  85.8%   9.5   25s
H84172 60869                      82.0000000   12.06667  85.3%   9.8   29s
H84340 60280                      80.0000000   12.06667  84.9%   9.8   29s
 87139 62248     cutoff   55        80.00000   12.18333  84.8%   9.9   30s
 105153 75470   39.30000   51   18   80.00000   12.40000  84.5%  10.3   35s
 120447 86846   15.31667   37    7   80.00000   12.48333  84.4%  10.4   40s
 134475 97117   72.16198  120   14   80.00000   12.73333  84.1%  10.5   45s
 153721 111273   35.41852   45   20   80.00000   12.80000  84.0%  10.7   50s
 169482 122991   25.58889   46    8   80.00000   13.06667  83.7%  10.8   55s
H169678 119672                      76.0000000   13.06667  82.8%  10.8   55s
 182812 129193   30.30833   42   16   76.00000   13.14286  82.7%  10.9   60s
 197695 140345   14.20000   27   11   76.00000   13.20000  82.6%  10.9   65s
 212327 151171   66.33503   93   15   76.00000   13.36667  82.4%  11.0   70s
 227038 161942   57.31667   77   15   76.00000   13.40000  82.4%  11.0   75s
 243218 173867 infeasible   63        76.00000   13.48333  82.3%  11.0   80s
 254696 182280   14.54203   30    9   76.00000   13.60000  82.1%  11.0   85s
 270933 193905   66.87929   90   39   76.00000   13.73333  81.9%  11.1   90s
 283876 203183   58.90000   71   14   76.00000   13.77500  81.9%  11.1   95s
 297929 213626   19.26667   37    7   76.00000   13.80000  81.8%  11.1  100s
 310284 222595   43.53180   64   17   76.00000   13.85000  81.8%  11.1  105s
 326177 234155   72.79271   92   33   76.00000   13.95000  81.6%  11.1  110s
 340060 244243   57.79333   84   16   76.00000   14.05420  81.5%  11.1  115s
 356415 256213   33.74955   52   18   76.00000   14.09583  81.5%  11.1  120s
 369778 266117   49.83333   72   14   76.00000   14.15000  81.4%  11.1  125s
 382709 275721   56.69514   67   21   76.00000   14.20000  81.3%  11.1  130s
 400885 289067   68.53722   80   26   76.00000   14.24583  81.3%  11.2  135s
 416812 300804   64.10000   57   32   76.00000   14.30000  81.2%  11.2  140s
 431178 311251   62.80000   76   24   76.00000   14.40000  81.1%  11.3  145s
 443067 319971   72.67495   89   29   76.00000   14.40000  81.1%  11.3  150s
 460783 332904   16.80000   38    6   76.00000   14.44167  81.0%  11.3  155s
 478464 345815 infeasible   98        76.00000   14.49744  80.9%  11.3  160s
 496011 358684   36.97481   55   17   76.00000   14.56667  80.8%  11.3  165s
*509022 366481             112      75.0000000   14.60000  80.5%  11.3  168s
H509631 364427                      74.0000000   14.60000  80.3%  11.3  169s
H509637 353698                      71.0000000   14.60000  79.4%  11.3  169s
 509770 353746     cutoff   97        71.00000   14.60598  79.4%  11.3  170s
 528175 367000   53.69722   90    7   71.00000   14.67273  79.3%  11.3  175s
 546102 379699 infeasible   82        71.00000   14.73333  79.2%  11.4  180s
 563798 392699   69.43646  105   25   71.00000   14.77500  79.2%  11.4  185s
 582662 406311   25.28889   44   12   71.00000   14.80000  79.2%  11.4  190s
 595445 415656   42.37037   59   21   71.00000   14.82000  79.1%  11.4  195s
 609812 426096   16.29333   29    7   71.00000   14.89444  79.0%  11.4  200s
 626139 437605 infeasible   42        71.00000   14.95556  78.9%  11.4  205s
 640623 447768   62.51667   79   21   71.00000   15.02857  78.8%  11.4  210s
 656124 458946   37.89091   50   22   71.00000   15.06667  78.8%  11.5  215s
 669516 468481   39.99459   58   16   71.00000   15.07396  78.8%  11.5  220s
 688139 481900 infeasible   54        71.00000   15.10833  78.7%  11.5  225s
 702841 492612   35.05833   44   24   71.00000   15.14872  78.7%  11.5  230s
 721971 506405 infeasible   94        71.00000   15.20000  78.6%  11.5  235s
 735890 516740   61.31736   76   25   71.00000   15.20000  78.6%  11.5  240s
 754290 530006   39.32500   62   17   71.00000   15.24103  78.5%  11.5  245s
 769639 541259   21.85000   38    8   71.00000   15.26667  78.5%  11.5  250s
 784449 551965   49.33822   71   15   71.00000   15.30000  78.5%  11.5  255s
 802477 564820   21.15152   41    9   71.00000   15.34286  78.4%  11.5  260s
 816331 574740     cutoff   84        71.00000   15.37778  78.3%  11.5  265s
 829171 584099   58.14167   64   27   71.00000   15.40000  78.3%  11.6  270s
 847904 597882   44.90625   69   13   71.00000   15.40097  78.3%  11.6  275s
 864864 610264   37.56283   52   16   71.00000   15.44167  78.3%  11.5  280s
 884005 624330     cutoff   88        71.00000   15.48333  78.2%  11.5  285s
 899224 635286   46.17256   57   29   71.00000   15.50370  78.2%  11.5  290s
 916710 647688   29.76566   44   20   71.00000   15.54444  78.1%  11.6  295s
 935225 661208   22.19658   42    7   71.00000   15.60000  78.0%  11.6  300s
 950452 672455   67.12836   93   16   71.00000   15.60000  78.0%  11.5  305s
 969092 685981   28.78750   54    8   71.00000   15.63333  78.0%  11.5  310s
 987547 699258   63.38485   81   19   71.00000   15.68077  77.9%  11.5  315s
 1004913 711486   44.90426   54   19   71.00000   15.70000  77.9%  11.6  320s
 1018208 721051   39.83748   46   33   71.00000   15.73333  77.8%  11.6  325s
 1037964 735259   44.80000   56   19   71.00000   15.76111  77.8%  11.6  330s
 1054918 747609   41.63146   53   31   71.00000   15.78889  77.8%  11.6  335s
 1075950 763141 infeasible   77        71.00000   15.80000  77.7%  11.5  340s
 1093852 776091   67.56701   90   28   71.00000   15.83333  77.7%  11.5  345s
 1108930 787263   17.51333   35    9   71.00000   15.86667  77.7%  11.5  350s
 1125630 799191   22.01167   42    9   71.00000   15.89231  77.6%  11.5  355s
 1138542 808581   66.82455   85   25   71.00000   15.92282  77.6%  11.5  360s
 1149821 816770   69.65090   95   24   71.00000   15.93333  77.6%  11.5  365s
 1164728 827620 infeasible  104        71.00000   15.95000  77.5%  11.5  370s
 1177272 836684   52.32292   66   28   71.00000   15.97386  77.5%  11.5  375s
 1192288 847600   25.84638   38   13   71.00000   16.00000  77.5%  11.5  380s
 1206790 858245   20.00000   31   18   71.00000   16.03333  77.4%  11.5  385s
 1221476 868722   27.07067   44   15   71.00000   16.03810  77.4%  11.5  390s
 1232961 876976   49.73922   78   18   71.00000   16.06667  77.4%  11.5  395s
 1245715 886232     cutoff   81        71.00000   16.06667  77.4%  11.5  400s
 1258878 895833     cutoff  104        71.00000   16.08462  77.3%  11.5  405s
 1272293 905612   64.89865  102   19   71.00000   16.10000  77.3%  11.5  410s
 1288077 917514 infeasible   68        71.00000   16.10000  77.3%  11.5  415s
 1299428 925828     cutoff  113        71.00000   16.10833  77.3%  11.5  420s
 1309837 933440   48.60000   67   18   71.00000   16.12083  77.3%  11.5  425s
 1321363 942131   48.23060   69   25   71.00000   16.12250  77.3%  11.5  430s
 1333182 950765 infeasible   91        71.00000   16.15000  77.3%  11.5  435s
 1343932 958502   62.72614   92   27   71.00000   16.16410  77.2%  11.5  440s
 1360235 970612   42.12745   68   16   71.00000   16.19167  77.2%  11.5  445s
 1372229 979187     cutoff   55        71.00000   16.20000  77.2%  11.5  450s
 1380500 985011   65.13283   68   31   71.00000   16.20000  77.2%  11.5  455s
 1396818 996847   46.26192   77   15   71.00000   16.21538  77.2%  11.5  460s
 1411592 1007420   51.97778   91   11   71.00000   16.24103  77.1%  11.5  465s
 1425921 1017991   42.15185   72    8   71.00000   16.24231  77.1%  11.5  470s
 1441614 1029565   67.96531   83   20   71.00000   16.26667  77.1%  11.5  475s
 1453892 1038612   46.46667   77    7   71.00000   16.26667  77.1%  11.5  480s
 1469875 1050076 infeasible   78        71.00000   16.29375  77.1%  11.5  485s
 1484376 1060826   49.87438   83   12   71.00000   16.30185  77.0%  11.5  490s
 1498863 1071290   47.53333   60   16   71.00000   16.31923  77.0%  11.5  495s
 1511061 1080256   60.79346   90   32   71.00000   16.34444  77.0%  11.5  500s
 1525554 1090749   45.93333   68   12   71.00000   16.36667  76.9%  11.5  505s
 1538439 1099853   55.61346   91    8   71.00000   16.38333  76.9%  11.5  510s
 1549024 1107698   42.56806   57   21   71.00000   16.40000  76.9%  11.5  515s
 1562958 1117998 infeasible   72        71.00000   16.40000  76.9%  11.5  520s
 1579170 1129739   30.90000   29   32   71.00000   16.40000  76.9%  11.5  525s
 1595451 1141734   67.23324  114   19   71.00000   16.42356  76.9%  11.5  530s
 1601376 1146047   52.38953   70   20   71.00000   16.43030  76.9%  11.5  535s
 1616235 1156832   55.39333   73   29   71.00000   16.44167  76.8%  11.5  540s
 1630833 1167041     cutoff  107        71.00000   16.45417  76.8%  11.5  545s
 1645111 1177372   26.48241   39   18   71.00000   16.46667  76.8%  11.5  550s
 1660077 1188279   22.65479   36   17   71.00000   16.48333  76.8%  11.5  555s
 1674569 1198898   63.97708   81   25   71.00000   16.50000  76.8%  11.5  560s
 1689225 1209660     cutoff   87        71.00000   16.52440  76.7%  11.5  565s
 1700859 1218304 infeasible   76        71.00000   16.52941  76.7%  11.5  570s
 1715943 1229015   46.71458   64   15   71.00000   16.53333  76.7%  11.5  575s
 1731249 1240092   65.90959   93   12   71.00000   16.55897  76.7%  11.5  580s
 1745449 1250435   36.00080   64   14   71.00000   16.57333  76.7%  11.5  585s
 1760334 1261318   37.75897   57   15   71.00000   16.60000  76.6%  11.5  590s
 1773056 1270587   34.37500   55   11   71.00000   16.60000  76.6%  11.5  595s
 1786631 1280553   18.00000   35    7   71.00000   16.60000  76.6%  11.5  600s
 1801827 1291410   26.60000   50    7   71.00000   16.62308  76.6%  11.5  605s
 1817167 1302350   18.30000   37    9   71.00000   16.63333  76.6%  11.5  610s
 1831890 1312744   59.67046   63   32   71.00000   16.63333  76.6%  11.5  615s
 1846348 1322919   44.32680   68   13   71.00000   16.65333  76.5%  11.5  620s
 1860074 1332883   58.43820   66   24   71.00000   16.68333  76.5%  11.4  625s
 1872698 1342041 infeasible  104        71.00000   16.69167  76.5%  11.4  630s
 1888275 1352980   43.01487   56   16   71.00000   16.70000  76.5%  11.4  635s
 1900622 1361508   61.72949   95   10   71.00000   16.71667  76.5%  11.4  640s
 1914036 1371412   67.04625   77   30   71.00000   16.73333  76.4%  11.4  645s
 1929150 1382190   35.16585   58   16   71.00000   16.73333  76.4%  11.4  650s
 1940450 1390306   22.20000   43    6   71.00000   16.73733  76.4%  11.5  655s
 1955146 1400836 infeasible   77        71.00000   16.76250  76.4%  11.5  660s
 1969964 1411311   50.28829   64   29   71.00000   16.77500  76.4%  11.5  665s
 1985163 1422249     cutoff   51        71.00000   16.79167  76.3%  11.5  670s
 2000931 1433521   69.19444   99   24   71.00000   16.80000  76.3%  11.4  675s
 2017510 1445683   29.30123   40   24   71.00000   16.80000  76.3%  11.4  680s
 2031357 1455758   54.85046   62   34   71.00000   16.81667  76.3%  11.4  685s
 2048295 1467946   65.72116   88   33   71.00000   16.83333  76.3%  11.4  690s
 2062877 1478325 infeasible   53        71.00000   16.85000  76.3%  11.4  695s
 2080847 1491277   46.27500   57   23   71.00000   16.86667  76.2%  11.4  700s
 2093771 1500739   45.28889   77   10   71.00000   16.86667  76.2%  11.4  705s
 2108366 1511344   19.94487   37    8   71.00000   16.89144  76.2%  11.4  710s
 2123378 1522326   61.34000   85   18   71.00000   16.90000  76.2%  11.4  715s
 2139407 1533866 infeasible   68        71.00000   16.92083  76.2%  11.4  720s
 2152612 1543488   37.95652   68   14   71.00000   16.93333  76.2%  11.4  725s
 2165590 1553051   24.35556   45    9   71.00000   16.93333  76.2%  11.4  730s
 2177069 1561235   30.22222   49   19   71.00000   16.94615  76.1%  11.4  735s
 2193035 1572753   25.91517   44   16   71.00000   16.95833  76.1%  11.4  740s
 2203955 1580596   49.53333   58   20   71.00000   16.96667  76.1%  11.4  745s
 2216337 1589558   63.25979   63   58   71.00000   16.98438  76.1%  11.4  750s
 2230213 1599392   45.72396   69   15   71.00000   17.00000  76.1%  11.4  755s
 2241344 1607577   43.23016   64   18   71.00000   17.01181  76.0%  11.4  760s
 2253411 1616333   58.47313   83   15   71.00000   17.02424  76.0%  11.4  765s
 2264718 1624415   27.97778   47    8   71.00000   17.03333  76.0%  11.4  770s
 2279295 1634907   64.31104   81   35   71.00000   17.03333  76.0%  11.4  775s
 2295148 1646324   39.00662   67   12   71.00000   17.03333  76.0%  11.4  780s
 2308538 1656072   69.02889  103   23   71.00000   17.05185  76.0%  11.4  785s
 2323646 1667048   44.23030   58   16   71.00000   17.06667  76.0%  11.4  790s
 2338925 1678009 infeasible   71        71.00000   17.06667  76.0%  11.4  795s
 2354135 1688723   45.88333   56   21   71.00000   17.06667  76.0%  11.4  800s
 2367661 1698471   66.22970   98   11   71.00000   17.08333  75.9%  11.4  805s
 2382739 1709094   67.35111   88   25   71.00000   17.09583  75.9%  11.4  810s
 2397650 1719978   48.26525   81   21   71.00000   17.10000  75.9%  11.4  815s
 2411107 1729861   53.24087   87   19   71.00000   17.10000  75.9%  11.4  820s
 2425958 1740766   41.87778   63   22   71.00000   17.10000  75.9%  11.4  825s
 2440507 1751469   39.16667   63   15   71.00000   17.11111  75.9%  11.4  830s
 2454399 1761741   50.92650   81   16   71.00000   17.11667  75.9%  11.3  835s
 2472472 1774912 infeasible   86        71.00000   17.12308  75.9%  11.3  840s
 2486172 1784725   43.34091   58   22   71.00000   17.13333  75.9%  11.3  845s
 2494572 1790902   46.36515   64   22   71.00000   17.13333  75.9%  11.3  850s
 2511912 1803468 infeasible   66        71.00000   17.15000  75.8%  11.3  855s
 2528038 1815121   24.73333   45   11   71.00000   17.16410  75.8%  11.3  860s
 2542152 1825320   44.64583   63   18   71.00000   17.18148  75.8%  11.3  865s
 2557119 1836115   17.60833   33    9   71.00000   17.19444  75.8%  11.3  870s
 2570808 1845908   32.24722   44   22   71.00000   17.20000  75.8%  11.3  875s
 2583706 1855239   46.65833   60   23   71.00000   17.20000  75.8%  11.3  880s
 2599721 1866743   46.39697   60   26   71.00000   17.20000  75.8%  11.3  885s
 2616093 1878573   34.48464   44   19   71.00000   17.20556  75.8%  11.3  890s
 2631013 1889285   25.99394   41   14   71.00000   17.22564  75.7%  11.3  895s
 2642180 1897029   33.95556   47   23   71.00000   17.23333  75.7%  11.3  900s
 2651824 1904038   28.61667   48   11   71.00000   17.24103  75.7%  11.3  905s
 2666661 1914770   26.50741   45   22   71.00000   17.24103  75.7%  11.3  910s
 2681096 1925204   68.43333   42   40   71.00000   17.25000  75.7%  11.3  915s
 2693491 1934109   45.25976   65   16   71.00000   17.26667  75.7%  11.3  920s
 2707469 1944491   34.56970   47   15   71.00000   17.26667  75.7%  11.3  925s
 2719913 1953467   66.67500   74   34   71.00000   17.26667  75.7%  11.3  930s
 2734294 1963924   35.35556   50   18   71.00000   17.27500  75.7%  11.3  935s
 2748994 1974551   36.23333   45   17   71.00000   17.28759  75.7%  11.3  940s
 2765482 1986401   21.60000   39   11   71.00000   17.30000  75.6%  11.3  946s
 2777263 1995031 infeasible   96        71.00000   17.30000  75.6%  11.3  950s
 2789504 2003838   38.61875   54   19   71.00000   17.31282  75.6%  11.3  955s
 2805523 2015263   46.10076   63   25   71.00000   17.33333  75.6%  11.3  960s
 2819794 2025698     cutoff   65        71.00000   17.33939  75.6%  11.3  965s
 2835526 2037102   63.19259   79   26   71.00000   17.35238  75.6%  11.3  970s
 2848640 2046442   47.09206   84    8   71.00000   17.36667  75.5%  11.3  975s
 2860501 2054648   51.13800   58   30   71.00000   17.36667  75.5%  11.3  980s
 2875271 2065195   45.75133   72   20   71.00000   17.38333  75.5%  11.3  985s
 2891560 2077084   17.61212   32   12   71.00000   17.40000  75.5%  11.3  990s
 2905520 2087165   43.94286   56   16   71.00000   17.40000  75.5%  11.3  995s
 2916602 2094923   66.20296   92   23   71.00000   17.40000  75.5%  11.3 1000s
 2926020 2101823   54.27333   63   37   71.00000   17.40000  75.5%  11.3 1005s
 2941104 2112865   63.49965   93   28   71.00000   17.40000  75.5%  11.3 1010s
 2955922 2123578   19.24103   39    8   71.00000   17.40833  75.5%  11.3 1015s
 2973484 2136422   30.07634   43   14   71.00000   17.42917  75.5%  11.3 1020s
 2989724 2148412   68.16235   85   51   71.00000   17.43333  75.4%  11.3 1025s
 2998016 2154463   60.45208   73   21   71.00000   17.43333  75.4%  11.3 1030s
 3014718 2166630     cutoff   60        71.00000   17.45000  75.4%  11.3 1035s
 3029829 2177533   21.06667   32   18   71.00000   17.45417  75.4%  11.3 1040s
 3045014 2188761   69.42222  102   21   71.00000   17.45417  75.4%  11.3 1045s
 3059748 2199214   63.95937   74   33   71.00000   17.46154  75.4%  11.3 1050s
 3072114 2208067 infeasible   80        71.00000   17.46923  75.4%  11.3 1055s
 3086017 2218311   23.30000   41   10   71.00000   17.48333  75.4%  11.3 1060s
 3097577 2226842   63.86349  108    8   71.00000   17.48571  75.4%  11.3 1065s
 3113654 2238515   23.28333   39   12   71.00000   17.49744  75.4%  11.3 1070s
 3130487 2250872   30.28889   48   17   71.00000   17.50227  75.3%  11.3 1075s
 3147796 2263192   69.59489  112   14   71.00000   17.52500  75.3%  11.3 1080s
 3157583 2270442     cutoff   73        71.00000   17.52821  75.3%  11.3 1085s
 3171898 2280468   45.75556   68   19   71.00000   17.53333  75.3%  11.3 1090s
 3186781 2291108   56.99701   86   14   71.00000   17.53333  75.3%  11.3 1095s
 3202102 2302046   59.07457   85   32   71.00000   17.53889  75.3%  11.3 1100s
 3216547 2312600 infeasible   76        71.00000   17.55556  75.3%  11.3 1105s
 3229704 2322141     cutoff   64        71.00000   17.56111  75.3%  11.3 1110s
 3246256 2334266   42.59862   56   28   71.00000   17.56667  75.3%  11.3 1115s
 3261341 2345209   53.33333   87    9   71.00000   17.58333  75.2%  11.3 1120s
 3279179 2358001 infeasible   94        71.00000   17.60000  75.2%  11.3 1125s
 3294233 2368836   25.81204   42   15   71.00000   17.60000  75.2%  11.3 1130s
 3307798 2378914   24.30000   38   13   71.00000   17.60000  75.2%  11.3 1135s
 3327095 2392880   60.96562   95   24   71.00000   17.60360  75.2%  11.2 1140s
 3346150 2406936   35.07134   51   16   71.00000   17.61818  75.2%  11.2 1145s
 3360158 2416845   57.13667   69   21   71.00000   17.62564  75.2%  11.2 1150s
 3372721 2425848   62.97170   71   37   71.00000   17.63333  75.2%  11.2 1155s
 3384567 2434219   62.76154  104    6   71.00000   17.63333  75.2%  11.2 1160s
 3394531 2441063 infeasible   72        71.00000   17.63333  75.2%  11.2 1165s
 3408792 2451447   50.33333   58   23   71.00000   17.63333  75.2%  11.2 1170s
 3424740 2462935   68.74415  113   15   71.00000   17.64615  75.1%  11.2 1175s
 3438488 2472676   37.77445   50   14   71.00000   17.65833  75.1%  11.2 1180s
 3453955 2483695   21.92069   33   14   71.00000   17.67273  75.1%  11.2 1185s
 3468988 2494692   24.26667   39   14   71.00000   17.68333  75.1%  11.2 1190s
 3481425 2503622   25.63333   35   29   71.00000   17.68788  75.1%  11.2 1195s
 3489429 2509363     cutoff  106        71.00000   17.69524  75.1%  11.2 1200s
 3503728 2519370   67.66327   89   24   71.00000   17.70000  75.1%  11.2 1205s
 3518118 2529112   45.39293   76   13   71.00000   17.70000  75.1%  11.2 1210s
 3535943 2541827   19.79583   40    8   71.00000   17.71667  75.0%  11.2 1215s
 3554021 2554833   38.33333   54   18   71.00000   17.72564  75.0%  11.2 1220s
 3568603 2565462     cutoff   70        71.00000   17.73333  75.0%  11.2 1225s
 3580891 2574510   25.11587   46   10   71.00000   17.73333  75.0%  11.2 1230s
 3593606 2583801   45.37871   49   26   71.00000   17.73333  75.0%  11.2 1235s
 3605364 2592374   53.88255   76   15   71.00000   17.73333  75.0%  11.2 1240s
 3621677 2604073   63.90602   92   15   71.00000   17.73333  75.0%  11.2 1245s
 3634694 2613447     cutoff   61        71.00000   17.74286  75.0%  11.2 1250s
 3648710 2623400   52.02222   63   25   71.00000   17.75641  75.0%  11.2 1255s
 3665791 2635838   61.96667   93   18   71.00000   17.76667  75.0%  11.2 1260s
 3680357 2646420   67.87222   71   27   71.00000   17.77059  75.0%  11.2 1265s
 3694846 2656548 infeasible   84        71.00000   17.77619  75.0%  11.2 1270s
 3706385 2664616   31.83333   51   15   71.00000   17.78889  74.9%  11.2 1275s
 3722564 2676056   48.39972   75   18   71.00000   17.80000  74.9%  11.2 1280s
 3734215 2684808   28.48889   45   15   71.00000   17.80000  74.9%  11.2 1285s
 3746944 2694189     cutoff   61        71.00000   17.80000  74.9%  11.2 1290s
 3760095 2703869   66.53333   90   20   71.00000   17.80000  74.9%  11.2 1295s
 3767655 2709222   31.99722   52   11   71.00000   17.80370  74.9%  11.2 1300s
 3783310 2720481     cutoff   87        71.00000   17.81667  74.9%  11.2 1305s
 3799941 2732289   33.90000   52   16   71.00000   17.82396  74.9%  11.2 1310s
 3814798 2742965   23.91667   45    8   71.00000   17.83333  74.9%  11.2 1315s
 3830528 2754239   51.28333   65   26   71.00000   17.84167  74.9%  11.2 1320s
 3845106 2764696   67.50667   70   32   71.00000   17.85000  74.9%  11.2 1325s
 3857533 2773656   40.66667   53   17   71.00000   17.85000  74.9%  11.2 1330s
 3868699 2781487     cutoff   92        71.00000   17.86667  74.8%  11.2 1335s
 3883626 2792194   55.32630   69   35   71.00000   17.86667  74.8%  11.2 1340s
 3900064 2803894     cutoff   93        71.00000   17.86667  74.8%  11.2 1345s
 3914723 2814492   63.07107   78   21   71.00000   17.87569  74.8%  11.2 1350s
 3925598 2822456   28.60000   47   11   71.00000   17.88750  74.8%  11.2 1355s
 3940980 2833010     cutoff   57        71.00000   17.90000  74.8%  11.2 1360s
 3952072 2840948   46.38990   75    9   71.00000   17.90000  74.8%  11.2 1365s
 3967529 2852081   23.99333   45    9   71.00000   17.90000  74.8%  11.2 1370s
 3982513 2862807   22.88889   43    7   71.00000   17.90769  74.8%  11.2 1375s
 3994817 2871732   67.02352   93   36   71.00000   17.91816  74.8%  11.2 1380s
 4008791 2881768   66.64881   88   17   71.00000   17.93077  74.7%  11.2 1385s
 4020767 2890401   48.38000   73   14   71.00000   17.93333  74.7%  11.2 1390s
 4033623 2899676 infeasible   48        71.00000   17.93333  74.7%  11.2 1395s
 4048286 2910142   51.48309   66   30   71.00000   17.93333  74.7%  11.2 1400s
 4065063 2922415   36.62703   63   13   71.00000   17.93333  74.7%  11.2 1405s
 4080863 2934005   57.00358   66   28   71.00000   17.94615  74.7%  11.2 1410s
 4089895 2940627   40.37944   52   22   71.00000   17.95000  74.7%  11.2 1415s
 4102250 2949574   48.17444   72   17   71.00000   17.95417  74.7%  11.1 1420s
 4110731 2955567   28.81010   43   19   71.00000   17.96000  74.7%  11.1 1425s
 4122229 2963750   59.75238   80    8   71.00000   17.96667  74.7%  11.1 1430s
 4133366 2971673   21.04583   34   16   71.00000   17.97500  74.7%  11.1 1435s
 4141123 2977148 infeasible   58        71.00000   17.98068  74.7%  11.1 1440s
 4153377 2985982   68.34782  107   31   71.00000   17.98889  74.7%  11.1 1445s
 4167522 2995982   39.58452   53   29   71.00000   18.00000  74.6%  11.1 1450s
 4184264 3007856   41.83993   55   24   71.00000   18.00000  74.6%  11.1 1455s
 4201937 3020702   56.11792   82   20   71.00000   18.01026  74.6%  11.1 1460s
 4216173 3030996   31.57222   41   17   71.00000   18.01667  74.6%  11.1 1465s
 4227433 3039201   69.43556   91   26   71.00000   18.02222  74.6%  11.1 1470s
 4239610 3048073   68.23990   93   12   71.00000   18.02857  74.6%  11.1 1475s
 4253794 3058412 infeasible   68        71.00000   18.03333  74.6%  11.1 1480s
 4268271 3068259   22.20000   41    9   71.00000   18.03333  74.6%  11.1 1485s
 4285700 3080521   58.74167   73   23   71.00000   18.03333  74.6%  11.1 1490s
 4298391 3089542   66.26667  109   11   71.00000   18.03333  74.6%  11.1 1495s
 4311917 3099234   25.47619   43    9   71.00000   18.03784  74.6%  11.1 1500s
 4327764 3110649   22.04204   38   17   71.00000   18.04706  74.6%  11.1 1505s
 4344096 3122379   56.25000   67   19   71.00000   18.05833  74.6%  11.1 1510s
 4360018 3133942   40.78333   54   21   71.00000   18.06667  74.6%  11.1 1515s
 4375628 3145024   37.90000   53   21   71.00000   18.06667  74.6%  11.1 1520s
 4390245 3155609   60.57963   67   30   71.00000   18.06667  74.6%  11.1 1525s
 4401577 3163659   48.28545   73   14   71.00000   18.06667  74.6%  11.1 1530s
 4417270 3174808   61.33333   78   26   71.00000   18.06667  74.6%  11.1 1535s
 4433409 3186278   28.82493   55   11   71.00000   18.07083  74.5%  11.1 1540s
 4449719 3197907   39.54356   55   20   71.00000   18.08333  74.5%  11.1 1545s
 4460995 3206022   52.27778   75   22   71.00000   18.08889  74.5%  11.1 1550s
 4476908 3217185 infeasible  101        71.00000   18.09583  74.5%  11.1 1555s
 4491974 3227884   61.62727   80   22   71.00000   18.10000  74.5%  11.1 1560s
 4507519 3238996   61.23333   79   22   71.00000   18.10000  74.5%  11.1 1565s
 4525358 3251885   66.66508   72   23   71.00000   18.10000  74.5%  11.1 1570s
 4540619 3263047   59.13889   83   27   71.00000   18.10000  74.5%  11.1 1575s
 4553401 3272200 infeasible   68        71.00000   18.10833  74.5%  11.1 1580s
 4568189 3282793   33.78211   47   21   71.00000   18.11429  74.5%  11.1 1585s
 4584289 3294456   41.44296   69   10   71.00000   18.11892  74.5%  11.1 1590s
 4596431 3303262   28.86111   55   10   71.00000   18.12083  74.5%  11.1 1595s
 4612451 3314723   24.57114   44   15   71.00000   18.12525  74.5%  11.1 1600s
 4625762 3324549   39.50725   54   21   71.00000   18.13333  74.5%  11.1 1605s
 4634178 3330520   46.25147   76   17   71.00000   18.13333  74.5%  11.1 1610s
 4646341 3339239   47.31389   73   16   71.00000   18.13333  74.5%  11.1 1615s
 4659691 3348895   67.50128   91   30   71.00000   18.14444  74.4%  11.1 1620s
 4675136 3360132   27.51515   38   14   71.00000   18.15000  74.4%  11.1 1625s
 4687409 3369054   31.36000   49   15   71.00000   18.15556  74.4%  11.1 1630s
 4702071 3379629   18.35160   35    8   71.00000   18.16410  74.4%  11.1 1635s
 4714092 3388088   27.76911   49   13   71.00000   18.16533  74.4%  11.1 1640s
 4730739 3399926   58.55500   67   34   71.00000   18.17778  74.4%  11.1 1645s
 4743698 3409119   31.06667   51   12   71.00000   18.18333  74.4%  11.1 1650s
 4756534 3418506 infeasible   67        71.00000   18.18788  74.4%  11.1 1655s
 4768576 3427066   59.17055   91   22   71.00000   18.19487  74.4%  11.1 1660s
 4783594 3437813   18.76250   35   12   71.00000   18.20000  74.4%  11.1 1665s
 4798795 3448505   29.70000   44   14   71.00000   18.20000  74.4%  11.1 1670s
 4815366 3460244   29.69810   43   17   71.00000   18.20000  74.4%  11.1 1675s
 4826678 3468195   53.15776   89   11   71.00000   18.20000  74.4%  11.1 1680s
 4841093 3478555   45.21014   53   25   71.00000   18.20000  74.4%  11.1 1685s
 4854660 3488072   44.26869   69   16   71.00000   18.20000  74.4%  11.1 1690s
 4870957 3499800 infeasible   78        71.00000   18.21098  74.4%  11.1 1695s
 4884428 3509751     cutoff   77        71.00000   18.21667  74.3%  11.1 1700s
 4901579 3521705   41.86667   60   13   71.00000   18.22564  74.3%  11.1 1705s
 4914515 3531006   65.65000   88   20   71.00000   18.23333  74.3%  11.1 1710s
 4934301 3544933   66.17708   97   24   71.00000   18.24103  74.3%  11.1 1715s
 4949837 3555998 infeasible   92        71.00000   18.24103  74.3%  11.1 1720s
 4965876 3567266   24.45417   45   15   71.00000   18.24667  74.3%  11.1 1725s
 4978868 3576652   60.88030   83   20   71.00000   18.25333  74.3%  11.1 1730s
 4992470 3586382   20.46042   39    9   71.00000   18.26250  74.3%  11.1 1735s
 5006182 3596295 infeasible   51        71.00000   18.26667  74.3%  11.1 1740s
 5018955 3605599   22.45586   35   17   71.00000   18.26667  74.3%  11.1 1745s
 5032460 3615559 infeasible   76        71.00000   18.26667  74.3%  11.1 1750s
 5045644 3625004   28.92642   49   11   71.00000   18.26667  74.3%  11.1 1755s
 5057733 3633568   67.06447   80   24   71.00000   18.26667  74.3%  11.1 1760s
 5068577 3641423   62.77361   80   30   71.00000   18.27500  74.3%  11.0 1765s
 5080828 3650434   56.93333   82   17   71.00000   18.27949  74.3%  11.0 1770s
 5096896 3661976   30.36296   46   19   71.00000   18.28718  74.2%  11.0 1775s
 5110711 3672056   25.00000   38   18   71.00000   18.29231  74.2%  11.0 1780s
 5121883 3679974   48.95000   60   28   71.00000   18.29790  74.2%  11.0 1785s
 5135027 3689430   31.04000   45   17   71.00000   18.30000  74.2%  11.0 1790s
 5144320 3696219   38.21481   65    8   71.00000   18.30000  74.2%  11.0 1795s
 5158861 3706848   58.88865   65   28   71.00000   18.30769  74.2%  11.0 1800s

Explored 5160619 nodes (56963870 simplex iterations) in 1800.04 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 71 74 75 ... 88

Time limit reached
Best objective 7.100000000000e+01, best bound 1.900000000000e+01, gap 73.2394%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    891.4 MiB    891.4 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    891.4 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    891.4 MiB      0.0 MiB       m2 = m.construct()
    28    891.4 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    891.4 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    891.4 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    891.4 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    891.4 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    891.4 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    891.4 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    891.4 MiB      0.0 MiB       m2.update()
    44    891.4 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    891.4 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    891.4 MiB      0.0 MiB       if(set_binary):
    51    891.4 MiB      0.0 MiB           for x in set_binary:
    52    891.4 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    891.4 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   4339.4 MiB   3448.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   4339.4 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   4339.4 MiB      0.0 MiB       j = 0
    69   4339.4 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   4339.4 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   4339.4 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   4339.4 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   4339.4 MiB      0.0 MiB       if m2.status == 9:
    78   4339.4 MiB      0.0 MiB           result.timeout = True
    79   4339.4 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   4339.4 MiB      0.0 MiB           result.solution = True
    81   4339.4 MiB      0.0 MiB           result.feasible = True
    82   4339.4 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   4339.4 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   4339.4 MiB      0.0 MiB           for v in current_vars:
    85   4339.4 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   4339.4 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   4339.4 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   4339.4 MiB      0.0 MiB                   j = j+1
    91                             
    92   4339.4 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 23:23:37 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.tra,lab' -mdp /tmp/tmpp5ut_tqz

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpp5ut_tqz"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 28 iterations in 0.00 seconds (average 0.000143, setup 0.00)

Time for model construction: 0.029 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      74 (1 initial)
Transitions: 158
Choices:     142

Transition matrix: 300 nodes (3 terminal), 158 minterms, vars: 7r/7c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 462 iterations in 0.01 seconds (average 0.000026, setup 0.00)

yes = 10, no = 1, maybe = 63

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=7, nodes=314] [14.7 KB]
Adding sparse bits... [levels=7-7, num=2, compact=2/2] [0.7 KB]
Creating vector for yes... [dist=2, compact] [0.2 KB]
Allocating iteration vectors... [3 x 0.6 KB]
TOTAL: [17.3 KB]

Starting iterations...

Iterative method: 2680 iterations in 0.00 seconds (average 0.000001, setup 0.00)

Value in the initial state: 0.749999972001704

Time for model checking: 0.025 seconds.

Result: 0.749999972001704 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [8e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   8.000000e-01   0.000000e+00      0s
     566    1.5360000e+02   0.000000e+00   0.000000e+00      0s

Solved in 566 iterations and 0.03 seconds
Optimal objective  1.536000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2582.3 MiB   2582.3 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2582.3 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2582.3 MiB      0.0 MiB       m2 = m.construct()
    28   2582.3 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2582.3 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2582.3 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2582.3 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2582.3 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2582.3 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2582.3 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2582.3 MiB      0.0 MiB       m2.update()
    44   2582.3 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2582.3 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2582.3 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2582.3 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2582.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2582.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2582.3 MiB      0.0 MiB       j = 0
    69   2582.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2582.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2582.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2582.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2582.3 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2582.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2582.3 MiB      0.0 MiB           result.solution = True
    81   2582.3 MiB      0.0 MiB           result.feasible = True
    82   2582.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2582.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2582.3 MiB      0.0 MiB           for v in current_vars:
    85   2582.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2582.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2582.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2582.3 MiB      0.0 MiB                   j = j+1
    91                             
    92   2582.3 MiB      0.0 MiB       return result, res_vec



subsystem size:208

probability: 0.7999999999999998
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 23:23:38 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.tra,lab' -mdp /tmp/tmp8q1zzbre

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp8q1zzbre"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 79 iterations in 0.01 seconds (average 0.000101, setup 0.00)

Time for model construction: 0.039 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      209 (1 initial)
Transitions: 260
Choices:     210

Transition matrix: 557 nodes (3 terminal), 260 minterms, vars: 8r/8c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 409 iterations in 0.02 seconds (average 0.000059, setup 0.00)

yes = 76, no = 1, maybe = 132

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=454] [21.3 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [1.1 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.6 KB]
TOTAL: [27.7 KB]

Starting iterations...

Iterative method: 2238 iterations in 0.01 seconds (average 0.000005, setup 0.00)

Value in the initial state: 0.8182288627615273

Time for model checking: 0.041 seconds.

Result: 0.8182288627615273 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [8e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   8.000000e-01   0.000000e+00      0s
     566    1.5360000e+02   0.000000e+00   0.000000e+00      0s

Solved in 566 iterations and 0.03 seconds
Optimal objective  1.536000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2582.3 MiB   2582.3 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2582.3 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2582.3 MiB      0.0 MiB       m2 = m.construct()
    28   2582.3 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2582.3 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2582.3 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2582.3 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2582.3 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2582.3 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2582.3 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2582.3 MiB      0.0 MiB       m2.update()
    44   2582.3 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2582.3 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2582.3 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2582.3 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2582.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2582.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2582.3 MiB      0.0 MiB       j = 0
    69   2582.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2582.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2582.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2582.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2582.3 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2582.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2582.3 MiB      0.0 MiB           result.solution = True
    81   2582.3 MiB      0.0 MiB           result.feasible = True
    82   2582.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2582.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2582.3 MiB      0.0 MiB           for v in current_vars:
    85   2582.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2582.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2582.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2582.3 MiB      0.0 MiB                   j = j+1
    91                             
    92   2582.3 MiB      0.0 MiB       return result, res_vec



subsystem size:208

probability: 0.7999999999999998
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [2e-01, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [8e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   8.000000e-01   0.000000e+00      0s
     157    1.5047173e+02   0.000000e+00   0.000000e+00      0s

Solved in 157 iterations and 0.01 seconds
Optimal objective  1.504717270e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2582.3 MiB   2582.3 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2582.3 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2582.3 MiB      0.0 MiB       m2 = m.construct()
    28   2582.3 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2582.3 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2582.3 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2582.3 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2582.3 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2582.3 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2582.3 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2582.3 MiB      0.0 MiB       m2.update()
    44   2582.3 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2582.3 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2582.3 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2582.3 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2582.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2582.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2582.3 MiB      0.0 MiB       j = 0
    69   2582.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2582.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2582.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2582.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2582.3 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2582.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2582.3 MiB      0.0 MiB           result.solution = True
    81   2582.3 MiB      0.0 MiB           result.feasible = True
    82   2582.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2582.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2582.3 MiB      0.0 MiB           for v in current_vars:
    85   2582.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2582.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2582.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2582.3 MiB      0.0 MiB                   j = j+1
    91                             
    92   2582.3 MiB      0.0 MiB       return result, res_vec



subsystem size:154

probability: 0.7999999999999999
PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 23:23:40 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.tra,lab' -mdp /tmp/tmpp45wdqv3

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpp45wdqv3"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 44 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.033 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      156 (1 initial)
Transitions: 193
Choices:     156

Transition matrix: 415 nodes (3 terminal), 193 minterms, vars: 8r/8c/1nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 298 iterations in 0.02 seconds (average 0.000054, setup 0.00)

yes = 12, no = 1, maybe = 143

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=8, nodes=394] [18.5 KB]
Adding sparse bits... [levels=8-8, num=1, compact=1/1] [0.9 KB]
Creating vector for yes... [dist=2, compact] [0.3 KB]
Allocating iteration vectors... [3 x 1.2 KB]
TOTAL: [23.3 KB]

Starting iterations...

Iterative method: 2238 iterations in 0.01 seconds (average 0.000004, setup 0.00)

Value in the initial state: 0.8016571386886608

Time for model checking: 0.029 seconds.

Result: 0.8016571386886608 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 287 rows and 572 columns
Presolve time: 0.00s
Presolved: 242 rows, 484 columns, 1076 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -8.0800000e+32   1.800000e+32   8.080000e+02      0s
     517   -2.4400000e+02   0.000000e+00   0.000000e+00      0s

Solved in 517 iterations and 0.01 seconds
Optimal objective -2.440000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2582.3 MiB   2582.3 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2582.3 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2582.3 MiB      0.0 MiB       m2 = m.construct()
    28   2582.3 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2582.3 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2582.3 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2582.3 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2582.3 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2582.3 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2582.3 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2582.3 MiB      0.0 MiB       m2.update()
    44   2582.3 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2582.3 MiB      0.0 MiB       if(zero_vars):
    47   2582.3 MiB      0.0 MiB           for x in zero_vars:
    48   2582.3 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2582.3 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2582.3 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2582.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2582.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2582.3 MiB      0.0 MiB       j = 0
    69   2582.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2582.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2582.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2582.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2582.3 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2582.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2582.3 MiB      0.0 MiB           result.solution = True
    81   2582.3 MiB      0.0 MiB           result.feasible = True
    82   2582.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2582.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2582.3 MiB      0.0 MiB           for v in current_vars:
    85   2582.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2582.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2582.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2582.3 MiB      0.0 MiB                   j = j+1
    91                             
    92   2582.3 MiB      0.0 MiB       return result, res_vec


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 2112 columns and 3868 nonzeros
Variable types: 1056 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 2e+02]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [8e-01, 1e+00]
Presolve removed 428 rows and 700 columns
Presolve time: 0.01s
Presolved: 1157 rows, 1412 columns, 3016 nonzeros
Variable types: 704 continuous, 708 integer (708 binary)

Root relaxation: objective 3.622377e+00, 1422 iterations, 0.11 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.62238    0  255          -    3.62238      -     -    0s
H    0     0                     311.0000000    3.62238  98.8%     -    0s
H    0     2                     248.0000000    3.62238  98.5%     -    5s
     0     2    3.62238    0  210  248.00000    3.62238  98.5%     -    5s
H    2     4                     209.0000000    3.62362  98.3%   132    5s
H    7    16                     184.0000000    3.87819  97.9%   138    6s
H    8    16                     157.0000000    3.87819  97.5%   139    6s
H   12    16                     155.0000000    4.10231  97.4%   158    6s
H   33    34                     153.0000000    4.45266  97.1%  98.7    7s
H   54    46                     101.0000000    4.89763  95.2%  85.8    7s
   492   404    9.78361   26  151  101.00000    4.89763  95.2%  57.8   10s
H 1012   845                      81.0000000    4.89763  94.0%  42.1   11s
H 1299  1077                      80.0000000    4.89763  93.9%  39.5   13s
H 1304  1078                      78.0000000    4.89763  93.7%  39.6   13s
H 1306  1076                      76.0000000    4.89763  93.6%  39.6   13s
  2039  1650   40.52363  110   80   76.00000    4.89763  93.6%  34.0   15s
  3342  2647    8.96783   14  255   76.00000    5.69448  92.5%  35.8   23s
  3345  2649   71.60550  182  114   76.00000    5.69448  92.5%  35.8   26s
  3352  2659    5.82024   18  140   76.00000    5.69448  92.5%  36.5   30s
H 3386  2550                      72.0000000    5.88608  91.8%  37.2   31s
H 3437  2443                      71.0000000    5.88608  91.7%  37.4   34s
  3482  2467   11.09378   26  120   71.00000    5.88608  91.7%  37.5   35s
  5702  3605   34.87694  106  102   71.00000    5.88608  91.7%  37.1   40s
  8681  4930 infeasible  159        71.00000    5.88608  91.7%  36.7   46s
 10722  5900   21.57113   55  102   71.00000    6.28829  91.1%  36.5   50s
 15002  9419   69.46450  149   54   71.00000    6.29126  91.1%  34.8   55s
 18252 12099   61.48004   85   79   71.00000    6.29126  91.1%  33.8   60s
 21939 15112   37.74851   93   65   71.00000    6.29126  91.1%  33.9   65s
 26357 18556   13.09634   32  110   71.00000    7.23241  89.8%  33.8   72s
H26360 18461                      70.0000000    7.23241  89.7%  33.8   72s
 28103 19803 infeasible   60        70.00000    7.23241  89.7%  33.6   75s
 31250 22240 infeasible  115        70.00000    7.27216  89.6%  33.5   80s
 36883 26708   55.74183   78   99   70.00000    7.34143  89.5%  32.8   86s
 41460 30199   20.18218   51  102   70.00000    7.34143  89.5%  32.9   92s
H41499 29922                      69.0000000    7.34143  89.4%  32.9   92s
 41539 29945   24.10768   55   98   69.00000    7.34143  89.4%  33.0   95s
 46128 33536   42.18398   68   89   69.00000    7.77021  88.7%  33.1  101s
 49462 36055   67.94275  113   62   69.00000    7.89346  88.6%  33.2  105s
 54477 40015   25.45138   49   91   69.00000    8.04803  88.3%  33.0  110s
 59519 44026   12.04548   32  144   69.00000    8.13979  88.2%  32.9  115s
 64456 47962   29.72906   51   88   69.00000    8.20938  88.1%  32.8  121s
 69680 52058   10.21790   36   99   69.00000    8.21710  88.1%  32.7  125s
 74784 56069   61.23312  133   40   69.00000    8.22896  88.1%  32.6  130s
 79565 59893     cutoff  131        69.00000    8.24425  88.1%  32.5  135s
 82930 62309   60.77107  110   69   69.00000    8.24938  88.0%  32.5  140s
 88820 66960   50.36973  100   68   69.00000    8.25489  88.0%  32.1  146s
 93820 71009   61.68030  104   77   69.00000    8.26093  88.0%  31.9  150s
 99186 75290   50.53099   81   44   69.00000    8.28998  88.0%  31.8  155s
 105500 80441   59.65533  119  100   69.00000    8.30974  88.0%  31.8  161s
 108698 82963 infeasible   78        69.00000    8.32080  87.9%  31.8  165s
 115861 88682   21.29680   43  109   69.00000    8.33733  87.9%  31.6  171s
 120448 92295   37.69840   54   83   69.00000    8.58969  87.6%  31.5  176s
 122400 93844   20.28712   44  117   69.00000    8.58969  87.6%  31.4  180s
 127331 97763   35.04677   55   99   69.00000    8.65889  87.5%  31.5  186s
 132250 101710   46.99596   76   88   69.00000    8.74009  87.3%  31.5  191s
 135206 104021   20.86122   48  102   69.00000    8.74419  87.3%  31.5  195s
 140227 108061     cutoff  127        69.00000    8.75697  87.3%  31.5  201s
 145397 112251   62.36803  130   63   69.00000    8.77776  87.3%  31.4  206s
 148884 114970   62.00058  111   74   69.00000    8.81629  87.2%  31.4  211s
 153480 118507   45.14322   72   78   69.00000    8.84298  87.2%  31.5  216s
 156922 121254    9.74721   31  138   69.00000    8.87121  87.1%  31.4  220s
 161807 125021   49.92133   80   75   69.00000    8.89270  87.1%  31.4  226s
 166855 129023   64.40894  122   67   69.00000    8.91585  87.1%  31.4  231s
 170007 131567   35.78902   75   71   69.00000    8.92256  87.1%  31.4  235s
 173424 134305   36.02867   73   76   69.00000    8.93099  87.1%  31.4  241s
 178602 138501   32.59376   75  107   69.00000    9.05108  86.9%  31.3  246s
 183545 142525   57.50579   92   72   69.00000    9.11147  86.8%  31.3  250s
 188334 146395   57.63835  104   66   69.00000    9.13417  86.8%  31.3  255s
 193528 150573   15.06023   38  103   69.00000    9.16195  86.7%  31.3  261s
 198556 154596   53.12616  117   72   69.00000    9.16478  86.7%  31.2  265s
 205018 159881   46.94097   88   72   69.00000    9.17942  86.7%  31.2  271s
 210074 163864   60.70996  111   58   69.00000    9.19711  86.7%  31.1  275s
 214783 167648   52.38300  108   77   69.00000    9.20179  86.7%  31.1  281s
 219005 170861   26.80272   54   81   69.00000    9.20977  86.7%  31.2  286s
 222281 173591   53.24816   83   82   69.00000    9.21869  86.6%  31.2  291s
 227120 177328   48.72869  101   86   69.00000    9.21961  86.6%  31.3  296s
 232653 181693   66.93255   94   84   69.00000    9.22733  86.6%  31.3  300s
 237629 185596   58.23700  120   61   69.00000    9.23069  86.6%  31.3  306s
 242292 189219   51.39049   96   70   69.00000    9.23614  86.6%  31.3  310s
 247577 193481   50.84199   95   56   69.00000    9.23674  86.6%  31.3  315s
 254115 198695   55.11986  104  103   69.00000    9.24017  86.6%  31.2  321s
 257562 201509   58.28116  110   48   69.00000    9.24017  86.6%  31.2  325s
H257577 199695                      68.0000000    9.24017  86.4%  31.2  325s
 260662 202037   66.50421   96  100   68.00000    9.24017  86.4%  31.2  330s
 266149 206445   22.92345   60   85   68.00000    9.25084  86.4%  31.2  335s
 272777 211662   56.81759  137   72   68.00000    9.25690  86.4%  31.2  341s
 277870 215599   38.84202   79   95   68.00000    9.27041  86.4%  31.2  346s
 282878 219457   12.31019   41  105   68.00000    9.29264  86.3%  31.2  350s
 287769 223218   53.37575   90   79   68.00000    9.30292  86.3%  31.2  355s
 295085 229029   19.57251   42   97   68.00000    9.31612  86.3%  31.1  361s
 298373 231755   48.39447   92   67   68.00000    9.31612  86.3%  31.0  366s
 301767 234511   40.46470   70   70   68.00000    9.31612  86.3%  31.0  370s
 306576 238281   17.11533   39  139   68.00000    9.35651  86.2%  31.0  375s
 313060 243322   12.64127   31  109   68.00000    9.43002  86.1%  30.9  380s
 318311 247440   25.86671   51   89   68.00000    9.45812  86.1%  30.9  385s
 323218 251379   22.01734   41  117   68.00000    9.49856  86.0%  30.9  390s
 329947 256622   18.90294   47  112   68.00000    9.58217  85.9%  30.8  395s
 334521 260334   60.37863  121   55   68.00000    9.59375  85.9%  30.8  401s
 339727 264415   15.39834   37  113   68.00000    9.59590  85.9%  30.8  406s
 342602 266690   64.92636  121   81   68.00000    9.61891  85.9%  30.8  411s
 345518 269128   64.26393  110   83   68.00000    9.61891  85.9%  30.8  417s
 347386 270600   65.89565  117   78   68.00000    9.61891  85.9%  30.8  421s
 350739 273214   59.36014  110   66   68.00000    9.66770  85.8%  30.8  425s
 355607 277066   61.89587  112   67   68.00000    9.69260  85.7%  30.8  430s
 360632 281010   47.86947   89   74   68.00000    9.69522  85.7%  30.8  435s
 364467 284076   48.14391   83   78   68.00000    9.71059  85.7%  30.7  440s
 369187 287857   20.00676   41   99   68.00000    9.72482  85.7%  30.7  445s
 374606 292278   56.97946   95   86   68.00000    9.73160  85.7%  30.7  450s
 379143 295847   64.76108  114   80   68.00000    9.74721  85.7%  30.7  455s
 383591 299358   43.82593   67   81   68.00000    9.74907  85.7%  30.6  461s
 387329 302287   52.34898   89   54   68.00000    9.75701  85.7%  30.6  465s
 391921 305956 infeasible   94        68.00000    9.77501  85.6%  30.6  470s
 397203 310124   18.47845   41   96   68.00000    9.78253  85.6%  30.6  476s
 402117 314095   63.62893  116   87   68.00000    9.78253  85.6%  30.6  481s
 405453 316625   53.59261  112   84   68.00000    9.81723  85.6%  30.6  487s
 406609 317521   16.48719   36  105   68.00000    9.82102  85.6%  30.6  490s
 411929 321744   15.01047   40  107   68.00000    9.83327  85.5%  30.5  495s
 416872 325772   41.00314   67   85   68.00000    9.84298  85.5%  30.5  501s
 421936 329697   25.15238   48  109   68.00000    9.86140  85.5%  30.5  506s
 426936 333502   58.90167  116  102   68.00000    9.87030  85.5%  30.5  512s
 430252 336153 infeasible   92        68.00000    9.88614  85.5%  30.5  515s
 434600 339534   51.55194   95   73   68.00000    9.89478  85.4%  30.5  521s
 439792 343613   44.47964   91   60   68.00000    9.90420  85.4%  30.5  526s
 443113 346143   65.41674  139   64   68.00000    9.90420  85.4%  30.5  530s
 447687 349722   47.55459   98   58   68.00000    9.90894  85.4%  30.5  536s
 452538 353439     cutoff  121        68.00000    9.92125  85.4%  30.5  541s
 455893 356083   66.00031  117  107   68.00000    9.92958  85.4%  30.5  546s
 459077 358521   47.50255   76   78   68.00000    9.95803  85.4%  30.5  551s
 462150 360951   17.04496   37   95   68.00000    9.96213  85.3%  30.6  555s
 467142 364845   65.61976  117   70   68.00000    9.99142  85.3%  30.6  561s
 470393 367378   48.12987   87   82   68.00000    9.99142  85.3%  30.6  565s
 475758 371639   47.24554   73   91   68.00000   10.02624  85.3%  30.6  571s
 480435 375416   33.76930   70   82   68.00000   10.04796  85.2%  30.6  576s
 483629 377903   14.13116   33  114   68.00000   10.05811  85.2%  30.6  580s
 488595 381868   12.12762   35  118   68.00000   10.06333  85.2%  30.6  586s
 491845 384326   25.18477   59  112   68.00000   10.08105  85.2%  30.6  590s
 496937 388439   59.11873  117   72   68.00000   10.08105  85.2%  30.6  596s
 501875 392387   10.11002   28   94   68.00000   10.11002  85.1%  30.7  601s
 503042 393287   37.47193   73   74   68.00000   10.11529  85.1%  30.7  606s
 504967 394839   55.35126  108   55   68.00000   10.11529  85.1%  30.7  610s
 509826 398553   28.87714   55  115   68.00000   10.12498  85.1%  30.7  616s
 513317 401366     cutoff  117        68.00000   10.13065  85.1%  30.7  621s
 516666 403972   51.25523   76   89   68.00000   10.13227  85.1%  30.7  625s
 521440 407812   53.57142   91   83   68.00000   10.14484  85.1%  30.7  630s
 526390 411608   63.50700  101   63   68.00000   10.14802  85.1%  30.7  636s
 530750 414983   59.58278  103   80   68.00000   10.15286  85.1%  30.8  641s
 534313 417701   65.26815  102   82   68.00000   10.16143  85.1%  30.8  645s
 538306 420778   19.85886   47   97   68.00000   10.16449  85.1%  30.8  650s
 543782 425065   63.73314  103   79   68.00000   10.16615  85.0%  30.8  655s
 548567 428948   16.80348   35  116   68.00000   10.17448  85.0%  30.8  660s
 552267 431904   36.77470   58   91   68.00000   10.17600  85.0%  30.8  665s
 557282 435833   47.10176   95   90   68.00000   10.18051  85.0%  30.8  671s
 562572 440060   61.33271  110   50   68.00000   10.18449  85.0%  30.8  676s
 567988 444502   38.83448   71   84   68.00000   10.18899  85.0%  30.8  681s
 572941 448620   43.31217   73   81   68.00000   10.19146  85.0%  30.8  685s
 577809 452435   41.44582   94   70   68.00000   10.19338  85.0%  30.8  690s
 582312 456043   61.58192  118   71   68.00000   10.19718  85.0%  30.9  695s
 587113 459636   40.75275   85   77   68.00000   10.19981  85.0%  30.9  700s
 591842 463385   20.90857   47   87   68.00000   10.19981  85.0%  30.9  705s
 595418 466222   14.91684   38  102   68.00000   10.20161  85.0%  30.9  711s
 598851 468885   51.74497  105   89   68.00000   10.20161  85.0%  31.0  715s
 603697 472560 infeasible  112        68.00000   10.20955  85.0%  31.0  720s
 608222 475997   65.26972  126   75   68.00000   10.21226  85.0%  31.1  726s
 611676 478536 infeasible  110        68.00000   10.21239  85.0%  31.1  730s
 616360 482189   47.32111  100   64   68.00000   10.21302  85.0%  31.1  737s
 619645 484576   62.31264  133   54   68.00000   10.21741  85.0%  31.2  741s
 623538 487748   63.19851  123   57   68.00000   10.21809  85.0%  31.2  746s
 625550 489230   61.41651  103   68   68.00000   10.21962  85.0%  31.2  751s
 629467 492376   24.82153   56   92   68.00000   10.21974  85.0%  31.2  755s
 634362 495973   47.40930   76  101   68.00000   10.22298  85.0%  31.2  762s
 637877 498661   56.23359  120   32   68.00000   10.22319  85.0%  31.2  768s
 639348 499756   34.51154   54   87   68.00000   10.22365  85.0%  31.2  770s
 642975 502545   41.81200   67   80   68.00000   10.22485  85.0%  31.3  775s
 645987 504837   50.38514   94   52   68.00000   10.22580  85.0%  31.3  780s
 649226 507345   20.91417   52   99   68.00000   10.22691  85.0%  31.3  785s
 652460 509844   33.80375   74   64   68.00000   10.22883  85.0%  31.3  790s
 655927 512536   19.01858   47  132   68.00000   10.22942  85.0%  31.4  795s
 658804 514714 infeasible   71        68.00000   10.23139  85.0%  31.4  801s
 660406 515911   65.13077  120   95   68.00000   10.23204  85.0%  31.4  807s
 664202 518753   36.99115   78   81   68.00000   10.23231  85.0%  31.4  811s
 667414 521207   16.07621   42   92   68.00000   10.23415  84.9%  31.4  815s
 670385 523416   55.36870  122   66   68.00000   10.23440  84.9%  31.5  820s
 675826 527600   31.73045   64   77   68.00000   10.23586  84.9%  31.5  827s
 679695 530646   52.05275   93   70   68.00000   10.23707  84.9%  31.5  831s
 682819 533101   64.25837  116   51   68.00000   10.23707  84.9%  31.5  836s
 686118 535590   65.52989  107  102   68.00000   10.24017  84.9%  31.6  840s
 691589 539811     cutoff  129        68.00000   10.24017  84.9%  31.6  846s
 694121 541659   49.42552  107   68   68.00000   10.24264  84.9%  31.6  850s
 699413 545696   57.95892  110   81   68.00000   10.24500  84.9%  31.6  856s
 702827 548257   52.30178   97   81   68.00000   10.24568  84.9%  31.6  861s
 706054 550900   61.36029  114   79   68.00000   10.24579  84.9%  31.6  865s
 707998 552388   11.25144   37  106   68.00000   10.24663  84.9%  31.6  871s
 711830 555494   65.31737  135   45   68.00000   10.24797  84.9%  31.6  875s
 716520 559066   37.01655   90   83   68.00000   10.25186  84.9%  31.6  880s
 721880 563231   10.25653   35  142   68.00000   10.25462  84.9%  31.6  887s
 724826 565565   36.65769   57   91   68.00000   10.25660  84.9%  31.6  891s
 728049 568063   65.69431  111  102   68.00000   10.25729  84.9%  31.6  895s
 733462 572352   32.64237   67   90   68.00000   10.26023  84.9%  31.6  901s
 736599 574674   18.39115   35  102   68.00000   10.26084  84.9%  31.6  905s
 741733 578675     cutoff  129        68.00000   10.26393  84.9%  31.6  911s
 744351 580621   17.22092   38  126   68.00000   10.26724  84.9%  31.7  916s
 750180 585066   15.02904   36  108   68.00000   10.26757  84.9%  31.7  921s
 753178 587479 infeasible   83        68.00000   10.27290  84.9%  31.7  927s
 755065 588952   22.26927   53  104   68.00000   10.27543  84.9%  31.7  931s
 759908 592774 infeasible  110        68.00000   10.27737  84.9%  31.7  936s
 763460 595584   15.33832   35  114   68.00000   10.27737  84.9%  31.6  940s
 768475 599566   12.27335   43   88   68.00000   10.28240  84.9%  31.6  946s
 771521 601845   59.47147  107   71   68.00000   10.28600  84.9%  31.7  950s
 776214 605503 infeasible   32        68.00000   10.28992  84.9%  31.7  955s
 781379 609553   22.67390   57   93   68.00000   10.29584  84.9%  31.7  961s
 784246 611661   27.75082   65   95   68.00000   10.29674  84.9%  31.7  965s
 789563 615646   50.54793   96   98   68.00000   10.30246  84.8%  31.7  971s
 792938 618299   40.58779   75   97   68.00000   10.30869  84.8%  31.7  975s
 797959 622069 infeasible  113        68.00000   10.31103  84.8%  31.7  980s
 801392 624775   61.33517  110   62   68.00000   10.31572  84.8%  31.7  985s
 804477 627152   65.20750  110   82   68.00000   10.32469  84.8%  31.7  991s
 807836 629805   66.13552  108   87   68.00000   10.33132  84.8%  31.7  995s
 813123 633792   31.31956   54   95   68.00000   10.33685  84.8%  31.7 1001s
 817797 637381   58.36148  116  137   68.00000   10.34489  84.8%  31.7 1006s
 820835 639697   18.13175   44   94   68.00000   10.35446  84.8%  31.7 1010s
 826120 643798   58.32909   99   88   68.00000   10.36284  84.8%  31.7 1016s
 829747 646669   49.64749   98   84   68.00000   10.37760  84.7%  31.7 1020s
 834370 650196   55.50877   91   68   68.00000   10.37760  84.7%  31.7 1026s
 837697 652807   30.32422   49   89   68.00000   10.39093  84.7%  31.7 1030s
 842824 656888   66.48361  129   52   68.00000   10.40522  84.7%  31.7 1036s
 844594 658219 infeasible  134        68.00000   10.43218  84.7%  31.7 1041s
 848841 661338   53.15191   87   23   68.00000   10.45348  84.6%  31.7 1047s
 851874 663528   19.32051   41   97   68.00000   10.46359  84.6%  31.7 1051s
 854726 665637 infeasible  110        68.00000   10.46652  84.6%  31.7 1055s
 859663 669374   53.94053   95   75   68.00000   10.48900  84.6%  31.7 1061s
 863289 672284   13.32362   36  118   68.00000   10.50572  84.6%  31.7 1065s
 868535 676414   63.93071  111   68   68.00000   10.51523  84.5%  31.7 1071s
 872085 679219   46.57453   77   73   68.00000   10.52824  84.5%  31.7 1075s
 877203 683177   48.63034   79  105   68.00000   10.54280  84.5%  31.7 1081s
 882182 687138   23.84347   43  111   68.00000   10.55475  84.5%  31.7 1086s
 885306 689440   65.78854  126   80   68.00000   10.56536  84.5%  31.7 1090s
 887968 691464   46.60760   81   70   68.00000   10.57082  84.5%  31.7 1096s
 891426 694118   63.57097  103   87   68.00000   10.57502  84.4%  31.7 1101s
 895249 697079   65.22253  111   75   68.00000   10.58217  84.4%  31.7 1105s
 900286 701136   51.90921   97   76   68.00000   10.58627  84.4%  31.7 1110s
 904947 704621   20.48264   45  101   68.00000   10.59999  84.4%  31.7 1116s
 909686 708075   17.96413   33  106   68.00000   10.60784  84.4%  31.7 1121s
 912873 710558   61.92597  103   80   68.00000   10.61194  84.4%  31.7 1126s
 917721 714198   65.38389  103   60   68.00000   10.62251  84.4%  31.7 1131s
 921109 716793   17.49455   45  100   68.00000   10.62454  84.4%  31.7 1135s
 925678 720393   52.39516   86   65   68.00000   10.63871  84.4%  31.8 1140s
 931338 724827   54.93863   98   80   68.00000   10.64910  84.3%  31.7 1145s
 936591 728982   21.08279   46  109   68.00000   10.65360  84.3%  31.7 1150s
 942958 733828   29.32253   54   80   68.00000   10.66345  84.3%  31.7 1156s
 947777 737526   16.38878   37   95   68.00000   10.66920  84.3%  31.8 1160s
 952981 741629   49.93677   83   67   68.00000   10.67317  84.3%  31.8 1165s
 957997 745659   64.03392  103   92   68.00000   10.68162  84.3%  31.7 1171s
 963018 749544   57.04166  102   86   68.00000   10.68693  84.3%  31.7 1176s
 966032 751876   16.33781   40   99   68.00000   10.69108  84.3%  31.7 1180s
 971282 755975   23.23413   47  108   68.00000   10.69753  84.3%  31.7 1185s
 975961 759545   53.39283   94   65   68.00000   10.70024  84.3%  31.7 1190s
 979306 762107   45.11387   85   85   68.00000   10.71070  84.2%  31.7 1195s
 984087 765869   16.36970   35  122   68.00000   10.71855  84.2%  31.7 1200s
 988918 769478   19.14052   39  123   68.00000   10.72408  84.2%  31.8 1206s
 994035 773410   20.65949   45  125   68.00000   10.72863  84.2%  31.8 1211s
 997679 776213   61.08624  111   83   68.00000   10.72863  84.2%  31.8 1215s
 1002556 780027   48.17768   84  101   68.00000   10.73286  84.2%  31.7 1220s
 1007582 783978   21.22438   47   94   68.00000   10.74178  84.2%  31.7 1225s
 1012699 788126   58.62486  115   82   68.00000   10.74729  84.2%  31.7 1231s
 1017242 791476   28.95564   72  101   68.00000   10.75211  84.2%  31.7 1236s
 1020002 793533   16.42192   40  130   68.00000   10.75528  84.2%  31.8 1240s
 1025069 797469   51.57121   86   87   68.00000   10.76137  84.2%  31.8 1246s
 1028260 799900   25.83122   46   93   68.00000   10.76410  84.2%  31.8 1250s
 1033013 803580   20.94388   49  115   68.00000   10.77203  84.2%  31.8 1256s
 1038134 807550   57.06851  101   67   68.00000   10.78457  84.1%  31.8 1261s
 1041886 810565   27.79571   63  106   68.00000   10.78839  84.1%  31.8 1265s
 1046380 814039   54.54213   96   81   68.00000   10.79112  84.1%  31.8 1271s
 1049720 816638   33.42823   66   84   68.00000   10.79706  84.1%  31.8 1275s
 1054423 820043   12.60761   31   96   68.00000   10.80405  84.1%  31.8 1280s
 1059215 823639   63.25376  113   41   68.00000   10.80736  84.1%  31.8 1286s
 1062226 825901   63.59775  113   77   68.00000   10.81349  84.1%  31.8 1290s
 1067297 829733   58.33112  100   38   68.00000   10.81930  84.1%  31.8 1296s
 1070742 832332   47.39785   73   67   68.00000   10.82207  84.1%  31.8 1300s
 1075674 835965 infeasible  127        68.00000   10.82856  84.1%  31.9 1306s
 1079032 838516   61.83561  111   53   68.00000   10.83010  84.1%  31.9 1310s
 1083787 841990   65.28283  114   74   68.00000   10.83390  84.1%  31.9 1315s
 1087268 844530   63.17351  111   79   68.00000   10.83893  84.1%  31.9 1320s
 1092152 848370   12.74295   39  131   68.00000   10.84603  84.0%  31.9 1325s
 1097752 852880   51.58724   91   79   68.00000   10.85067  84.0%  31.9 1331s
 1101414 855733   39.91695   72   79   68.00000   10.85145  84.0%  31.9 1335s
 1105916 859247   38.04446   58   86   68.00000   10.85493  84.0%  31.8 1340s
 1109531 862134   26.45020   46   88   68.00000   10.85788  84.0%  31.8 1345s
 1114202 865650   61.85827  100   98   68.00000   10.86391  84.0%  31.8 1351s
 1117562 868303   30.72719   63   90   68.00000   10.86560  84.0%  31.8 1356s
 1121089 871071   34.57244   83  109   68.00000   10.86622  84.0%  31.8 1360s
 1125808 874655   57.33100  107   64   68.00000   10.87215  84.0%  31.8 1366s
 1128838 876943   49.92244   90   78   68.00000   10.87309  84.0%  31.8 1371s
 1131924 879325   19.70817   41  120   68.00000   10.87588  84.0%  31.9 1375s
 1135436 882102   51.32228   93   44   68.00000   10.87733  84.0%  31.9 1380s
 1140872 886385   50.48839  108   59   68.00000   10.88080  84.0%  31.8 1385s
 1145736 890181   46.62769   97   71   68.00000   10.88224  84.0%  31.8 1391s
 1150147 893502   14.68790   39   95   68.00000   10.88593  84.0%  31.8 1396s
 1153543 896184   62.98802  120   63   68.00000   10.88639  84.0%  31.8 1400s
 1158496 900005   40.52738   67   79   68.00000   10.89084  84.0%  31.8 1405s
 1163509 903760   65.99864  133   97   68.00000   10.89357  84.0%  31.9 1411s
 1168379 907487   45.67673   84   61   68.00000   10.89546  84.0%  31.9 1416s
 1171295 909710   62.44206  130   59   68.00000   10.89593  84.0%  31.9 1420s
 1176229 913468   12.60759   36  101   68.00000   10.89993  84.0%  31.9 1425s
 1181299 917312   27.50947   52   91   68.00000   10.90391  84.0%  31.9 1431s
 1186091 921066   15.26876   46  133   68.00000   10.90573  84.0%  31.9 1436s
 1189389 923590 infeasible   60        68.00000   10.90573  84.0%  31.9 1440s
 1194007 927014   61.51929  118   88   68.00000   10.91042  84.0%  31.9 1446s
 1197503 929710   19.35573   53  106   68.00000   10.91045  84.0%  31.9 1450s
 1202573 933661   54.46815  108   73   68.00000   10.91459  83.9%  31.9 1455s
 1207581 937466   16.39306   40  120   68.00000   10.91826  83.9%  31.9 1461s
 1212195 940965   54.48150  100   85   68.00000   10.91993  83.9%  31.9 1466s
 1215386 943242   64.27067  113   52   68.00000   10.92071  83.9%  31.9 1471s
 1220683 947327   50.10241  110   74   68.00000   10.92596  83.9%  31.9 1476s
 1224016 949991   46.44552  105   70   68.00000   10.92966  83.9%  31.9 1480s
 1228895 953720   45.50187   83   84   68.00000   10.93769  83.9%  31.9 1486s
 1234270 957961   65.52362  129   72   68.00000   10.94399  83.9%  31.9 1492s
 1237265 960168   20.13013   52  104   68.00000   10.94808  83.9%  31.9 1495s
 1242506 964210   37.42064   64   82   68.00000   10.95509  83.9%  31.9 1500s
 1246814 967513   40.25083   82   83   68.00000   10.96073  83.9%  31.9 1505s
 1252111 971484   23.47976   53   97   68.00000   10.97048  83.9%  31.9 1510s
 1256858 975033   59.24047  113   85   68.00000   10.97256  83.9%  32.0 1515s
 1261648 978748   62.49536  123   74   68.00000   10.98087  83.9%  32.0 1521s
 1266860 982747   65.49927  123   70   68.00000   10.98276  83.8%  32.0 1526s
 1271744 986447   60.78158   96   79   68.00000   10.99129  83.8%  32.0 1531s
 1275056 989121 infeasible   82        68.00000   10.99413  83.8%  32.0 1535s
 1279983 992912     cutoff  114        68.00000   11.00711  83.8%  32.0 1540s
 1284932 996825   48.59269   77   69   68.00000   11.01488  83.8%  32.0 1546s
 1289834 1000563   44.10036   94   90   68.00000   11.01805  83.8%  32.0 1551s
 1294667 1004194   21.31915   52  111   68.00000   11.02333  83.8%  32.0 1556s
 1299313 1007756   45.60422   82   86   68.00000   11.02939  83.8%  32.0 1561s
 1302499 1010327   66.26498  113   47   68.00000   11.03522  83.8%  32.0 1565s
 1307468 1014211   50.49210   96   71   68.00000   11.04101  83.8%  32.0 1570s
 1312752 1018449   56.97663   93   83   68.00000   11.04780  83.8%  32.0 1576s
 1315988 1020766   54.19864  103   88   68.00000   11.05239  83.7%  32.0 1580s
 1320613 1024296   48.75677   80   80   68.00000   11.05811  83.7%  32.0 1585s
 1325021 1027681 infeasible   41        68.00000   11.06487  83.7%  32.0 1591s
 1328306 1030279   65.60643  100   67   68.00000   11.06719  83.7%  32.1 1595s
 1333537 1034384   50.70069   82   84   68.00000   11.07755  83.7%  32.1 1601s
 1338105 1037780     cutoff  112        68.00000   11.08302  83.7%  32.1 1606s
 1341699 1040503   23.80007   44   92   68.00000   11.08878  83.7%  32.1 1611s
 1346471 1044244   46.30238   91   58   68.00000   11.08911  83.7%  32.1 1616s
 1349690 1046657   66.26873  128   42   68.00000   11.09103  83.7%  32.1 1620s
 1354771 1050646   43.38350   85   72   68.00000   11.09274  83.7%  32.1 1626s
 1358295 1053394   19.92790   44   89   68.00000   11.09404  83.7%  32.1 1630s
 1363259 1057414   48.35237  110   53   68.00000   11.09570  83.7%  32.1 1635s
 1368152 1061166   63.27863  139   61   68.00000   11.09837  83.7%  32.1 1641s
 1371824 1064107   18.53515   47  108   68.00000   11.10456  83.7%  32.1 1645s
 1376827 1067943     cutoff  114        68.00000   11.10761  83.7%  32.1 1650s
 1381621 1071627   58.55026  101   77   68.00000   11.11175  83.7%  32.1 1656s
 1384903 1074157   52.27983  101   62   68.00000   11.11175  83.7%  32.2 1660s
 1389964 1078026   65.62153  116   72   68.00000   11.11626  83.7%  32.2 1665s
 1394696 1081624   49.73587   92   61   68.00000   11.12174  83.6%  32.2 1671s
 1399506 1085218   63.53761  104   76   68.00000   11.12344  83.6%  32.2 1676s
 1402626 1087585   65.79929  129   82   68.00000   11.12562  83.6%  32.2 1680s
 1408012 1091780   60.40752  122   68   68.00000   11.12992  83.6%  32.2 1686s
 1411178 1094241   17.99219   44  104   68.00000   11.13066  83.6%  32.2 1690s
 1416179 1098173   41.64821   73   92   68.00000   11.13428  83.6%  32.2 1695s
 1420860 1101698   43.85134   85   67   68.00000   11.13657  83.6%  32.2 1701s
 1423974 1104060   19.04831   55   92   68.00000   11.13731  83.6%  32.2 1705s
 1429360 1108306   44.60006   75   89   68.00000   11.14005  83.6%  32.2 1711s
 1432470 1110717   44.12080   75   78   68.00000   11.14153  83.6%  32.2 1715s
 1437333 1114450     cutoff  115        68.00000   11.14361  83.6%  32.2 1720s
 1442579 1118635   48.91133   90   76   68.00000   11.14487  83.6%  32.2 1726s
 1445571 1120878   49.97546   91   84   68.00000   11.14603  83.6%  32.2 1730s
 1450403 1124529   32.66471   63   95   68.00000   11.14774  83.6%  32.3 1736s
 1453637 1127015   28.33467   51  104   68.00000   11.14897  83.6%  32.3 1740s
 1458852 1131027   44.56160   70   92   68.00000   11.15039  83.6%  32.3 1745s
 1463265 1134311   49.28607   90   71   68.00000   11.15093  83.6%  32.3 1751s
 1466356 1136680   28.48143   51   74   68.00000   11.15214  83.6%  32.3 1755s
 1471651 1140734   14.12775   41   93   68.00000   11.15366  83.6%  32.3 1761s
 1474654 1142944   34.80824   81   92   68.00000   11.15378  83.6%  32.3 1765s
 1479299 1146475   53.67721   91   74   68.00000   11.15645  83.6%  32.3 1770s
 1484374 1150452   29.66923   51   97   68.00000   11.15672  83.6%  32.3 1776s
 1487616 1152758 infeasible   53        68.00000   11.15907  83.6%  32.3 1780s
 1491102 1155418   31.90247   54   85   68.00000   11.15940  83.6%  32.4 1785s
 1495806 1159004   42.49245   76   74   68.00000   11.16055  83.6%  32.4 1790s
 1501109 1163121   49.74590  102   86   68.00000   11.16211  83.6%  32.4 1796s
 1504476 1165775   45.34911   84   50   68.00000   11.16383  83.6%  32.4 1800s

Explored 1506165 nodes (48761854 simplex iterations) in 1800.04 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 68 69 70 ... 101

Time limit reached
Best objective 6.800000000000e+01, best bound 1.200000000000e+01, gap 82.3529%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2582.3 MiB   2582.3 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2582.3 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2582.3 MiB      0.0 MiB       m2 = m.construct()
    28   2582.3 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2582.3 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2582.3 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2582.3 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2582.3 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2582.3 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2582.3 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2582.3 MiB      0.0 MiB       m2.update()
    44   2582.3 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2582.3 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2582.3 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2582.3 MiB      0.0 MiB       if(find_optimum):
    55   2582.3 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56   2582.3 MiB      0.0 MiB           m2.update()
    57   2582.3 MiB      0.0 MiB           new_obj = LinExpr(0)
    58   2582.3 MiB      0.0 MiB           for var in current_vars:
    59   2582.3 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60   2582.3 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61   2582.3 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62   2582.3 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1635.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1635.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1635.3 MiB      0.0 MiB       j = 0
    69   1635.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1635.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1635.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1635.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1635.3 MiB      0.0 MiB       if m2.status == 9:
    78   1635.3 MiB      0.0 MiB           result.timeout = True
    79   1635.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1635.3 MiB      0.0 MiB           result.solution = True
    81   1635.3 MiB      0.0 MiB           result.feasible = True
    82   1635.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1635.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1635.3 MiB      0.0 MiB           for v in current_vars:
    85   1635.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1635.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1635.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89   1635.3 MiB      0.0 MiB                       res_vec[j] = 0
    90   1635.3 MiB      0.0 MiB                   j = j+1
    91                             
    92   1635.3 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Sun Feb 02 23:53:44 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.tra,lab' -mdp /tmp/tmpv3z_xpxu

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpv3z_xpxu"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.023 seconds.

Warning: Deadlocks detected and fixed in 1 states

Type:        MDP
States:      69 (1 initial)
Transitions: 84
Choices:     69

Transition matrix: 248 nodes (3 terminal), 84 minterms, vars: 7r/7c/1nd

Prob0A: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 31 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 69, no = 0, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.005 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 1584 columns and 4117 nonzeros
Variable types: 528 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [8e-01, 2e+00]
Presolve removed 289 rows and 280 columns
Presolve time: 0.01s
Presolved: 1296 rows, 1304 columns, 3548 nonzeros
Variable types: 486 continuous, 818 integer (818 binary)

Root relaxation: objective 1.600000e+00, 8 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    1.60000    0    4          -    1.60000      -     -    0s
     0     2    3.40000    0    6          -    3.40000      -     -    0s
H 2270  1839                     190.0000000    9.80000  94.8%   9.2    1s
H 2398  1832                     144.0000000    9.80000  93.2%   9.4    2s
H 2399  1745                     132.0000000    9.80000  92.6%   9.4    2s
* 5443  3287             192     129.0000000    9.81905  92.4%   8.7    4s
H 5691  3326                     125.0000000    9.81905  92.1%   8.6    4s
  7752  4602   33.25119   49   15  125.00000   10.13333  91.9%   8.1    5s
H 9069  5658                     123.0000000   10.48571  91.5%   8.0    5s
H11752  7765                     119.0000000   11.00000  90.8%   7.9    6s
*13252  9029             173     118.0000000   11.70000  90.1%   7.9    6s
*14500  9991             172     117.0000000   11.70000  90.0%   7.9    7s
*16597 11696             166     115.0000000   11.90000  89.7%   7.8    7s
 23111 16840   62.12029   88   11  115.00000   12.37143  89.2%   8.0   10s
H25694 18526                     106.0000000   12.63333  88.1%   8.0   10s
H36000 25980                      97.0000000   12.96667  86.6%   8.2   14s
 36766 26620   54.33659   79   12   97.00000   12.96667  86.6%   8.3   15s
*37918 27303             128      95.0000000   12.96667  86.4%   8.3   15s
H52170 37929                      94.0000000   13.63333  85.5%   8.3   19s
 53995 39411   26.33458   40   15   94.00000   13.63333  85.5%   8.4   20s
H53998 39007                      91.0000000   13.63333  85.0%   8.4   20s
H53999 38263                      87.0000000   13.63333  84.3%   8.4   20s
H54015 38075                      86.0000000   13.63333  84.1%   8.4   20s
 69311 49570   77.93333   86   43   86.00000   13.95556  83.8%   8.7   25s
 84796 61237   21.73333   35    8   86.00000   14.25238  83.4%   8.9   30s
 100359 72819   62.25672   86   18   86.00000   14.43333  83.2%   9.1   35s
 115774 84334   44.48516   60   14   86.00000   14.60000  83.0%   9.2   40s
 132285 96830 infeasible   70        86.00000   14.75000  82.8%   9.3   45s
H141206 103144                      85.0000000   14.80000  82.6%   9.4   47s
H141450 100867                      80.0000000   14.80000  81.5%   9.4   50s
H141465 100207                      79.0000000   14.80000  81.3%   9.4   50s
 157309 112117   36.27016   59   14   79.00000   14.96667  81.1%   9.5   55s
 172402 123239   76.74444   63   44   79.00000   15.13333  80.8%   9.6   60s
 187530 134630   57.79569   89   15   79.00000   15.22857  80.7%   9.7   65s
 203875 146755     cutoff   88        79.00000   15.37143  80.5%   9.7   70s
 219771 158410   16.81111   31   14   79.00000   15.46667  80.4%   9.7   75s
 234184 169317 infeasible   89        79.00000   15.52500  80.3%   9.7   80s
 250234 181267   36.73571   51   21   79.00000   15.63333  80.2%   9.8   85s
 269168 195233 infeasible  117        79.00000   15.69394  80.1%   9.8   90s
 285849 207469   69.68333   59   45   79.00000   15.78182  80.0%   9.9   95s
 306096 222359   61.17407   75   25   79.00000   15.87619  79.9%   9.9  100s
 324957 236377 infeasible   69        79.00000   15.95000  79.8%   9.9  105s
 344371 250572   66.66042   77   24   79.00000   16.06190  79.7%   9.9  110s
H352944 252730                      76.0000000   16.09762  78.8%   9.9  114s
H352952 250682                      75.0000000   16.09762  78.5%   9.9  114s
 352960 250638   27.93333   41   15   75.00000   16.10000  78.5%   9.9  115s
 366897 260566   36.18395   48   21   75.00000   16.13333  78.5%  10.0  120s
 381357 271137   16.60000   28   12   75.00000   16.21905  78.4%  10.0  125s
 397713 282867 infeasible   64        75.00000   16.26667  78.3%  10.0  130s
 413186 294233   34.90789   47   15   75.00000   16.30909  78.3%  10.1  135s
 427637 304745   66.70000   71   26   75.00000   16.37619  78.2%  10.1  140s
 441283 314680   32.74074   43   16   75.00000   16.43200  78.1%  10.1  145s
 455984 325371   68.27500   79   16   75.00000   16.46667  78.0%  10.1  150s
 472503 337303   68.78588   70   45   75.00000   16.52500  78.0%  10.1  155s
 489092 349369   42.70833   62   12   75.00000   16.59048  77.9%  10.1  160s
 501350 358106 infeasible   48        75.00000   16.61818  77.8%  10.1  165s
 516596 369189 infeasible   43        75.00000   16.63333  77.8%  10.1  170s
 531891 380243   54.61435   50   27   75.00000   16.70476  77.7%  10.1  175s
 546841 390919   71.42667  105   18   75.00000   16.73333  77.7%  10.1  180s
 561807 401698   71.00832   79   41   75.00000   16.76667  77.6%  10.2  185s
 576678 412518   44.33333   56   17   75.00000   16.80000  77.6%  10.2  190s
 590537 422691   51.40720   63   13   75.00000   16.82222  77.6%  10.2  195s
 605276 433316   31.62500   49   12   75.00000   16.87143  77.5%  10.2  200s
 623459 446571   53.03333   80   11   75.00000   16.89957  77.5%  10.2  205s
 642665 460791   61.22479   79   26   75.00000   16.93636  77.4%  10.2  210s
H643411 454771                      73.0000000   16.93636  76.8%  10.2  211s
 656367 464167   59.31402   77   25   73.00000   16.96905  76.8%  10.2  215s
 675004 477491 infeasible   74        73.00000   17.03810  76.7%  10.2  220s
 693942 491210   69.74580  107   18   73.00000   17.06667  76.6%  10.2  225s
 712822 505033   20.00278   32   12   73.00000   17.11667  76.6%  10.2  230s
 727978 516000   27.56667   39   22   73.00000   17.13333  76.5%  10.2  235s
 747294 529915   55.00000   66   10   73.00000   17.20000  76.4%  10.2  240s
 765903 543544 infeasible   82        73.00000   17.21905  76.4%  10.2  245s
 784906 557115   46.04444   52   19   73.00000   17.25238  76.4%  10.2  250s
 801537 569140   41.16667   51   23   73.00000   17.30000  76.3%  10.3  255s
 816588 580036   47.76667   61   30   73.00000   17.30476  76.3%  10.3  260s
 833735 592207   48.67619   56   17   73.00000   17.35456  76.2%  10.3  265s
 853412 606318   55.16914   65   24   73.00000   17.39048  76.2%  10.3  270s
*859751 599751             115      71.0000000   17.40000  75.5%  10.3  272s
 866189 604398   34.70000   57   13   71.00000   17.40000  75.5%  10.3  275s
 884329 617501   66.73958   53   31   71.00000   17.46306  75.4%  10.3  280s
 903642 631415   19.44286   33    9   71.00000   17.48333  75.4%  10.3  285s
 921068 643706   63.86667   95   10   71.00000   17.52078  75.3%  10.3  290s
 935594 654178 infeasible   99        71.00000   17.55238  75.3%  10.3  295s
H935693 647049                      70.0000000   17.55238  74.9%  10.3  296s
 944696 653407   45.44048   56   28   70.00000   17.56667  74.9%  10.3  300s
 961115 665293   66.83283  105   16   70.00000   17.59048  74.9%  10.3  305s
 975709 675470   65.64633   78   31   70.00000   17.61429  74.8%  10.4  310s
 991190 686420   49.11667   73   13   70.00000   17.63333  74.8%  10.4  315s
 1006350 697203   23.05714   36   11   70.00000   17.64762  74.8%  10.4  320s
 1020617 707298   20.53333   33   11   70.00000   17.69444  74.7%  10.4  325s
 1036528 718420   38.23709   55   22   70.00000   17.70476  74.7%  10.4  330s
 1052494 729722   42.33939   62   16   70.00000   17.72857  74.7%  10.4  335s
 1069527 741621   60.86817   64   21   70.00000   17.74286  74.7%  10.5  340s
H1086660 745068                      69.0000000   17.76429  74.3%  10.5  345s
 1101011 755282   53.75000   64   24   69.00000   17.79048  74.2%  10.5  350s
 1120202 769246     cutoff   47        69.00000   17.80317  74.2%  10.5  355s
 1137930 781996   63.50357   84   23   69.00000   17.83333  74.2%  10.5  360s
 1151982 792147   54.96076   70   20   69.00000   17.86667  74.1%  10.5  365s
 1167165 803073 infeasible   50        69.00000   17.88081  74.1%  10.5  370s
 1180542 812718   66.03625   95   17   69.00000   17.89524  74.1%  10.5  375s
 1193609 822326   23.93333   34   11   69.00000   17.90000  74.1%  10.5  380s
 1205796 830966   44.73121   54   19   69.00000   17.91905  74.0%  10.5  385s
 1219502 840978   40.32561   53   16   69.00000   17.92381  74.0%  10.5  390s
 1232442 850223   65.82821   76   24   69.00000   17.93333  74.0%  10.5  395s
 1247370 860751   38.96667   62   15   69.00000   17.96234  74.0%  10.5  400s
H1252318 843218                      67.0000000   17.96667  73.2%  10.5  402s
 1258798 847732   60.15979   72   26   67.00000   17.97778  73.2%  10.5  405s
 1273034 857830   53.19037   56   21   67.00000   18.00000  73.1%  10.5  410s
 1291802 871397   31.66667   42   15   67.00000   18.03810  73.1%  10.5  415s
 1305284 881075   60.58718   86   23   67.00000   18.05455  73.1%  10.5  420s
 1318656 890818   35.53333   55   14   67.00000   18.06190  73.0%  10.5  425s
 1330794 899407   29.40000   40   11   67.00000   18.06667  73.0%  10.5  430s
 1344953 909684   56.16429   72   24   67.00000   18.09048  73.0%  10.5  435s
 1355471 916875   32.50667   51   11   67.00000   18.10152  73.0%  10.5  440s
 1371411 928239 infeasible   33        67.00000   18.13333  72.9%  10.5  445s
 1384333 937541   63.66257   51   51   67.00000   18.13333  72.9%  10.5  450s
 1394895 945116   33.98611   55   11   67.00000   18.13333  72.9%  10.5  455s
 1405690 952846   43.70993   68   10   67.00000   18.14444  72.9%  10.5  460s
 1416775 960898   43.09370   58   13   67.00000   18.16190  72.9%  10.5  465s
 1434141 973120   23.02222   36   13   67.00000   18.20000  72.8%  10.5  470s
 1449334 984100   32.73333   46   14   67.00000   18.20476  72.8%  10.5  475s
 1463595 994238   22.98571   38   13   67.00000   18.21905  72.8%  10.5  480s
 1476421 1003250   46.82222   65   15   67.00000   18.22857  72.8%  10.5  485s
 1493187 1015130   46.64167   60   20   67.00000   18.24444  72.8%  10.5  490s
 1509472 1026691   33.43333   55   14   67.00000   18.26667  72.7%  10.5  495s
 1523126 1036131   62.30711   83   29   67.00000   18.28182  72.7%  10.5  500s
 1537244 1046197   52.76945   78   14   67.00000   18.30000  72.7%  10.5  505s
 1549472 1054682   21.66667   32   10   67.00000   18.30000  72.7%  10.5  510s
 1566112 1066248 infeasible   85        67.00000   18.32727  72.6%  10.5  515s
 1579926 1075895   41.94889   48   32   67.00000   18.34576  72.6%  10.5  520s
 1597033 1087897     cutoff   95        67.00000   18.36667  72.6%  10.5  525s
 1608537 1095997   56.00061   76   17   67.00000   18.37143  72.6%  10.5  530s
 1620988 1104615   41.66667   59   12   67.00000   18.39444  72.5%  10.6  535s
 1634099 1113947   26.40000   42   13   67.00000   18.40000  72.5%  10.6  540s
 1650733 1126028 infeasible   59        67.00000   18.42222  72.5%  10.5  545s
 1665172 1136155   60.60545   89   19   67.00000   18.43810  72.5%  10.5  550s
 1678119 1145486   53.30000   69   18   67.00000   18.45556  72.5%  10.6  555s
 1695091 1157780   25.40000   34   15   67.00000   18.46667  72.4%  10.5  560s
 1710383 1168657   35.31152   46   21   67.00000   18.48571  72.4%  10.5  565s
 1721173 1176291   60.77619   94   10   67.00000   18.49091  72.4%  10.5  570s
 1734238 1185437   42.73373   60   17   67.00000   18.51245  72.4%  10.5  575s
 1746526 1194019   21.87619   32   16   67.00000   18.53333  72.3%  10.5  580s
 1762550 1205266   60.53333   85   11   67.00000   18.54586  72.3%  10.5  585s
 1779809 1217636   60.20000   96    8   67.00000   18.56190  72.3%  10.5  590s
 1792614 1226863   53.34545   65   18   67.00000   18.58571  72.3%  10.5  595s
 1807573 1237651   56.15556   73   24   67.00000   18.59048  72.3%  10.5  600s
 1824298 1249489   28.90000   42   11   67.00000   18.60000  72.2%  10.5  605s
 1835195 1256921   47.10000   57   21   67.00000   18.60000  72.2%  10.6  610s
 1850008 1267279   19.61818   31   12   67.00000   18.61818  72.2%  10.6  615s
 1867116 1279530   63.50417   71   39   67.00000   18.63333  72.2%  10.6  620s
 1880709 1289092   43.73333   53   17   67.00000   18.63333  72.2%  10.6  625s
 1898391 1301340   40.26842   64    9   67.00000   18.65238  72.2%  10.6  630s
 1911160 1310418   42.00476   48   18   67.00000   18.66667  72.1%  10.6  635s
 1922323 1318231   52.91389   81   11   67.00000   18.68687  72.1%  10.6  640s
 1933970 1326336   53.43796   70   26   67.00000   18.70476  72.1%  10.6  645s
 1948363 1336247   56.53333   60   23   67.00000   18.70476  72.1%  10.6  650s
 1960328 1344667   50.26667   73   10   67.00000   18.71111  72.1%  10.6  655s
 1972427 1353118   55.28148   81   11   67.00000   18.72381  72.1%  10.6  660s
 1983404 1360772   34.22639   50   20   67.00000   18.72857  72.0%  10.6  665s
 1996466 1370020     cutoff   44        67.00000   18.73333  72.0%  10.6  670s
 2009383 1379143   41.29111   62   12   67.00000   18.73333  72.0%  10.6  675s
 2022198 1387486 infeasible   61        67.00000   18.74615  72.0%  10.6  680s
 2035907 1397196   65.66667   93   14   67.00000   18.75556  72.0%  10.6  685s
 2050877 1406892   33.33333   41   17   67.00000   18.77143  72.0%  10.6  690s
 2067360 1418360 infeasible   35        67.00000   18.79048  72.0%  10.6  695s
 2081432 1428204   59.47901   67   23   67.00000   18.80000  71.9%  10.6  700s
 2096679 1439173   42.51724   61   10   67.00000   18.80000  71.9%  10.6  705s
 2111712 1449905   43.38636   50   21   67.00000   18.81587  71.9%  10.6  710s
 2125801 1459922   63.01264   60   33   67.00000   18.82222  71.9%  10.6  715s
 2140163 1470145   65.88333   89   29   67.00000   18.83333  71.9%  10.6  720s
 2151481 1478289   62.57037   74   22   67.00000   18.84762  71.9%  10.6  725s
 2165031 1487931   31.14286   43   16   67.00000   18.86270  71.8%  10.6  730s
 2180556 1498959     cutoff   49        67.00000   18.87143  71.8%  10.6  735s
 2197246 1511036   57.96667   71   20   67.00000   18.87619  71.8%  10.6  740s
 2209399 1519429   62.52121   72   16   67.00000   18.88889  71.8%  10.6  745s
 2224992 1530763   39.46481   44   23   67.00000   18.89524  71.8%  10.6  750s
 2240537 1542076   61.72273   92   15   67.00000   18.90000  71.8%  10.6  755s
 2256894 1553583   65.38832   89   22   67.00000   18.91389  71.8%  10.6  760s
 2269600 1562545   43.05556   55   19   67.00000   18.92302  71.8%  10.6  765s
 2283106 1572257   63.53333   98   12   67.00000   18.92381  71.8%  10.6  770s
 2296177 1581790   40.19074   58   13   67.00000   18.92571  71.8%  10.6  775s
 2311157 1592573   32.91250   50   14   67.00000   18.93333  71.7%  10.6  781s
 2323413 1601328   22.36190   33   11   67.00000   18.94217  71.7%  10.6  785s
 2338771 1612227   29.26536   43   15   67.00000   18.95200  71.7%  10.6  790s
 2354765 1623493   40.06667   60   13   67.00000   18.96667  71.7%  10.6  795s
 2368238 1633254     cutoff   53        67.00000   18.96984  71.7%  10.6  800s
 2383096 1643632 infeasible   57        67.00000   18.98571  71.7%  10.6  805s
 2398262 1654405   27.77143   39   22   67.00000   19.00000  71.6%  10.6  810s
 2414882 1666064   63.65000   81   27   67.00000   19.01333  71.6%  10.6  815s
 2426198 1673947   65.04028   71   30   67.00000   19.01905  71.6%  10.6  820s
 2442569 1685493   29.40000   43   11   67.00000   19.03810  71.6%  10.6  825s
 2459069 1697308   58.08194   69   19   67.00000   19.04444  71.6%  10.6  830s
 2473945 1707608   53.07222   78   20   67.00000   19.06190  71.5%  10.6  835s
 2486045 1716250   33.24660   47   18   67.00000   19.06250  71.5%  10.6  840s
 2502103 1727632   41.03675   56   20   67.00000   19.06667  71.5%  10.6  845s
 2517547 1738247     cutoff   98        67.00000   19.08052  71.5%  10.6  850s
 2532496 1748894   56.73366   72   23   67.00000   19.09048  71.5%  10.6  855s
 2542040 1755525     cutoff   44        67.00000   19.10000  71.5%  10.6  860s
 2557772 1766391     cutoff   93        67.00000   19.10833  71.5%  10.6  865s
 2570679 1775595     cutoff   91        67.00000   19.11944  71.5%  10.6  870s
 2582273 1783721   51.40000   65    6   67.00000   19.13333  71.4%  10.6  875s
 2593188 1791298   31.77333   45   11   67.00000   19.13333  71.4%  10.6  880s
 2609799 1803033   31.07593   49   13   67.00000   19.13333  71.4%  10.6  885s
 2624172 1813137   58.02222   73   25   67.00000   19.13333  71.4%  10.6  890s
 2643293 1826817   37.18951   49   17   67.00000   19.14545  71.4%  10.6  895s
 2655284 1835214   41.88485   62   14   67.00000   19.15714  71.4%  10.6  900s
 2669003 1844794 infeasible   51        67.00000   19.17143  71.4%  10.6  905s
 2682804 1854820   19.28254   30   14   67.00000   19.18333  71.4%  10.6  910s
 2697374 1865142   62.96610   89   14   67.00000   19.20000  71.3%  10.6  915s
 2708439 1872843   59.56944   93   10   67.00000   19.20000  71.3%  10.6  921s
 2717195 1879167   34.34848   50   11   67.00000   19.20000  71.3%  10.6  925s
 2730186 1888327   20.07619   33   14   67.00000   19.20476  71.3%  10.6  930s
 2745070 1898566   39.86667   63    8   67.00000   19.21818  71.3%  10.6  935s
 2759382 1908754   39.00000   52   10   67.00000   19.22222  71.3%  10.6  940s
 2776010 1920573   53.54242   60   31   67.00000   19.22857  71.3%  10.6  945s
 2785654 1927269   52.85333   85   12   67.00000   19.23333  71.3%  10.6  950s
 2799905 1937191   41.83333   67   13   67.00000   19.24286  71.3%  10.6  955s
 2815700 1947976     cutoff   46        67.00000   19.25238  71.3%  10.6  960s
 2832091 1959333   34.33333   47   17   67.00000   19.26667  71.2%  10.6  965s
 2843505 1967417   63.37281   91   19   67.00000   19.26667  71.2%  10.6  970s
 2856520 1976372   46.99205   58   18   67.00000   19.27619  71.2%  10.6  975s
 2869126 1985153   29.73333   37   16   67.00000   19.28485  71.2%  10.6  980s
 2882162 1994180   51.63333   64   22   67.00000   19.30000  71.2%  10.6  985s
 2898921 2006118   53.95177   64   24   67.00000   19.30000  71.2%  10.6  990s
 2912339 2015669   34.00000   54   13   67.00000   19.30526  71.2%  10.6  995s
 2926379 2025448   52.51484   52   27   67.00000   19.31905  71.2%  10.6 1000s
 2939606 2034850   45.16097   58    8   67.00000   19.32857  71.2%  10.6 1005s
 2953937 2044502   40.64310   61   12   67.00000   19.33571  71.1%  10.6 1010s
 2968175 2054473 infeasible   61        67.00000   19.34719  71.1%  10.6 1015s
 2986398 2066754   32.77778   44   18   67.00000   19.36190  71.1%  10.6 1020s
 3003553 2078860   24.48148   36    9   67.00000   19.36667  71.1%  10.6 1025s
 3015570 2087276   63.51690   66   25   67.00000   19.37143  71.1%  10.6 1030s
 3026237 2094621   58.35000   70   20   67.00000   19.37222  71.1%  10.6 1035s
 3037451 2102441   21.63333   32   16   67.00000   19.38333  71.1%  10.6 1040s
 3051172 2111854   26.00741   38   13   67.00000   19.39429  71.1%  10.6 1045s
 3063700 2120634   46.55256   59   22   67.00000   19.40000  71.0%  10.6 1050s
 3076534 2129811   56.20000   79    8   67.00000   19.40000  71.0%  10.6 1055s
 3092605 2141382   29.55833   51   13   67.00000   19.40952  71.0%  10.6 1060s
 3107063 2151435   25.48148   40    9   67.00000   19.42222  71.0%  10.6 1065s
 3121163 2161529   24.49524   38   16   67.00000   19.42857  71.0%  10.6 1070s
 3131612 2168946 infeasible   51        67.00000   19.43333  71.0%  10.6 1075s
 3144327 2177910   29.13333   42   12   67.00000   19.44000  71.0%  10.6 1080s
 3158106 2187620   53.98519   73   21   67.00000   19.44872  71.0%  10.6 1085s
 3171874 2197249 infeasible   88        67.00000   19.46190  71.0%  10.6 1090s
 3184250 2206163   48.69042   66   16   67.00000   19.46667  70.9%  10.6 1095s
 3201279 2218045   39.42667   52   20   67.00000   19.47083  70.9%  10.6 1100s
 3217139 2228968   31.54815   48   11   67.00000   19.48175  70.9%  10.6 1105s
 3232104 2239171   23.33506   39   12   67.00000   19.48831  70.9%  10.6 1110s
 3242799 2246584     cutoff   49        67.00000   19.49074  70.9%  10.6 1115s
 3253703 2254125   55.70568   57   24   67.00000   19.49870  70.9%  10.6 1120s
 3268862 2264981   60.00000   92   10   67.00000   19.50000  70.9%  10.6 1125s
 3282213 2274462   65.45177   84   46   67.00000   19.51429  70.9%  10.6 1130s
 3294751 2283100   60.69611   69   28   67.00000   19.52727  70.9%  10.6 1135s
 3302533 2288559   42.06667   45   38   67.00000   19.53333  70.8%  10.6 1140s
 3316989 2298609   64.14348   85   19   67.00000   19.53810  70.8%  10.6 1145s
 3330974 2308410   50.13333   76   10   67.00000   19.54667  70.8%  10.6 1150s
 3348214 2320450   43.31526   57   26   67.00000   19.56190  70.8%  10.6 1156s
 3359087 2328248   30.10279   46   17   67.00000   19.56190  70.8%  10.6 1160s
 3374562 2339125 infeasible   93        67.00000   19.56667  70.8%  10.6 1165s
 3390386 2349940   28.09915   39   16   67.00000   19.58095  70.8%  10.6 1170s
 3404830 2360115   36.34444   51   11   67.00000   19.58810  70.8%  10.6 1175s
 3419261 2370462   44.11667   57   16   67.00000   19.59048  70.8%  10.6 1180s
 3431728 2379431   23.86667   36    8   67.00000   19.59048  70.8%  10.6 1185s
 3447223 2390556   53.40667   41   34   67.00000   19.59459  70.8%  10.6 1190s
 3464068 2401707   37.08939   48   20   67.00000   19.60000  70.7%  10.6 1195s
 3472343 2407362   64.44167   79   21   67.00000   19.60000  70.7%  10.6 1200s
 3490079 2419208   27.20000   42    8   67.00000   19.60000  70.7%  10.6 1205s
 3505155 2429890   63.51685  100    9   67.00000   19.61429  70.7%  10.6 1210s
 3517514 2438458   51.93333   61   29   67.00000   19.61818  70.7%  10.6 1215s
 3532094 2448863   23.42500   35   16   67.00000   19.62353  70.7%  10.6 1220s
 3544181 2457216   59.53404   92   14   67.00000   19.63333  70.7%  10.6 1225s
 3555091 2464830   58.62803   63   33   67.00000   19.63333  70.7%  10.6 1230s
 3570687 2475544   56.77333   64   24   67.00000   19.63333  70.7%  10.6 1235s
 3584917 2485478   64.46872   70   26   67.00000   19.64525  70.7%  10.6 1240s
 3595506 2492737   19.87424   33   10   67.00000   19.65000  70.7%  10.6 1245s
 3610846 2503134   29.53333   43   12   67.00000   19.66250  70.7%  10.6 1250s
 3626027 2513815   38.35556   45   20   67.00000   19.67037  70.6%  10.6 1255s
 3642064 2524956   46.86667   66    9   67.00000   19.68421  70.6%  10.6 1260s
 3654472 2533890   62.63077   59   36   67.00000   19.69206  70.6%  10.6 1265s
 3671016 2545439   38.46000   56   13   67.00000   19.70195  70.6%  10.6 1270s
 3683323 2553777   60.81394   58   28   67.00000   19.70476  70.6%  10.7 1275s
 3699002 2564787 infeasible   42        67.00000   19.70476  70.6%  10.7 1280s
 3711733 2573694   52.68549   80    8   67.00000   19.70476  70.6%  10.7 1285s
 3727605 2584862   34.03030   49   16   67.00000   19.70897  70.6%  10.7 1290s
 3746004 2597413   44.06667   65   14   67.00000   19.72179  70.6%  10.7 1295s
 3759212 2606695   20.80952   32   12   67.00000   19.72727  70.6%  10.7 1300s
 3770204 2614424     cutoff   90        67.00000   19.72857  70.6%  10.7 1305s
 3786187 2625617   56.08058   90   14   67.00000   19.73333  70.5%  10.7 1310s
 3802187 2637013   52.66667   81   12   67.00000   19.73333  70.5%  10.7 1315s
 3816571 2647275   56.86667   87   10   67.00000   19.73333  70.5%  10.7 1320s
 3831561 2657962   35.10505   49   18   67.00000   19.73478  70.5%  10.7 1325s
 3845759 2667372   62.28889   46   33   67.00000   19.74286  70.5%  10.7 1330s
 3860921 2677795   39.13056   59   16   67.00000   19.74872  70.5%  10.7 1335s
 3876665 2688853   34.11111   55   15   67.00000   19.75556  70.5%  10.7 1340s
 3888773 2697426   53.46667   78    9   67.00000   19.76032  70.5%  10.7 1345s
 3902312 2706158   23.73333   35   10   67.00000   19.76667  70.5%  10.7 1350s
 3916492 2715825   46.77417   61   20   67.00000   19.77403  70.5%  10.7 1355s
 3933488 2727729   37.58200   47   19   67.00000   19.78095  70.5%  10.7 1360s
 3946466 2736884   60.64990   75   28   67.00000   19.78889  70.5%  10.7 1365s
 3963127 2748336     cutoff   57        67.00000   19.80000  70.4%  10.7 1370s
 3977290 2757963   20.80000   32   12   67.00000   19.80000  70.4%  10.7 1375s
 3987747 2765317   43.40000   51   19   67.00000   19.80000  70.4%  10.7 1380s
 4003230 2776454   50.23636   71   20   67.00000   19.80000  70.4%  10.7 1385s
 4019220 2787907   42.61111   59   14   67.00000   19.80941  70.4%  10.7 1390s
 4032896 2797171 infeasible   88        67.00000   19.81728  70.4%  10.7 1395s
 4047816 2807640 infeasible   69        67.00000   19.82222  70.4%  10.7 1400s
 4062112 2817772 infeasible   39        67.00000   19.82353  70.4%  10.7 1405s
 4076412 2827900 infeasible   70        67.00000   19.82963  70.4%  10.7 1410s
 4090437 2837528   55.31524   68   15   67.00000   19.83611  70.4%  10.7 1415s
 4105320 2847700     cutoff   67        67.00000   19.84615  70.4%  10.7 1420s
 4121495 2858955   60.64375   81   25   67.00000   19.85238  70.4%  10.7 1425s
 4132421 2866558 infeasible   84        67.00000   19.85712  70.4%  10.7 1430s
 4145612 2875581   51.53333   80   11   67.00000   19.86428  70.4%  10.7 1435s
 4161585 2886860   41.88889   53   21   67.00000   19.86667  70.3%  10.7 1440s
 4177468 2898212   25.00889   43    7   67.00000   19.87143  70.3%  10.7 1445s
 4189618 2906659   32.91667   53   14   67.00000   19.87222  70.3%  10.7 1450s
 4203642 2916621   59.01401   86   18   67.00000   19.87759  70.3%  10.7 1455s
 4219523 2927555     cutoff   89        67.00000   19.88571  70.3%  10.7 1460s
 4234469 2938018   35.44444   53   15   67.00000   19.89091  70.3%  10.7 1465s
 4247232 2946995   47.76441   60   20   67.00000   19.89524  70.3%  10.7 1470s
 4264497 2959343   55.52500   74   23   67.00000   19.89524  70.3%  10.6 1475s
 4281432 2971326 infeasible   70        67.00000   19.90000  70.3%  10.6 1480s
 4294356 2980269   21.62222   34    7   67.00000   19.90476  70.3%  10.6 1485s
 4308943 2990293   45.79770   76   12   67.00000   19.91429  70.3%  10.6 1490s
 4325871 3002221   26.68889   41   16   67.00000   19.92143  70.3%  10.6 1495s
 4340376 3012190   63.59574   88   13   67.00000   19.92381  70.3%  10.6 1500s
 4355222 3022586 infeasible   91        67.00000   19.92381  70.3%  10.6 1505s
 4369862 3033187   54.42000   85   11   67.00000   19.92381  70.3%  10.6 1510s
 4387992 3045944   38.67619   48   21   67.00000   19.93191  70.3%  10.6 1515s
 4404910 3057505   64.16970   75   16   67.00000   19.93333  70.2%  10.6 1520s
 4415965 3065162 infeasible   66        67.00000   19.93333  70.2%  10.6 1525s
 4426139 3072320   64.23667   84   29   67.00000   19.93333  70.2%  10.6 1530s
 4435430 3078775   47.90000   66   15   67.00000   19.94074  70.2%  10.6 1535s
 4447912 3087252   54.77778   60   19   67.00000   19.94286  70.2%  10.6 1540s
 4462611 3097521   62.57443   98   12   67.00000   19.94921  70.2%  10.6 1545s
 4476507 3107361 infeasible   68        67.00000   19.95556  70.2%  10.6 1550s
 4492065 3118177   55.87812   64   21   67.00000   19.96364  70.2%  10.6 1555s
 4502304 3125304   59.56042   79   24   67.00000   19.96667  70.2%  10.6 1560s
 4513626 3133515 infeasible   42        67.00000   19.96667  70.2%  10.6 1565s
 4525852 3142077   45.31667   51   23   67.00000   19.97391  70.2%  10.6 1570s
 4539389 3151568   61.12576   77   35   67.00000   19.98095  70.2%  10.6 1575s
 4549853 3158828   52.75455   72   17   67.00000   19.98333  70.2%  10.6 1580s
 4561348 3166818   65.36000   71   18   67.00000   19.98947  70.2%  10.6 1585s
 4575940 3177199   29.53945   47   14   67.00000   19.99048  70.2%  10.6 1590s
 4588682 3186045   50.04568   69   20   67.00000   20.00000  70.1%  10.6 1595s
 4603959 3196755   65.05380   66   29   67.00000   20.00000  70.1%  10.6 1600s
 4615792 3204784   28.40000   40   11   67.00000   20.00833  70.1%  10.6 1605s
 4631849 3215745   45.80000   60   18   67.00000   20.01481  70.1%  10.6 1610s
 4642818 3223421   54.62917   60   23   67.00000   20.01867  70.1%  10.6 1615s
 4653200 3230656   64.69062   71   35   67.00000   20.02222  70.1%  10.6 1620s
 4663662 3237909 infeasible   72        67.00000   20.02857  70.1%  10.6 1625s
 4678044 3248152   41.17778   64   12   67.00000   20.03333  70.1%  10.6 1630s
 4693172 3259116   49.41667   69   21   67.00000   20.03810  70.1%  10.6 1635s
 4707869 3269648     cutoff   53        67.00000   20.04286  70.1%  10.6 1640s
 4719949 3278033   43.70815   56   15   67.00000   20.05000  70.1%  10.6 1645s
 4732511 3286594   61.03333   80   24   67.00000   20.05455  70.1%  10.6 1650s
 4746681 3296508   62.02029   93   17   67.00000   20.06190  70.1%  10.6 1655s
 4760165 3305915   65.38272   90   23   67.00000   20.06667  70.0%  10.6 1660s
 4772041 3314377   26.72000   42   12   67.00000   20.06667  70.0%  10.6 1665s
 4789594 3326647   60.81667   91   22   67.00000   20.07100  70.0%  10.6 1670s
 4803119 3335824   33.04167   48   11   67.00000   20.07659  70.0%  10.6 1675s
 4816917 3345404   45.67458   60   17   67.00000   20.08333  70.0%  10.6 1680s
 4833076 3356733 infeasible   51        67.00000   20.09048  70.0%  10.6 1685s
 4847239 3366637   65.04657   76   31   67.00000   20.09524  70.0%  10.6 1690s
 4860220 3374503   43.38391   59   10   67.00000   20.10000  70.0%  10.6 1695s
 4874976 3384883   57.08889   50   18   67.00000   20.10303  70.0%  10.6 1700s
 4890398 3395629 infeasible   88        67.00000   20.11111  70.0%  10.6 1705s
 4903214 3404370   29.82424   44   11   67.00000   20.11429  70.0%  10.6 1710s
 4915415 3412814 infeasible   69        67.00000   20.11905  70.0%  10.6 1715s
 4928919 3422282   38.47222   56   17   67.00000   20.12381  70.0%  10.6 1720s
 4941365 3430830   38.41884   55   15   67.00000   20.13333  70.0%  10.6 1725s
 4954897 3440209   36.83333   49   18   67.00000   20.13333  70.0%  10.6 1730s
 4968578 3449756   44.06667   67    8   67.00000   20.13333  70.0%  10.6 1735s
 4986453 3462385   54.63333   67   20   67.00000   20.13333  70.0%  10.6 1740s
 5005715 3475850 infeasible   50        67.00000   20.13333  70.0%  10.6 1745s
 5020453 3486116 infeasible   44        67.00000   20.13333  70.0%  10.6 1750s
 5035605 3496864   41.15333   48   17   67.00000   20.13457  69.9%  10.6 1755s
 5050486 3507302   53.22738   82   12   67.00000   20.14359  69.9%  10.6 1760s
 5064943 3517604   25.63175   34   19   67.00000   20.14762  69.9%  10.6 1765s
 5074682 3524379   41.35862   54   11   67.00000   20.15459  69.9%  10.6 1770s
 5089607 3534925   30.80000   47   12   67.00000   20.15833  69.9%  10.6 1775s
 5104330 3545054 infeasible   81        67.00000   20.16533  69.9%  10.6 1780s
 5120467 3555905   26.59350   46   11   67.00000   20.17500  69.9%  10.6 1785s
 5134754 3566023   24.46667   35    9   67.00000   20.18254  69.9%  10.6 1790s
 5143343 3572001     cutoff   62        67.00000   20.18413  69.9%  10.6 1795s
 5154990 3580005   63.17233   69   24   67.00000   20.19487  69.9%  10.6 1800s

Explored 5156715 nodes (54718253 simplex iterations) in 1800.05 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 67 69 70 ... 85

Time limit reached
Best objective 6.700000000000e+01, best bound 2.100000000000e+01, gap 68.6567%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1378.9 MiB   1378.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1378.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1378.9 MiB      0.0 MiB       m2 = m.construct()
    28   1378.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1378.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1378.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1378.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1378.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1378.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1378.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1378.9 MiB      0.0 MiB       m2.update()
    44   1378.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1378.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1378.9 MiB      0.0 MiB       if(set_binary):
    51   1378.9 MiB      0.0 MiB           for x in set_binary:
    52   1378.9 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1378.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   4206.4 MiB   2827.5 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   4206.4 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   4206.4 MiB      0.0 MiB       j = 0
    69   4206.4 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   4206.4 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   4206.4 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   4206.4 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   4206.4 MiB      0.0 MiB       if m2.status == 9:
    78   4206.4 MiB      0.0 MiB           result.timeout = True
    79   4206.4 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   4206.4 MiB      0.0 MiB           result.solution = True
    81   4206.4 MiB      0.0 MiB           result.feasible = True
    82   4206.4 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   4206.4 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   4206.4 MiB      0.0 MiB           for v in current_vars:
    85   4206.4 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   4206.4 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   4206.4 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   4206.4 MiB      0.0 MiB                   j = j+1
    91                             
    92   4206.4 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 00:23:51 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.tra,lab' -mdp /tmp/tmpmwgn6hk7

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.7999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpmwgn6hk7"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.026 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      69 (1 initial)
Transitions: 147
Choices:     132

Transition matrix: 268 nodes (3 terminal), 147 minterms, vars: 7r/7c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 68, no = 1, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.007 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [9e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   9.000000e-01   0.000000e+00      0s
     565    1.7330000e+02   0.000000e+00   0.000000e+00      0s

Solved in 565 iterations and 0.03 seconds
Optimal objective  1.733000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2019.1 MiB   2019.1 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2019.1 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2019.1 MiB      0.0 MiB       m2 = m.construct()
    28   2019.1 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2019.1 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2019.1 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2019.1 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2019.1 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2019.1 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2019.1 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2019.1 MiB      0.0 MiB       m2.update()
    44   2019.1 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2019.1 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2019.1 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2019.1 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2019.1 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2019.1 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2019.1 MiB      0.0 MiB       j = 0
    69   2019.1 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2019.1 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2019.1 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2019.1 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2019.1 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2019.1 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2019.1 MiB      0.0 MiB           result.solution = True
    81   2019.1 MiB      0.0 MiB           result.feasible = True
    82   2019.1 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2019.1 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2019.1 MiB      0.0 MiB           for v in current_vars:
    85   2019.1 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2019.1 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2019.1 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2019.1 MiB      0.0 MiB                   j = j+1
    91                             
    92   2019.1 MiB      0.0 MiB       return result, res_vec



subsystem size:205

probability: 0.8999999999999999
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 00:23:52 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.tra,lab' -mdp /tmp/tmpef5tm7re

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpef5tm7re"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 79 iterations in 0.00 seconds (average 0.000051, setup 0.00)

Time for model construction: 0.038 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      206 (1 initial)
Transitions: 256
Choices:     207

Transition matrix: 529 nodes (3 terminal), 256 minterms, vars: 8r/8c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 90 iterations in 0.00 seconds (average 0.000044, setup 0.00)

yes = 203, no = 1, maybe = 2

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=8, nodes=39] [1.8 KB]
Adding sparse bits... [levels=8-8, num=1, compact=1/1] [0.2 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.6 KB]
TOTAL: [7.3 KB]

Starting iterations...

Iterative method: 3 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Value in the initial state: 1.0

Time for model checking: 0.011 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [9e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   9.000000e-01   0.000000e+00      0s
     565    1.7330000e+02   0.000000e+00   0.000000e+00      0s

Solved in 565 iterations and 0.03 seconds
Optimal objective  1.733000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2019.1 MiB   2019.1 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2019.1 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2019.1 MiB      0.0 MiB       m2 = m.construct()
    28   2019.1 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2019.1 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2019.1 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2019.1 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2019.1 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2019.1 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2019.1 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2019.1 MiB      0.0 MiB       m2.update()
    44   2019.1 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2019.1 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2019.1 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2019.1 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2019.1 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2019.1 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2019.1 MiB      0.0 MiB       j = 0
    69   2019.1 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2019.1 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2019.1 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2019.1 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2019.1 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2019.1 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2019.1 MiB      0.0 MiB           result.solution = True
    81   2019.1 MiB      0.0 MiB           result.feasible = True
    82   2019.1 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2019.1 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2019.1 MiB      0.0 MiB           for v in current_vars:
    85   2019.1 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2019.1 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2019.1 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2019.1 MiB      0.0 MiB                   j = j+1
    91                             
    92   2019.1 MiB      0.0 MiB       return result, res_vec



subsystem size:205

probability: 0.8999999999999999
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [2e-01, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [9e-01, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   9.000000e-01   0.000000e+00      0s
     148    1.4330120e+02   0.000000e+00   0.000000e+00      0s

Solved in 148 iterations and 0.01 seconds
Optimal objective  1.433011998e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2019.1 MiB   2019.1 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2019.1 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2019.1 MiB      0.0 MiB       m2 = m.construct()
    28   2019.1 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2019.1 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2019.1 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2019.1 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2019.1 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2019.1 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2019.1 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2019.1 MiB      0.0 MiB       m2.update()
    44   2019.1 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2019.1 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2019.1 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2019.1 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2019.1 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2019.1 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2019.1 MiB      0.0 MiB       j = 0
    69   2019.1 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2019.1 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2019.1 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2019.1 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2019.1 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2019.1 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2019.1 MiB      0.0 MiB           result.solution = True
    81   2019.1 MiB      0.0 MiB           result.feasible = True
    82   2019.1 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2019.1 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2019.1 MiB      0.0 MiB           for v in current_vars:
    85   2019.1 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2019.1 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2019.1 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2019.1 MiB      0.0 MiB                   j = j+1
    91                             
    92   2019.1 MiB      0.0 MiB       return result, res_vec



subsystem size:143

probability: 0.8999999999999999
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 00:23:54 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.tra,lab' -mdp /tmp/tmpupn0gsro

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpupn0gsro"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 38 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.032 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      145 (1 initial)
Transitions: 179
Choices:     145

Transition matrix: 383 nodes (3 terminal), 179 minterms, vars: 8r/8c/1nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 526 iterations in 0.02 seconds (average 0.000038, setup 0.00)

yes = 12, no = 1, maybe = 132

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=1, levels=8, nodes=362] [17.0 KB]
Adding sparse bits... [levels=8-8, num=1, compact=1/1] [0.8 KB]
Creating vector for yes... [dist=2, compact] [0.3 KB]
Allocating iteration vectors... [3 x 1.1 KB]
TOTAL: [21.5 KB]

Starting iterations...

Iterative method: 2574 iterations in 0.00 seconds (average 0.000002, setup 0.00)

Value in the initial state: 0.9662446798918081

Time for model checking: 0.032 seconds.

Result: 0.9662446798918081 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 287 rows and 572 columns
Presolve time: 0.00s
Presolved: 242 rows, 484 columns, 1076 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -8.0800000e+32   1.800000e+32   8.080000e+02      0s
     517   -2.4400000e+02   0.000000e+00   0.000000e+00      0s

Solved in 517 iterations and 0.01 seconds
Optimal objective -2.440000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2019.1 MiB   2019.1 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2019.1 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2019.1 MiB      0.0 MiB       m2 = m.construct()
    28   2019.1 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2019.1 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2019.1 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2019.1 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2019.1 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2019.1 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2019.1 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2019.1 MiB      0.0 MiB       m2.update()
    44   2019.1 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2019.1 MiB      0.0 MiB       if(zero_vars):
    47   2019.1 MiB      0.0 MiB           for x in zero_vars:
    48   2019.1 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2019.1 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2019.1 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   2019.1 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   2019.1 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   2019.1 MiB      0.0 MiB       j = 0
    69   2019.1 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   2019.1 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   2019.1 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   2019.1 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   2019.1 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   2019.1 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   2019.1 MiB      0.0 MiB           result.solution = True
    81   2019.1 MiB      0.0 MiB           result.feasible = True
    82   2019.1 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   2019.1 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   2019.1 MiB      0.0 MiB           for v in current_vars:
    85   2019.1 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   2019.1 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   2019.1 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   2019.1 MiB      0.0 MiB                   j = j+1
    91                             
    92   2019.1 MiB      0.0 MiB       return result, res_vec


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 2112 columns and 3868 nonzeros
Variable types: 1056 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 2e+02]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [9e-01, 1e+00]
Presolve removed 428 rows and 700 columns
Presolve time: 0.01s
Presolved: 1157 rows, 1412 columns, 3016 nonzeros
Variable types: 704 continuous, 708 integer (708 binary)

Root relaxation: objective 3.702172e+00, 1386 iterations, 0.11 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.70217    0  210          -    3.70217      -     -    0s
H    0     0                     248.0000000    3.70217  98.5%     -    0s
H    0     0                     209.0000000    3.70217  98.2%     -    1s
     0     2    3.70217    0  210  209.00000    3.70217  98.2%     -    1s
H    3     8                     174.0000000    3.99220  97.7%   138    3s
H   12    12                     158.0000000    4.44225  97.2%   171    4s
H   19    20                     149.0000000    4.89828  96.7%   153    4s
H   22    20                     130.0000000    5.07903  96.1%   155    4s
    27    32    5.71252    5  147  130.00000    5.28133  95.9%   158    5s
H   37    32                     129.0000000    5.71252  95.6%   137    5s
H   46    46                     109.0000000    5.76594  94.7%   123    6s
H   50    46                      98.0000000    5.76594  94.1%   121    6s
   505   427   15.89712   35  126   98.00000    5.77641  94.1%  51.7   10s
H 1937  1661                      90.0000000    5.77641  93.6%  30.7   14s
H 2120  1818                      89.0000000    5.77641  93.5%  29.8   14s
  2464  2093   57.63649  169   94   89.00000    5.77641  93.5%  28.8   15s
H 2505  2097                      83.0000000    5.77641  93.0%  28.6   15s
H 2506  2082                      79.0000000    5.77641  92.7%  28.6   15s
  3590  2870   11.48089   33  210   79.00000    6.17407  92.2%  28.7   20s
  3618  2898    6.56662   21  118   79.00000    6.48444  91.8%  29.3   25s
H 3726  2810                      78.0000000    6.56662  91.6%  29.1   27s
H 3758  2695                      77.0000000    6.56662  91.5%  29.0   27s
  4636  3241 infeasible   95        77.00000    6.56662  91.5%  28.7   32s
H 4639  3112                      74.0000000    6.56662  91.1%  28.7   32s
H 4645  2989                      73.0000000    6.56662  91.0%  28.8   32s
  5281  3286   46.39506   79   85   73.00000    6.56662  91.0%  29.0   35s
  8050  4555   65.60973  130   72   73.00000    6.98171  90.4%  28.6   40s
 11242  6202   53.79370  121   69   73.00000    6.98171  90.4%  28.1   45s
 14179  8582    8.03113   32  122   73.00000    6.99444  90.4%  28.4   50s
 16905 10809   44.67806  114   74   73.00000    6.99444  90.4%  27.9   55s
 18873 12420   69.46063  163   52   73.00000    6.99444  90.4%  28.2   60s
 21601 14526 infeasible   42        73.00000    6.99444  90.4%  28.3   65s
 25534 17549   20.92526   57   98   73.00000    7.15354  90.2%  28.0   70s
 29191 20474   43.62434   64   79   73.00000    7.23575  90.1%  27.9   75s
 32482 22996   61.27922   96   60   73.00000    7.26526  90.0%  28.1   80s
H32483 22873                      72.0000000    7.26526  89.9%  28.1   80s
 34691 24456   59.38990  106   78   72.00000    7.63177  89.4%  28.3   85s
H35357 24585                      71.0000000    7.64378  89.2%  28.2   85s
 39087 27608   32.29343   48   87   71.00000    7.97199  88.8%  28.1   91s
 41896 29633   57.04393   95   61   71.00000    7.98207  88.8%  28.4   95s
 47431 33988   32.85366   51   99   71.00000    7.98804  88.7%  28.0  102s
 50839 36604   24.71008   50   85   71.00000    8.00480  88.7%  28.0  105s
 53999 39032   55.97909  101   74   71.00000    8.00480  88.7%  28.0  110s
 58634 42509    8.05222   36  117   71.00000    8.05222  88.7%  28.5  116s
 61426 44557   47.30716  116   86   71.00000    8.05340  88.7%  28.8  120s
 64457 46948   41.04815   72   98   71.00000    8.05340  88.7%  28.8  125s
 69569 51006   27.99177   54   83   71.00000    8.05340  88.7%  28.9  131s
 73212 53843   18.87777   45   82   71.00000    8.05340  88.7%  28.9  135s
 76016 55901   15.88198   39  103   71.00000    8.18594  88.5%  29.2  140s
 79402 58546   60.15615  114   78   71.00000    8.18594  88.5%  29.2  145s
 85061 63087   67.38109  142   45   71.00000    8.18594  88.5%  29.1  152s
 88454 65738   33.27113   75   95   71.00000    8.51601  88.0%  28.9  156s
 91760 68104   60.61992  125   84   71.00000    8.52534  88.0%  29.0  160s
 96908 72235   69.50903  107   79   71.00000    8.55205  88.0%  28.8  166s
 100694 75185 infeasible   65        71.00000    8.56662  87.9%  28.6  170s
H102791 74801                      69.0000000    8.56662  87.6%  28.5  174s
H102809 73388                      68.0000000    8.56662  87.4%  28.5  174s
 102832 73401   57.51327  120   63   68.00000    8.59518  87.4%  28.5  176s
 105707 75682   21.31738   62  116   68.00000    8.59518  87.4%  28.4  180s
 110927 79760   48.32607   88   51   68.00000    8.61649  87.3%  28.3  186s
 113901 82077   41.03377   78   79   68.00000    8.61649  87.3%  28.3  190s
 119247 86283   36.78541   63   83   68.00000    8.61814  87.3%  28.2  195s
 123526 89570   35.77844   56   88   68.00000    8.62441  87.3%  28.2  201s
 127657 92722   38.48779   89   82   68.00000    8.64201  87.3%  28.4  206s
 131596 95846   26.13909   46   84   68.00000    8.64201  87.3%  28.3  210s
 135987 99308    8.95535   31   97   68.00000    8.93618  86.9%  28.2  215s
 140852 103185   62.26037   97   87   68.00000    8.93857  86.9%  28.4  220s
 144247 105848   38.34649   83   51   68.00000    8.95052  86.8%  28.4  226s
 147206 108114   56.26591  117   42   68.00000    8.95535  86.8%  28.4  230s
 152179 111982   47.65879   84   80   68.00000    8.95703  86.8%  28.5  235s
 157185 115941 infeasible   77        68.00000    8.95703  86.8%  28.6  241s
 161790 119474   17.88831   57   91   68.00000    8.96222  86.8%  28.8  246s
 164777 121779   56.93118  105   65   68.00000    8.96222  86.8%  28.9  250s
 170106 125776   63.95896   96   85   68.00000    8.96222  86.8%  28.9  256s
 174745 129343   41.59269   74   74   68.00000    8.97373  86.8%  29.1  263s
 176361 130670   52.85392  104   61   68.00000    8.97373  86.8%  29.1  266s
 181296 134567   19.83603   46   83   68.00000    8.97809  86.8%  29.1  270s
 186725 138826   65.65088  132   59   68.00000    8.98156  86.8%  29.1  275s
 191444 142354   62.29769  137   50   68.00000    8.98793  86.8%  29.2  280s
 198007 147444   66.38884  104   70   68.00000    8.99325  86.8%  29.3  286s
 202745 150965 infeasible   45        68.00000    8.99831  86.8%  29.5  291s
 205173 152854   44.56690   97   85   68.00000    8.99981  86.8%  29.5  295s
 210784 157242   46.36227   97   61   68.00000    8.99981  86.8%  29.5  301s
 214045 159782   64.35359  137   75   68.00000    9.01163  86.7%  29.6  305s
 219177 163608   30.36679   53   81   68.00000    9.02619  86.7%  29.6  311s
 224233 167283 infeasible   77        68.00000    9.02969  86.7%  29.7  316s
 227497 169741   32.67899   60   95   68.00000    9.03554  86.7%  29.8  320s
 232752 173734   46.98557   79   85   68.00000    9.03985  86.7%  29.9  326s
 237861 177648   62.95208  113   65   68.00000    9.04506  86.7%  29.9  331s
 241228 180306   32.69061   75  106   68.00000    9.04711  86.7%  29.9  335s
 245771 183666   35.32883   59   83   68.00000    9.05340  86.7%  29.9  340s
 249404 186471     cutoff  115        68.00000    9.05727  86.7%  29.9  345s
 252386 188688   23.58580   55   73   68.00000    9.05932  86.7%  30.0  351s
 255710 191190   48.02733   77   78   68.00000    9.05957  86.7%  30.0  355s
 260687 195060   22.84863   53  114   68.00000    9.07972  86.6%  30.0  360s
 264736 198004   51.40517   77   93   68.00000    9.10965  86.6%  30.2  366s
 269415 201520   63.36439  109   68   68.00000    9.12114  86.6%  30.2  371s
 272794 204035   56.46133  111   77   68.00000    9.12519  86.6%  30.3  375s
 276810 207188   57.44738   99   67   68.00000    9.12559  86.6%  30.3  380s
 281627 210802     cutoff  123        68.00000    9.12559  86.6%  30.3  385s
 286694 214661   47.02838  102   82   68.00000    9.15518  86.5%  30.4  390s
 290982 217824   33.06722   58   81   68.00000    9.15536  86.5%  30.5  396s
 295275 220942   50.51523  114   83   68.00000    9.19130  86.5%  30.6  402s
 297989 222882   39.75637   73   98   68.00000    9.19954  86.5%  30.7  407s
 298017 222895 infeasible   74        68.00000    9.20544  86.5%  30.7  410s
 302391 226174   62.64112  110   73   68.00000    9.21066  86.5%  30.8  416s
 305908 228733   18.08856   57   97   68.00000    9.21856  86.4%  30.9  420s
 310490 231870   59.23406  115   43   68.00000    9.22093  86.4%  31.1  426s
 313332 233934   29.04384   67   90   68.00000    9.22818  86.4%  31.2  430s
 316928 236611   39.43409   86  102   68.00000    9.22832  86.4%  31.3  436s
 320697 239453   54.04340   98  148   68.00000    9.23944  86.4%  31.3  440s
 325806 243376 infeasible  124        68.00000    9.25419  86.4%  31.4  446s
 329392 246100   13.41800   42  103   68.00000    9.25419  86.4%  31.4  450s
 334405 249913   38.42824   59   98   68.00000    9.41976  86.1%  31.5  456s
 336996 251857   56.78567   92   63   68.00000    9.42618  86.1%  31.5  461s
 340444 254436   51.62295   88   68   68.00000    9.45028  86.1%  31.6  467s
 344395 257514   64.99550  117   75   68.00000    9.45028  86.1%  31.5  471s
 348363 260604   65.63266  106   81   68.00000    9.48033  86.1%  31.5  475s
 353871 264722   13.47686   40  113   68.00000    9.53245  86.0%  31.5  480s
 358133 267838   34.79981   73  108   68.00000    9.53748  86.0%  31.6  486s
 361862 270566   12.45663   34   94   68.00000    9.54085  86.0%  31.6  490s
 366715 274051   63.47650  124   69   68.00000    9.54253  86.0%  31.6  496s
 370360 276794   50.23624   86   91   68.00000    9.55215  86.0%  31.7  500s
 375585 280701   43.00518   91   97   68.00000    9.55428  85.9%  31.6  505s
 378812 283159   27.77644   65   80   68.00000    9.55864  85.9%  31.6  510s
 381514 285039 infeasible  142        68.00000    9.56003  85.9%  31.7  516s
 385536 288186   37.58116   65   73   68.00000    9.56721  85.9%  31.6  520s
 390328 291942   62.45771  122   65   68.00000    9.56925  85.9%  31.6  525s
 395896 296293   48.17045  105   74   68.00000    9.57003  85.9%  31.6  530s
 401240 300485 infeasible   45        68.00000    9.57364  85.9%  31.5  535s
 405783 303980   39.79862   76   90   68.00000    9.57601  85.9%  31.5  541s
 408336 305787   47.68225   86   75   68.00000    9.57997  85.9%  31.5  545s
 411536 308188   66.39737  115   67   68.00000    9.58341  85.9%  31.5  550s
 416688 312068   18.42262   44   82   68.00000    9.58341  85.9%  31.5  556s
 420458 314902     cutoff  141        68.00000    9.58360  85.9%  31.5  560s
 425565 318895   54.36468  120   48   68.00000    9.58992  85.9%  31.4  566s
 428465 321159 infeasible  118        68.00000    9.59185  85.9%  31.4  570s
 432139 324061   65.61857  110   71   68.00000    9.59390  85.9%  31.4  577s
 433812 325299   26.27504   51  102   68.00000    9.59507  85.9%  31.4  581s
 436882 327726    9.59507   32   96   68.00000    9.59507  85.9%  31.4  585s
 441795 331452   49.89646   85   71   68.00000    9.60023  85.9%  31.4  591s
 444890 333800   49.94605   99   91   68.00000    9.60023  85.9%  31.4  596s
 447912 335968   65.40477  146   77   68.00000    9.60023  85.9%  31.4  600s
 450896 338090   50.22207   91   66   68.00000    9.60417  85.9%  31.4  605s
 454887 341201   56.41001  112   59   68.00000    9.60748  85.9%  31.4  612s
 458470 343964   27.82180   64   75   68.00000    9.61016  85.9%  31.3  616s
 462047 346645   16.46991   40  115   68.00000    9.61415  85.9%  31.3  620s
 466953 350250   65.79488  119   79   68.00000    9.61415  85.9%  31.3  626s
 472050 354073   54.16606   96   78   68.00000    9.61775  85.9%  31.3  631s
 474978 356272 infeasible  128        68.00000    9.61895  85.9%  31.3  635s
 480077 360112   65.33931  139   65   68.00000    9.61895  85.9%  31.3  642s
 481675 361353   43.18634   74   74   68.00000    9.62306  85.8%  31.3  646s
 487026 365467   64.69821  110   70   68.00000    9.62353  85.8%  31.3  652s
 490541 368227   62.26899  124   52   68.00000    9.62353  85.8%  31.3  655s
 495374 371726   63.47260  111   76   68.00000    9.63467  85.8%  31.3  660s
 500234 375402   19.46827   40   93   68.00000    9.64043  85.8%  31.3  666s
 504932 378929   25.33777   55   75   68.00000    9.64043  85.8%  31.3  672s
 507978 381221   31.30293   62   93   68.00000    9.64817  85.8%  31.3  676s
 512297 384329   16.82127   46   86   68.00000    9.82504  85.6%  31.4  681s
 515611 386853   64.46854  120   61   68.00000    9.82504  85.6%  31.4  685s
 518965 389474   65.31445  139   50   68.00000    9.90051  85.4%  31.4  690s
 521701 391588   26.60157   44   89   68.00000    9.92030  85.4%  31.4  695s
 527499 396334   65.22774  142   33   68.00000    9.92102  85.4%  31.4  701s
 531003 399028   45.67108   96   70   68.00000    9.92494  85.4%  31.4  705s
 535402 402254   65.20173  114   80   68.00000    9.92748  85.4%  31.5  711s
 538762 404854    9.93016   31   97   68.00000    9.93016  85.4%  31.5  715s
 543712 408729   42.37217   78   82   68.00000    9.93170  85.4%  31.5  721s
 547150 411487     cutoff  125        68.00000    9.93170  85.4%  31.5  725s
 550486 414134   59.65760  101   66   68.00000    9.93464  85.4%  31.5  730s
 553948 416907 infeasible   91        68.00000    9.93525  85.4%  31.5  735s
 558786 420605   30.73415   67   88   68.00000    9.93616  85.4%  31.5  741s
 560172 421660   53.10536   82  126   68.00000    9.93616  85.4%  31.5  745s
 563706 424478   65.44866  116   59   68.00000    9.93899  85.4%  31.5  752s
 567183 427192    9.93967   40   94   68.00000    9.93967  85.4%  31.5  756s
 570398 429680   66.47039  105   80   68.00000    9.94083  85.4%  31.5  760s
 573458 432046   28.75965   64  102   68.00000    9.94171  85.4%  31.5  765s
 578552 435947   42.69459   71   78   68.00000    9.94407  85.4%  31.5  771s
 581205 437888   46.57402   93   58   68.00000    9.94407  85.4%  31.6  775s
 586675 442111   65.70364  102   83   68.00000    9.94709  85.4%  31.6  781s
 589867 444452   21.41993   62  100   68.00000    9.94755  85.4%  31.6  785s
 594648 448039 infeasible  130        68.00000    9.94759  85.4%  31.7  792s
 596569 449597   46.31003   96   56   68.00000    9.94759  85.4%  31.6  796s
 599999 452254   63.24040  131   39   68.00000    9.94968  85.4%  31.7  800s
 604732 455755   43.76907   76   82   68.00000    9.95166  85.4%  31.7  806s
 608151 458400 infeasible   65        68.00000    9.95262  85.4%  31.7  810s
 613015 462015   53.46848   99   51   68.00000    9.95390  85.4%  31.7  815s
 615969 464240   64.39745   84  131   68.00000    9.95504  85.4%  31.8  820s
 621087 468082 infeasible   87        68.00000    9.95535  85.4%  31.8  826s
 624400 470503   63.26671  125   64   68.00000    9.95535  85.4%  31.8  830s
 628894 473738   28.10450   46   65   68.00000    9.95667  85.4%  31.9  837s
 629005 473832    9.96559   30  101   68.00000    9.95677  85.4%  31.9  840s
 634216 477822   63.69043  119   67   68.00000    9.95785  85.4%  31.9  846s
 637991 480773   63.34171  121   54   68.00000    9.95821  85.4%  31.9  850s
 642991 484524   55.23058  116   61   68.00000    9.95945  85.4%  31.9  856s
 646179 486976   48.32750   93   63   68.00000    9.96012  85.4%  32.0  860s
 650797 490329   47.57513   89   65   68.00000    9.96030  85.4%  32.0  866s
 654362 493110   48.58030   90   61   68.00000    9.96030  85.4%  32.0  870s
 659330 496806   34.71985   88   71   68.00000    9.96228  85.3%  32.0  876s
 662707 499353   39.80998   72   75   68.00000    9.96330  85.3%  32.0  880s
 667766 503177 infeasible   66        68.00000    9.96438  85.3%  32.1  886s
 672579 506739   29.70960   61   75   68.00000    9.96551  85.3%  32.1  892s
 674287 508067   52.46532   99   69   68.00000    9.96556  85.3%  32.1  896s
 677911 510690   46.61843   77   68   68.00000    9.96638  85.3%  32.1  900s
 681287 513096   57.24376  113   45   68.00000    9.96663  85.3%  32.1  905s
 686501 517018   19.83705   49   87   68.00000    9.96885  85.3%  32.2  911s
 689520 519148   53.52292   82   96   68.00000    9.96885  85.3%  32.2  915s
 694276 522693   52.40256  113   97   68.00000    9.97001  85.3%  32.2  921s
 697681 525144   37.73521   69   72   68.00000    9.97080  85.3%  32.3  925s
 702704 528859   47.71122   87   71   68.00000    9.97280  85.3%  32.3  931s
 705733 531053   42.62572   71   77   68.00000    9.97333  85.3%  32.3  935s
 709040 533493   47.65128   87   81   68.00000    9.97386  85.3%  32.3  940s
 712973 536400   32.75784   75   89   68.00000    9.97386  85.3%  32.3  945s
 717662 539890   23.79158   52   99   68.00000    9.97495  85.3%  32.4  950s
 721796 543031   66.82825   95   84   68.00000    9.97766  85.3%  32.4  955s
 726731 546626   58.81968  112   75   68.00000    9.97781  85.3%  32.4  961s
 729818 548802   55.72097   89   85   68.00000    9.98056  85.3%  32.4  965s
 735307 552885   14.96822   42  111   68.00000    9.98158  85.3%  32.4  971s
 738517 555394   62.37661  121   72   68.00000    9.98171  85.3%  32.4  975s
 743462 559045   18.79781   40   97   68.00000    9.98264  85.3%  32.5  981s
 746800 561569   46.02429   83   63   68.00000    9.98544  85.3%  32.5  985s
 751391 565113   49.61611   90   75   68.00000    9.98544  85.3%  32.5  992s
 752982 566302   61.71060  108   68   68.00000    9.98692  85.3%  32.5  996s
 756319 568614   57.35532   90   79   68.00000    9.98781  85.3%  32.5 1000s
 759868 571350   55.33461  114   76   68.00000    9.98869  85.3%  32.5 1005s
 763754 574216   66.31142  100   73   68.00000    9.98940  85.3%  32.5 1011s
 766982 576532   60.44331  135   62   68.00000    9.99172  85.3%  32.6 1015s
 770599 579258   57.23283  111   43   68.00000    9.99257  85.3%  32.6 1020s
 776830 584195   46.13210   81   87   68.00000    9.99387  85.3%  32.5 1025s
 781110 587373   55.77619  108   76   68.00000    9.99480  85.3%  32.6 1030s
 786049 591026   46.72817   78   66   68.00000    9.99611  85.3%  32.6 1036s
 789429 593469   28.38379   61   83   68.00000    9.99611  85.3%  32.6 1040s
 794558 597191   47.81037   78   75   68.00000    9.99679  85.3%  32.6 1047s
 795583 597885   14.92438   36  117   68.00000    9.99981  85.3%  32.6 1051s
 799128 600504 infeasible   36        68.00000    9.99981  85.3%  32.6 1055s
 804450 604412   35.00485   56   92   68.00000   10.00319  85.3%  32.6 1060s
 809020 607604   13.90097   36  115   68.00000   10.00589  85.3%  32.6 1066s
 812269 609807   66.67406  113   64   68.00000   10.00814  85.3%  32.6 1070s
 817777 613896   18.87657   47   84   68.00000   10.00930  85.3%  32.6 1075s
 822973 617814   19.92812   56  116   68.00000   10.01022  85.3%  32.6 1081s
 827583 621187   26.65906   47   88   68.00000   10.01543  85.3%  32.6 1086s
 830679 623552   63.12514  101   63   68.00000   10.01614  85.3%  32.6 1090s
 836196 627636   54.50401   98   69   68.00000   10.01867  85.3%  32.6 1096s
 841483 631747   24.86941   60  104   68.00000   10.01867  85.3%  32.6 1100s
 845068 634423   13.99398   43  113   68.00000   10.02243  85.3%  32.6 1105s
 849254 637410   16.90758   40  115   68.00000   10.02321  85.3%  32.6 1111s
 852829 640170   15.88932   36   95   68.00000   10.02580  85.3%  32.6 1115s
 859364 645137   46.66388   81   75   68.00000   10.02630  85.3%  32.5 1120s
 864725 649008   51.24809   87   72   68.00000   10.02721  85.3%  32.5 1125s
 870070 652819 infeasible  110        68.00000   10.02721  85.3%  32.5 1130s
 875431 656963   64.27946  111   56   68.00000   10.02721  85.3%  32.5 1135s
 881990 661778 infeasible   45        68.00000   10.03150  85.2%  32.5 1141s
 887384 665918   18.84606   52  116   68.00000   10.03225  85.2%  32.5 1145s
 892245 669701   37.33801   66   85   68.00000   10.03520  85.2%  32.5 1150s
 896596 672821   36.19304   64   86   68.00000   10.03807  85.2%  32.5 1155s
 900276 675743   45.73628   84   71   68.00000   10.03807  85.2%  32.5 1160s
 906714 680536   58.67424  125   84   68.00000   10.04339  85.2%  32.4 1165s
 911572 683909   62.14757  116   74   68.00000   10.04504  85.2%  32.5 1170s
 916560 687618   38.81873   65   75   68.00000   10.04772  85.2%  32.4 1176s
 921781 691673     cutoff  100        68.00000   10.05225  85.2%  32.4 1181s
 925050 694121   53.52962  106   83   68.00000   10.05362  85.2%  32.4 1185s
 928906 696685   58.75966  109   66   68.00000   10.05727  85.2%  32.5 1190s
 934046 700322   39.31279   64   77   68.00000   10.05932  85.2%  32.5 1196s
 937436 702864   36.63507   84   96   68.00000   10.06112  85.2%  32.4 1200s
 942314 706530   16.86722   43   93   68.00000   10.06598  85.2%  32.4 1205s
 947351 710398   65.67850  112   76   68.00000   10.07344  85.2%  32.4 1213s
 947414 710427     cutoff  113        68.00000   10.07398  85.2%  32.4 1215s
 952529 714368   35.36386   67   90   68.00000   10.07759  85.2%  32.4 1221s
 955928 716904   55.41218   97   67   68.00000   10.08051  85.2%  32.4 1225s
 960353 720133   49.35825   93   57   68.00000   10.08051  85.2%  32.4 1231s
 964903 723388   17.98859   40   89   68.00000   10.09650  85.2%  32.5 1236s
 968393 726021   14.07998   39  119   68.00000   10.09897  85.1%  32.5 1240s
 973267 729466   39.44699   77   77   68.00000   10.10177  85.1%  32.5 1246s
 976581 731979   58.34513  113   55   68.00000   10.10453  85.1%  32.5 1250s
 981762 735866   20.02300   54   96   68.00000   10.10899  85.1%  32.5 1256s
 986482 739395   63.38098  125   60   68.00000   10.11252  85.1%  32.5 1261s
 990076 742103   45.52994   99   81   68.00000   10.11392  85.1%  32.5 1265s
 994936 745829   43.49236   81   70   68.00000   10.11663  85.1%  32.5 1270s
 998222 748236   63.36054  118   61   68.00000   10.12261  85.1%  32.5 1275s
 1001037 750205   48.52325   90   78   68.00000   10.12261  85.1%  32.5 1281s
 1002709 751447   65.37423  115   62   68.00000   10.12519  85.1%  32.5 1285s
 1005805 753714   36.54369   85  109   68.00000   10.12523  85.1%  32.5 1290s
 1008601 755641   59.39886  120   78   68.00000   10.12924  85.1%  32.5 1295s
 1011939 758003   55.37720  109   53   68.00000   10.13129  85.1%  32.6 1300s
 1017592 762161   49.42994  112   90   68.00000   10.13491  85.1%  32.6 1307s
 1020848 764556   20.98578   53  105   68.00000   10.13491  85.1%  32.6 1312s
 1023954 766726   61.36335  132   63   68.00000   10.13734  85.1%  32.6 1316s
 1027415 769180   20.95788   56  100   68.00000   10.13734  85.1%  32.6 1321s
 1030249 771225   53.15676  120   88   68.00000   10.13734  85.1%  32.6 1325s
 1034980 774625   59.36561  101   70   68.00000   10.14448  85.1%  32.6 1331s
 1038231 777001   53.36499   86   70   68.00000   10.15167  85.1%  32.6 1336s
 1041677 779465   30.77059   49   90   68.00000   10.15759  85.1%  32.6 1340s
 1045124 781999   17.05053   46  102   68.00000   10.15768  85.1%  32.6 1346s
 1048125 784139   51.50564  101   72   68.00000   10.15768  85.1%  32.7 1350s
 1053087 787774   42.97296   92   94   68.00000   10.15768  85.1%  32.7 1356s
 1056064 789935   63.73630  117   65   68.00000   10.16220  85.1%  32.7 1361s
 1059126 792233   13.16218   44  108   68.00000   10.17118  85.0%  32.7 1365s
 1064425 796314   36.57487   71   68   68.00000   10.17118  85.0%  32.7 1371s
 1067848 798840     cutoff  142        68.00000   10.17118  85.0%  32.7 1376s
 1070987 801074 infeasible   98        68.00000   10.18173  85.0%  32.7 1380s
 1075576 804509   30.94178   72   90   68.00000   10.18464  85.0%  32.8 1386s
 1079172 807247   50.57881  108   67   68.00000   10.18464  85.0%  32.8 1390s
 1082148 809422   20.05859   54   88   68.00000   10.18819  85.0%  32.8 1396s
 1084614 811217   45.16822   76   88   68.00000   10.19043  85.0%  32.8 1401s
 1087970 813641     cutoff  122        68.00000   10.19247  85.0%  32.8 1405s
 1091888 816622   64.61278  116   68   68.00000   10.19475  85.0%  32.8 1410s
 1096870 820491   40.07974   60   93   68.00000   10.19749  85.0%  32.8 1416s
 1100228 822815   57.09605  113   83   68.00000   10.19898  85.0%  32.9 1420s
 1105195 826406   56.36746  104   84   68.00000   10.20222  85.0%  32.9 1426s
 1108410 828874 infeasible   79        68.00000   10.20536  85.0%  32.9 1430s
 1111375 831034   13.15464   35   99   68.00000   10.20588  85.0%  32.9 1435s
 1116363 834657   43.73991   75   84   68.00000   10.20768  85.0%  32.9 1441s
 1117936 835871   64.61644  106   58   68.00000   10.21041  85.0%  32.9 1445s
 1123061 839645   30.33432   49   88   68.00000   10.21189  85.0%  33.0 1452s
 1126827 842540   64.69964   86   89   68.00000   10.21492  85.0%  33.0 1457s
 1129900 844824   50.56232   95   69   68.00000   10.21494  85.0%  33.0 1461s
 1133463 847398   19.83966   45  100   68.00000   10.21690  85.0%  33.0 1465s
 1138283 850938     cutoff  115        68.00000   10.21690  85.0%  33.0 1472s
 1141679 853433   20.03955   57   96   68.00000   10.21895  85.0%  33.0 1476s
 1144777 855759   23.03393   54   89   68.00000   10.22091  85.0%  33.0 1480s
 1148236 858261   65.41406   89  144   68.00000   10.22399  85.0%  33.0 1485s
 1153415 862106   34.98315   80   90   68.00000   10.22493  85.0%  33.1 1492s
 1154745 863032 infeasible  100        68.00000   10.22730  85.0%  33.1 1496s
 1158070 865398   46.59298   92   61   68.00000   10.22730  85.0%  33.1 1500s
 1161509 867953   60.32720  129   53   68.00000   10.22911  85.0%  33.1 1505s
 1166024 871266 infeasible   88        68.00000   10.23695  84.9%  33.1 1512s
 1167734 872403   52.99067   77   92   68.00000   10.23944  84.9%  33.1 1517s
 1171592 875270   59.27815  119   53   68.00000   10.24272  84.9%  33.1 1521s
 1174881 877561   26.21232   56   97   68.00000   10.24682  84.9%  33.2 1526s
 1177567 879381   54.21238  109   61   68.00000   10.24682  84.9%  33.2 1530s
 1181314 882063   55.52122   98   62   68.00000   10.25007  84.9%  33.2 1535s
 1184979 884763   64.61274  109   71   68.00000   10.30057  84.9%  33.2 1540s
 1188573 887371   55.61918   89   66   68.00000   10.34973  84.8%  33.2 1546s
 1192176 890166 infeasible  124        68.00000   10.36193  84.8%  33.2 1551s
 1196044 893084   42.70340   64   80   68.00000   10.37193  84.7%  33.2 1555s
 1200648 896498   21.58181   61  120   68.00000   10.38417  84.7%  33.2 1561s
 1204104 899069     cutoff  112        68.00000   10.39245  84.7%  33.2 1565s
 1208700 902537   38.13364   67   70   68.00000   10.39721  84.7%  33.2 1571s
 1212418 905333   24.12412   44   92   68.00000   10.41176  84.7%  33.2 1576s
 1216075 908187   16.31904   39  102   68.00000   10.41777  84.7%  33.2 1580s
 1220795 911705   25.23916   61   97   68.00000   10.43089  84.7%  33.3 1585s
 1225659 915438   64.60214  116   60   68.00000   10.43123  84.7%  33.3 1591s
 1227401 916664   24.19409   56   92   68.00000   10.44713  84.6%  33.3 1595s
 1232512 920525 infeasible   83        68.00000   10.44713  84.6%  33.3 1602s
 1236140 923260   58.31357  107   48   68.00000   10.44713  84.6%  33.3 1606s
 1241566 927409   61.82885  105   80   68.00000   10.47859  84.6%  33.3 1611s
 1246566 931134   61.56652  101   70   68.00000   10.48240  84.6%  33.3 1615s
 1252010 935286   21.02794   49  101   68.00000   10.49457  84.6%  33.3 1621s
 1256912 939015   18.31505   36  104   68.00000   10.50265  84.6%  33.3 1626s
 1261987 942710   45.15460   82   73   68.00000   10.50825  84.5%  33.2 1630s
 1263876 944078   63.39832  120   64   68.00000   10.50860  84.5%  33.2 1635s
 1270522 949019   31.33109   84  105   68.00000   10.51528  84.5%  33.2 1640s
 1275532 952828   31.24113   82   90   68.00000   10.51528  84.5%  33.2 1646s
 1280316 956341   32.15850   56   91   68.00000   10.51770  84.5%  33.2 1650s
 1284951 959716   54.67661   90   73   68.00000   10.52154  84.5%  33.2 1655s
 1291954 964966   64.72256  116   66   68.00000   10.52511  84.5%  33.2 1661s
 1296359 967988   52.25959  111   91   68.00000   10.52667  84.5%  33.2 1666s
 1299927 970785   10.52942   41  109   68.00000   10.52942  84.5%  33.2 1670s
 1303278 973379   32.14781   57   92   68.00000   10.53045  84.5%  33.2 1675s
 1307870 976659   32.15856   58   86   68.00000   10.53431  84.5%  33.2 1680s
 1311074 979101   32.29418   71  103   68.00000   10.53431  84.5%  33.2 1686s
 1314416 981562   53.07882  104   82   68.00000   10.53431  84.5%  33.2 1690s
 1317813 984035   66.56022  123   74   68.00000   10.53711  84.5%  33.2 1695s
 1323265 987997   43.89050   84   72   68.00000   10.53775  84.5%  33.2 1700s
 1328246 991605   59.18635  129   69   68.00000   10.54048  84.5%  33.2 1706s
 1333724 995624   46.49450  116   75   68.00000   10.54142  84.5%  33.2 1711s
 1336590 997628   54.45793  108   61   68.00000   10.54142  84.5%  33.2 1715s
 1341251 1000958   53.78745  112   72   68.00000   10.54328  84.5%  33.2 1721s
 1344578 1003313     cutoff  116        68.00000   10.54528  84.5%  33.2 1725s
 1350200 1007618 infeasible  152        68.00000   10.54621  84.5%  33.2 1730s
 1355248 1011296   10.57813   37  107   68.00000   10.54968  84.5%  33.2 1735s
 1361449 1015995   50.09634   87   71   68.00000   10.55184  84.5%  33.2 1741s
 1366579 1019800   25.49291   65   95   68.00000   10.55338  84.5%  33.2 1745s
 1373070 1024487   60.43602  125   59   68.00000   10.55454  84.5%  33.2 1751s
 1378118 1028095   59.12998   98  112   68.00000   10.55454  84.5%  33.2 1755s
 1384689 1032993   59.64922  107   75   68.00000   10.55792  84.5%  33.2 1761s
 1389451 1036498   66.14471  127   68   68.00000   10.55875  84.5%  33.2 1766s
 1392560 1038682   45.06798  116   87   68.00000   10.55966  84.5%  33.2 1770s
 1397530 1042468   65.29748  120   83   68.00000   10.56082  84.5%  33.2 1776s
 1401202 1045309   63.67238  103   81   68.00000   10.56082  84.5%  33.2 1780s
 1404629 1047811   37.70927   65   76   68.00000   10.56177  84.5%  33.2 1785s
 1409854 1051772   51.37763   87   82   68.00000   10.56369  84.5%  33.2 1791s
 1412591 1053742   34.24228   67   69   68.00000   10.56421  84.5%  33.2 1795s
 1417550 1057323   41.26944   90   70   68.00000   10.56421  84.5%  33.2 1800s

Explored 1419044 nodes (47077953 simplex iterations) in 1800.03 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 68 69 71 ... 83

Time limit reached
Best objective 6.800000000000e+01, best bound 1.100000000000e+01, gap 83.8235%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   2019.1 MiB   2019.1 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   2019.1 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   2019.1 MiB      0.0 MiB       m2 = m.construct()
    28   2019.1 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   2019.1 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   2019.1 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   2019.1 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   2019.1 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   2019.1 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   2019.1 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   2019.1 MiB      0.0 MiB       m2.update()
    44   2019.1 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   2019.1 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   2019.1 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   2019.1 MiB      0.0 MiB       if(find_optimum):
    55   2019.1 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56   2019.1 MiB      0.0 MiB           m2.update()
    57   2019.1 MiB      0.0 MiB           new_obj = LinExpr(0)
    58   2019.1 MiB      0.0 MiB           for var in current_vars:
    59   2019.1 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60   2019.1 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61   2019.1 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62   2019.1 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1504.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1504.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1504.3 MiB      0.0 MiB       j = 0
    69   1504.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1504.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1504.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1504.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1504.3 MiB      0.0 MiB       if m2.status == 9:
    78   1504.3 MiB      0.0 MiB           result.timeout = True
    79   1504.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1504.3 MiB      0.0 MiB           result.solution = True
    81   1504.3 MiB      0.0 MiB           result.feasible = True
    82   1504.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1504.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1504.3 MiB      0.0 MiB           for v in current_vars:
    85   1504.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1504.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1504.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89   1504.3 MiB      0.0 MiB                       res_vec[j] = 0
    90   1504.3 MiB      0.0 MiB                   j = j+1
    91                             
    92   1504.3 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 00:53:58 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.tra,lab' -mdp /tmp/tmptzxv25ru

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmptzxv25ru"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.023 seconds.

Warning: Deadlocks detected and fixed in 1 states

Type:        MDP
States:      69 (1 initial)
Transitions: 84
Choices:     69

Transition matrix: 244 nodes (3 terminal), 84 minterms, vars: 7r/7c/1nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 69, no = 0, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.005 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 1584 columns and 4117 nonzeros
Variable types: 528 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [9e-01, 2e+00]
Presolve removed 289 rows and 280 columns
Presolve time: 0.01s
Presolved: 1296 rows, 1304 columns, 3548 nonzeros
Variable types: 486 continuous, 818 integer (818 binary)

Root relaxation: objective 2.300000e+00, 10 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    2.30000    0    6          -    2.30000      -     -    0s
     0     2    4.26667    0    9          -    4.26667      -     -    0s
H 5974  4143                      77.0000000   12.40000  83.9%   6.5    3s
H 6298  4068                      74.0000000   12.40000  83.2%   6.8    4s
  7642  4742   60.51170   81   22   74.00000   12.40000  83.2%   7.1    5s
H19537 14207                      73.0000000   14.40000  80.3%   8.1    9s
 19582 14219   28.11111   35   19   73.00000   14.40000  80.3%   8.1   10s
 35343 26439   70.58765   94   16   73.00000   15.38333  78.9%   8.6   15s
 51661 38912   30.27778   38   15   73.00000   15.73333  78.4%   8.7   20s
 66887 50746   35.45593   47   12   73.00000   16.06667  78.0%   8.9   25s
 85064 64508   26.30000   35   17   73.00000   16.40000  77.5%   9.0   30s
 98198 74383 infeasible   38        73.00000   16.58182  77.3%   9.1   35s
 114168 86274   40.93333   53   21   73.00000   16.86667  76.9%   9.1   40s
 131156 99215 infeasible   54        73.00000   17.06667  76.6%   9.2   45s
 147273 111383   36.28030   48   18   73.00000   17.16111  76.5%   9.2   50s
 161287 122205   69.52000   98   17   73.00000   17.29954  76.3%   9.2   55s
 176611 133875   30.44683   37   22   73.00000   17.40000  76.2%   9.2   60s
 194789 147442   70.90528   77   33   73.00000   17.53333  76.0%   9.2   65s
 211199 159889   68.93427   76   25   73.00000   17.69915  75.8%   9.3   70s
 230411 174293   56.91852   72   15   73.00000   17.80000  75.6%   9.3   75s
 247991 187526   53.52783   72   20   73.00000   17.96536  75.4%   9.3   80s
 267274 202303   44.77949   65   10   73.00000   18.06667  75.3%   9.3   85s
 286531 216641 infeasible   66        73.00000   18.11212  75.2%   9.3   90s
 306907 231882   68.80748   90   32   73.00000   18.22500  75.0%   9.3   95s
 323576 244533   66.51296   81   19   73.00000   18.31667  74.9%   9.3  100s
 336505 254259   30.90000   34   31   73.00000   18.38333  74.8%   9.3  105s
 353214 266909   63.28984   95   12   73.00000   18.40000  74.8%   9.3  110s
H356300 268248                      72.0000000   18.43889  74.4%   9.3  111s
 362441 272842   65.31818   72   25   72.00000   18.46667  74.4%   9.4  115s
 376967 283739   26.49167   36   16   72.00000   18.48889  74.3%   9.4  120s
 393354 295878   68.54167   87   32   72.00000   18.58333  74.2%   9.4  125s
 409972 308370   52.83509   66   19   72.00000   18.68333  74.1%   9.3  130s
 425557 320150   69.31508   95   16   72.00000   18.73333  74.0%   9.4  135s
 441708 332221   57.58625   67   44   72.00000   18.80000  73.9%   9.4  140s
 453507 341082   32.05000   47   16   72.00000   18.83636  73.8%   9.4  145s
 468287 351795   62.21403   88   17   72.00000   18.88333  73.8%   9.4  150s
 483869 363315 infeasible   68        72.00000   18.95000  73.7%   9.4  155s
 497637 373332   47.86061   59   17   72.00000   19.00000  73.6%   9.4  160s
 513768 385273   33.91379   44   14   72.00000   19.03333  73.6%   9.4  165s
 528695 396328   68.28678   85   25   72.00000   19.06667  73.5%   9.4  170s
 543190 407071   69.02444   85   29   72.00000   19.10000  73.5%   9.4  175s
 558939 418694   37.68485   46   18   72.00000   19.13333  73.4%   9.4  180s
 579300 433684   65.64905   92   13   72.00000   19.20000  73.3%   9.4  185s
 594596 444921   65.10833   65   42   72.00000   19.23889  73.3%   9.4  190s
 613534 458819   28.43199   36   21   72.00000   19.28462  73.2%   9.5  195s
 633027 473123   66.42000   88   21   72.00000   19.35556  73.1%   9.5  200s
 650163 485972   54.48222   61   22   72.00000   19.38333  73.1%   9.5  205s
 669985 500469   30.31852   43   13   72.00000   19.43333  73.0%   9.5  210s
 690766 515442   38.80000   52   21   72.00000   19.46667  73.0%   9.5  215s
 707169 527753   59.30952   85   13   72.00000   19.48986  72.9%   9.5  220s
 720964 538017   63.64940   76   35   72.00000   19.53333  72.9%   9.5  225s
 736804 549606   27.31250   36   13   72.00000   19.58182  72.8%   9.5  230s
 754487 562672   52.00000   66   16   72.00000   19.62778  72.7%   9.5  235s
 768730 572945   66.51699   84   20   72.00000   19.68333  72.7%   9.5  240s
 785002 585152 infeasible   57        72.00000   19.71667  72.6%   9.5  245s
 801495 597432 infeasible   92        72.00000   19.73889  72.6%   9.5  250s
 817827 609465   50.94667   59   24   72.00000   19.78047  72.5%   9.5  255s
 837698 624248   44.18333   53   21   72.00000   19.80255  72.5%   9.4  260s
 854834 636703   68.15465   79   32   72.00000   19.85238  72.4%   9.4  265s
 870817 648351     cutoff   99        72.00000   19.86667  72.4%   9.4  270s
 889604 662206 infeasible   68        72.00000   19.91111  72.3%   9.4  275s
 906480 674708   20.18333   27   18   72.00000   19.94545  72.3%   9.4  280s
 926172 688951 infeasible   57        72.00000   19.96970  72.3%   9.4  285s
 946636 704009   46.32281   66   16   72.00000   20.00833  72.2%   9.4  290s
 963563 716491   45.18278   51   20   72.00000   20.03333  72.2%   9.4  295s
 981042 729388   69.23333   86   17   72.00000   20.05106  72.2%   9.4  300s
 1001208 744051   27.48533   37   13   72.00000   20.07222  72.1%   9.4  305s
 1018654 756614   43.32500   54   16   72.00000   20.10000  72.1%   9.4  310s
H1027326 758731                      71.0000000   20.11250  71.7%   9.4  313s
H1028963 753271                      70.0000000   20.11659  71.3%   9.4  314s
H1028964 734769                      68.0000000   20.11659  70.4%   9.4  314s
 1029618 735221   32.20000   41   21   68.00000   20.11667  70.4%   9.4  315s
 1048677 748903   49.75000   52   24   68.00000   20.13810  70.4%   9.5  320s
 1066317 761741   48.93333   60   26   68.00000   20.18333  70.3%   9.5  325s
 1080371 772003   30.22500   45   12   68.00000   20.21111  70.3%   9.5  330s
 1095730 783221 infeasible   61        68.00000   20.23175  70.2%   9.5  335s
 1111721 794629   32.04694   42   17   68.00000   20.26667  70.2%   9.5  340s
 1128324 806371   41.15556   52   21   68.00000   20.28750  70.2%   9.4  345s
 1142741 816651   47.83333   47   26   68.00000   20.30000  70.1%   9.5  350s
 1159900 828793   45.74545   64   15   68.00000   20.33987  70.1%   9.5  355s
 1173048 838531   65.98849   80   19   68.00000   20.36667  70.0%   9.5  360s
 1188388 849792   33.26111   43   19   68.00000   20.38333  70.0%   9.5  365s
 1198239 857066   41.98889   46   23   68.00000   20.38333  70.0%   9.5  370s
 1208386 864259   47.80000   58   23   68.00000   20.40000  70.0%   9.5  375s
 1223047 874727   65.69333   77   21   68.00000   20.42879  70.0%   9.5  380s
 1236419 884424   30.91265   37   27   68.00000   20.45000  69.9%   9.5  385s
 1249616 894120   42.10556   53   18   68.00000   20.46667  69.9%   9.5  390s
 1265670 905833   52.92411   71   17   68.00000   20.46667  69.9%   9.5  395s
 1281455 917421   49.46172   63   16   68.00000   20.48889  69.9%   9.5  400s
 1297748 929027   34.54167   44   16   68.00000   20.51667  69.8%   9.5  405s
 1315008 941531   26.08000   36   15   68.00000   20.54899  69.8%   9.5  410s
 1327567 950665   25.98333   36   12   68.00000   20.55455  69.8%   9.5  415s
 1338020 958149 infeasible   37        68.00000   20.56667  69.8%   9.5  420s
 1353765 969320   61.20000   81   23   68.00000   20.60000  69.7%   9.5  425s
 1366705 978647 infeasible   95        68.00000   20.61667  69.7%   9.5  430s
 1380982 989021   21.69444   29   16   68.00000   20.63333  69.7%   9.5  435s
 1396205 1000097   52.06275   72   13   68.00000   20.65648  69.6%   9.4  440s
 1416901 1014852   40.51954   49   20   68.00000   20.69444  69.6%   9.4  445s
 1429133 1023861 infeasible   87        68.00000   20.70000  69.6%   9.4  450s
 1446554 1036397 infeasible   97        68.00000   20.71667  69.5%   9.4  455s
 1462644 1048004   56.15593   67   19   68.00000   20.73333  69.5%   9.4  460s
 1473433 1055876 infeasible   69        68.00000   20.73333  69.5%   9.4  465s
 1487413 1066002   55.02222   60   15   68.00000   20.76035  69.5%   9.4  470s
 1502684 1077235   36.49722   46   20   68.00000   20.76869  69.5%   9.4  475s
 1515990 1086827   45.91667   55   14   68.00000   20.79167  69.4%   9.4  480s
 1529405 1096544   62.21667   72   24   68.00000   20.80000  69.4%   9.4  485s
 1544507 1107775   44.15818   61   11   68.00000   20.80000  69.4%   9.4  490s
 1553092 1113811   52.41533   54   21   68.00000   20.81667  69.4%   9.4  495s
 1568725 1125050   21.86970   31   13   68.00000   20.83333  69.4%   9.4  500s
 1585180 1136935   21.85202   33   14   68.00000   20.85606  69.3%   9.4  505s
 1600202 1148049   66.41667   84   20   68.00000   20.86667  69.3%   9.4  510s
 1614161 1158287   29.09167   37   16   68.00000   20.88333  69.3%   9.4  515s
 1629106 1168950 infeasible   82        68.00000   20.90000  69.3%   9.4  520s
 1642624 1178814   45.67208   56   22   68.00000   20.91667  69.2%   9.4  525s
 1659359 1190980   65.46399   95   11   68.00000   20.93333  69.2%   9.4  530s
 1670707 1199119 infeasible   42        68.00000   20.95000  69.2%   9.4  535s
 1682823 1207907 infeasible   71        68.00000   20.96250  69.2%   9.4  540s
 1700019 1220504 infeasible   51        68.00000   20.96667  69.2%   9.4  545s
 1715965 1231789   34.73247   44   21   68.00000   20.98333  69.1%   9.4  550s
 1730181 1242083   52.96275   58   24   68.00000   21.00000  69.1%   9.4  555s
 1742217 1250734   37.01377   49   16   68.00000   21.01364  69.1%   9.4  560s
 1759529 1263465   36.86667   51   14   68.00000   21.02899  69.1%   9.4  565s
 1775918 1275178   24.77619   34   16   68.00000   21.04583  69.1%   9.4  570s
 1784563 1281415   58.51273   73   17   68.00000   21.05000  69.0%   9.4  575s
 1800067 1292836   58.07187   75   25   68.00000   21.05556  69.0%   9.4  580s
 1815478 1304065   50.23333   56   24   68.00000   21.06667  69.0%   9.4  585s
 1831458 1315647   44.08137   59   12   68.00000   21.08201  69.0%   9.4  590s
 1844989 1325630   53.10396   81   12   68.00000   21.10000  69.0%   9.4  595s
 1855906 1333885   51.06190   64   16   68.00000   21.11111  69.0%   9.4  600s
 1867382 1342048   27.81143   38   15   68.00000   21.11667  68.9%   9.4  605s
 1880016 1351358   64.32184   74   24   68.00000   21.13030  68.9%   9.4  610s
 1894507 1361844 infeasible   58        68.00000   21.13333  68.9%   9.4  615s
 1910439 1373285     cutoff   84        68.00000   21.15000  68.9%   9.4  620s
 1927079 1385232   51.89556   73   10   68.00000   21.16667  68.9%   9.4  625s
 1939736 1394335   60.02758   79   16   68.00000   21.18571  68.8%   9.4  630s
 1955436 1405664   50.72000   63   21   68.00000   21.20000  68.8%   9.4  635s
 1971405 1417196   47.50000   62   20   68.00000   21.21429  68.8%   9.4  640s
 1984096 1426352   24.35303   37   15   68.00000   21.21667  68.8%   9.4  645s
 1995373 1434642   66.37778   77   23   68.00000   21.22500  68.8%   9.4  650s
 2011025 1445823   60.07641   67   26   68.00000   21.23788  68.8%   9.4  655s
 2027794 1457675 infeasible   68        68.00000   21.25833  68.7%   9.4  660s
 2040255 1466567 infeasible   62        68.00000   21.26667  68.7%   9.4  665s
 2053148 1475881   31.98907   40   18   68.00000   21.28148  68.7%   9.4  670s
 2068125 1486621   46.23333   56   13   68.00000   21.29394  68.7%   9.4  675s
 2083696 1497715   63.69138   81   17   68.00000   21.30000  68.7%   9.4  680s
 2097055 1507473   65.40980   93   17   68.00000   21.31176  68.7%   9.4  685s
 2109690 1516675   54.63920   64   31   68.00000   21.33056  68.6%   9.4  690s
 2125844 1527984   30.60000   40   14   68.00000   21.35000  68.6%   9.4  695s
 2142450 1540191 infeasible   64        68.00000   21.36667  68.6%   9.4  700s
 2156095 1550119   54.43333   63   30   68.00000   21.38164  68.6%   9.4  705s
 2173032 1562459   37.73889   53   14   68.00000   21.38333  68.6%   9.4  710s
 2189651 1574236   35.49048   48   14   68.00000   21.39848  68.5%   9.4  715s
 2204040 1584849   57.53333   71   19   68.00000   21.40000  68.5%   9.4  720s
 2218223 1595307     cutoff   93        68.00000   21.40606  68.5%   9.4  725s
 2233732 1606424   43.39865   50   28   68.00000   21.42500  68.5%   9.4  730s
 2249777 1617891   47.22057   56   36   68.00000   21.44444  68.5%   9.4  735s
 2261640 1626499   51.60430   61   22   68.00000   21.45000  68.5%   9.4  740s
 2277768 1637976   52.30496   76   13   68.00000   21.46667  68.4%   9.4  745s
 2291434 1647941   52.98667   65   19   68.00000   21.46667  68.4%   9.4  750s
 2302857 1656062   47.90361   58   24   68.00000   21.46667  68.4%   9.4  755s
 2311498 1662402   64.78788   68   26   68.00000   21.46667  68.4%   9.4  760s
 2328354 1674487   44.22672   56   18   68.00000   21.46667  68.4%   9.4  765s
 2344614 1686376   65.00000   96   13   68.00000   21.48333  68.4%   9.4  770s
 2361295 1698391   56.72500   66   30   68.00000   21.50000  68.4%   9.4  775s
 2377523 1709744   63.10000   80   29   68.00000   21.51667  68.4%   9.4  780s
 2393337 1721128   61.92727   67   22   68.00000   21.53333  68.3%   9.4  785s
 2404668 1729144   37.06149   50   15   68.00000   21.54167  68.3%   9.4  790s
 2421337 1741079 infeasible   78        68.00000   21.55000  68.3%   9.4  795s
 2437360 1752694   30.23333   43   13   68.00000   21.55076  68.3%   9.4  800s
 2450120 1761776   29.86126   40   15   68.00000   21.55926  68.3%   9.4  805s
 2462741 1770969   41.08889   57   14   68.00000   21.56667  68.3%   9.4  810s
 2473377 1778583   47.55000   52   15   68.00000   21.57500  68.3%   9.4  815s
 2488000 1788850   56.55333   66   23   68.00000   21.58333  68.3%   9.4  820s
 2497260 1795400   36.73419   42   17   68.00000   21.59744  68.2%   9.4  825s
 2510480 1805083   48.82848   66   12   68.00000   21.60000  68.2%   9.4  830s
 2524713 1815353   55.75407   74   24   68.00000   21.61458  68.2%   9.4  835s
 2539298 1825717   25.72500   39   12   68.00000   21.62500  68.2%   9.4  840s
 2552714 1835490   58.12500   79   10   68.00000   21.63333  68.2%   9.4  845s
 2561235 1841603   52.47500   70   15   68.00000   21.63333  68.2%   9.4  850s
 2575624 1851966   24.79167   33   17   68.00000   21.64697  68.2%   9.4  855s
 2589909 1862026   50.81642   75   12   68.00000   21.65370  68.2%   9.4  860s
 2606037 1873504   37.06760   54   13   68.00000   21.66739  68.1%   9.4  865s
 2619385 1883165   64.11667   90   15   68.00000   21.68333  68.1%   9.4  870s
 2634958 1894391   36.31036   46   15   68.00000   21.69722  68.1%   9.4  875s
 2650037 1905124   26.10000   33   15   68.00000   21.70000  68.1%   9.4  880s
 2665596 1916211   65.61839   83   19   68.00000   21.70725  68.1%   9.4  885s
 2681719 1927602   50.40000   64   16   68.00000   21.71667  68.1%   9.4  890s
 2700460 1941070   57.92778   80   14   68.00000   21.73030  68.0%   9.4  895s
 2710609 1948192   34.60000   41   15   68.00000   21.73333  68.0%   9.4  900s
 2722309 1956424   27.81481   39   12   68.00000   21.73333  68.0%   9.4  905s
 2737020 1966860 infeasible   85        68.00000   21.74259  68.0%   9.4  910s
 2751024 1976866   46.65781   57   17   68.00000   21.75000  68.0%   9.4  915s
 2762050 1984869 infeasible   67        68.00000   21.76364  68.0%   9.4  920s
 2771365 1991718   34.66000   45   16   68.00000   21.76667  68.0%   9.4  925s
 2783059 2000202   66.46667   78   25   68.00000   21.76944  68.0%   9.4  930s
 2796465 2009861 infeasible   67        68.00000   21.78333  68.0%   9.4  935s
 2806453 2016807   65.11703   92   18   68.00000   21.78611  68.0%   9.4  940s
 2818066 2024966   22.76528   34   13   68.00000   21.79861  67.9%   9.4  945s
 2831796 2034900   57.00000   69   25   68.00000   21.80000  67.9%   9.4  950s
 2846155 2045176   28.52222   39   17   68.00000   21.80000  67.9%   9.4  955s
 2857755 2053534 infeasible   93        68.00000   21.80441  67.9%   9.4  960s
 2874272 2064916 infeasible   64        68.00000   21.81667  67.9%   9.4  965s
 2890158 2076243   23.54242   34   17   68.00000   21.82895  67.9%   9.4  970s
 2905739 2087141   59.93030   92   12   68.00000   21.83864  67.9%   9.4  975s
 2916817 2094774   24.84615   35   14   68.00000   21.84615  67.9%   9.4  980s
 2930897 2104687   32.15880   40   25   68.00000   21.85648  67.9%   9.4  985s
 2944341 2114175   31.31250   40   16   68.00000   21.86667  67.8%   9.4  990s
 2959718 2125055   23.89231   32   15   68.00000   21.87083  67.8%   9.4  995s
 2972394 2134210   50.36000   62   15   68.00000   21.88333  67.8%   9.4 1000s
 2987604 2144999   40.86164   54   16   68.00000   21.88800  67.8%   9.4 1005s
 3002673 2155405   47.35833   51   28   68.00000   21.90000  67.8%   9.4 1010s
 3017171 2165529   33.24368   45   18   68.00000   21.90000  67.8%   9.4 1015s
 3026435 2172135   37.58333   55   13   68.00000   21.91111  67.8%   9.4 1020s
 3041141 2182397   64.43551   73   22   68.00000   21.92143  67.8%   9.4 1025s
 3056961 2193429   61.93333   75   26   68.00000   21.93333  67.7%   9.4 1030s
 3069731 2202473   53.83210   69   25   68.00000   21.93427  67.7%   9.4 1035s
 3086559 2214335   66.67440   91   23   68.00000   21.94872  67.7%   9.4 1040s
 3099775 2223502   40.03333   51   25   68.00000   21.95238  67.7%   9.4 1045s
 3116034 2235254   65.25833   75   36   68.00000   21.96515  67.7%   9.4 1051s
 3126287 2242512   38.23382   47   21   68.00000   21.96667  67.7%   9.4 1055s
 3142944 2254530   33.18182   42   14   68.00000   21.96667  67.7%   9.4 1060s
 3159783 2266400   38.85714   51   15   68.00000   21.97500  67.7%   9.4 1065s
 3171251 2274359 infeasible   78        68.00000   21.98333  67.7%   9.4 1070s
 3182504 2282089   41.88333   45   28   68.00000   21.98636  67.7%   9.4 1075s
 3195667 2291243 infeasible   63        68.00000   21.99722  67.7%   9.4 1080s
 3212041 2302919   53.01552   68   21   68.00000   22.00000  67.6%   9.4 1085s
 3227470 2313934 infeasible   92        68.00000   22.01111  67.6%   9.4 1090s
 3240295 2322890   55.10000   65   16   68.00000   22.02381  67.6%   9.4 1095s
 3255689 2333757   50.58976   74   13   68.00000   22.03333  67.6%   9.4 1100s
 3267417 2342076   53.27849   68   13   68.00000   22.03333  67.6%   9.4 1105s
 3281030 2351833 infeasible   82        68.00000   22.04167  67.6%   9.4 1110s
 3294329 2361334   65.27685   88    7   68.00000   22.05000  67.6%   9.4 1115s
 3306570 2370132   42.59956   60   13   68.00000   22.05000  67.6%   9.4 1120s
 3322765 2381605 infeasible   72        68.00000   22.05000  67.6%   9.4 1125s
 3337637 2392283   23.15488   34   14   68.00000   22.05455  67.6%   9.4 1130s
 3354557 2404244   57.90000   70   35   68.00000   22.06667  67.5%   9.4 1135s
 3363767 2410687   49.82222   70   15   68.00000   22.06667  67.5%   9.4 1140s
 3379627 2421885   65.13542   71   28   68.00000   22.06667  67.5%   9.4 1145s
 3395736 2433322   60.27248   71   22   68.00000   22.08333  67.5%   9.4 1150s
 3409983 2443342   64.75059   75   23   68.00000   22.09444  67.5%   9.4 1155s
 3425269 2454213   23.72366   35   16   68.00000   22.10000  67.5%   9.4 1160s
 3441755 2466016   64.31646   94   14   68.00000   22.11111  67.5%   9.4 1165s
 3457650 2477183   62.67500   65   21   68.00000   22.11667  67.5%   9.4 1171s
 3470443 2486121     cutoff   87        68.00000   22.12500  67.5%   9.4 1175s
 3485708 2496918   27.70000   36   16   68.00000   22.13333  67.5%   9.4 1180s
 3500390 2507406   39.29792   58   19   68.00000   22.13333  67.5%   9.4 1185s
 3514113 2517159   33.06818   44   20   68.00000   22.13454  67.4%   9.4 1190s
 3532976 2530463   63.48222   80   17   68.00000   22.15000  67.4%   9.4 1195s
 3544423 2538482   58.91939   81   21   68.00000   22.15714  67.4%   9.4 1200s
 3559106 2548608   65.92121   92   18   68.00000   22.16667  67.4%   9.4 1205s
H3570949 2536491                      67.0000000   22.17778  66.9%   9.4 1210s
 3581985 2544219   51.56389   52   27   67.00000   22.18333  66.9%   9.4 1215s
 3596489 2554169   60.05054   81   15   67.00000   22.19556  66.9%   9.4 1220s
 3610141 2563747   35.73561   44   18   67.00000   22.20000  66.9%   9.4 1225s
 3626399 2575384   65.07872   82   20   67.00000   22.21061  66.8%   9.4 1230s
 3641635 2586387   26.51528   34   15   67.00000   22.21667  66.8%   9.4 1235s
 3654554 2595466   32.41880   50   16   67.00000   22.21667  66.8%   9.4 1240s
 3670227 2606480   31.62207   46   14   67.00000   22.22175  66.8%   9.4 1245s
 3685725 2617471   28.60000   38   15   67.00000   22.23030  66.8%   9.4 1250s
 3703400 2629919   34.26566   47   14   67.00000   22.23333  66.8%   9.4 1255s
 3714988 2638369   43.87024   62   18   67.00000   22.24167  66.8%   9.4 1260s
 3732083 2650283   64.97500   75   16   67.00000   22.25000  66.8%   9.4 1265s
 3747452 2661054   49.62675   61   17   67.00000   22.26343  66.8%   9.4 1270s
 3762251 2671298   54.71773   72   19   67.00000   22.26667  66.8%   9.4 1275s
 3778600 2682896   29.99722   40   19   67.00000   22.27879  66.7%   9.4 1280s
 3793458 2693317   33.51667   44   23   67.00000   22.28333  66.7%   9.4 1285s
 3809069 2704050 infeasible   32        67.00000   22.29474  66.7%   9.4 1290s
 3821003 2712397     cutoff   92        67.00000   22.30000  66.7%   9.4 1295s
 3837156 2723807 infeasible   58        67.00000   22.30000  66.7%   9.4 1300s
 3853038 2734983 infeasible   47        67.00000   22.31212  66.7%   9.4 1305s
 3869332 2746386   31.45833   40   17   67.00000   22.32500  66.7%   9.4 1310s
 3882048 2755150   40.40952   55   10   67.00000   22.33333  66.7%   9.4 1315s
 3900359 2768025   48.77895   49   22   67.00000   22.34697  66.6%   9.4 1320s
 3916853 2779743   65.19155   82   16   67.00000   22.35385  66.6%   9.4 1325s
 3930556 2789396   65.86984   92   25   67.00000   22.36212  66.6%   9.4 1330s
 3945327 2799752   58.80426   75   23   67.00000   22.36667  66.6%   9.4 1335s
 3958357 2808418   45.02222   65   15   67.00000   22.37879  66.6%   9.4 1340s
 3971112 2817297   64.07709   52   28   67.00000   22.38333  66.6%   9.4 1345s
 3984883 2826955   28.43384   38   21   67.00000   22.38333  66.6%   9.4 1350s
 4001527 2838556   58.77828   67   20   67.00000   22.38333  66.6%   9.4 1355s
 4017920 2850315   64.67946   95   16   67.00000   22.39697  66.6%   9.4 1360s
 4030571 2859177   55.04848   77   17   67.00000   22.40000  66.6%   9.4 1365s
 4047139 2870843   23.42778   31   16   67.00000   22.40000  66.6%   9.4 1370s
 4067105 2884988   56.42928   65   17   67.00000   22.40000  66.6%   9.4 1375s
 4081944 2895438   25.70000   33   17   67.00000   22.41111  66.6%   9.4 1380s
 4097044 2905871     cutoff   61        67.00000   22.42399  66.5%   9.4 1385s
 4109786 2914765   43.37319   58   13   67.00000   22.43287  66.5%   9.4 1390s
 4125061 2925523   55.67153   61   23   67.00000   22.44091  66.5%   9.4 1395s
 4138563 2934760 infeasible   82        67.00000   22.44872  66.5%   9.4 1400s
 4155951 2947328   37.90000   56   12   67.00000   22.45000  66.5%   9.4 1405s
 4168370 2956192     cutoff   91        67.00000   22.45455  66.5%   9.4 1410s
 4186202 2968555 infeasible   86        67.00000   22.46667  66.5%   9.4 1415s
 4197486 2976459   47.87692   63   16   67.00000   22.46667  66.5%   9.4 1420s
 4213601 2987779   34.36667   45   23   67.00000   22.46667  66.5%   9.4 1425s
 4224975 2995774 infeasible   62        67.00000   22.46667  66.5%   9.4 1430s
 4240049 3006416   24.98403   34   15   67.00000   22.46667  66.5%   9.4 1435s
 4257697 3018884   27.87619   36   18   67.00000   22.46667  66.5%   9.4 1440s
 4273804 3030258   63.46662   83   26   67.00000   22.46667  66.5%   9.4 1445s
 4286128 3038973   53.08925   68   12   67.00000   22.47361  66.5%   9.4 1450s
 4301260 3049781     cutoff   81        67.00000   22.48224  66.4%   9.4 1455s
 4317685 3061249   64.15417   68   18   67.00000   22.48889  66.4%   9.4 1460s
 4331917 3070957   27.83333   36   13   67.00000   22.49444  66.4%   9.4 1465s
 4350795 3084190   24.10909   33   15   67.00000   22.50000  66.4%   9.4 1470s
 4364663 3093860   28.41458   39   13   67.00000   22.50833  66.4%   9.4 1475s
 4380509 3105073   63.93624   77   23   67.00000   22.51208  66.4%   9.4 1480s
 4397622 3117047   53.75699   76   18   67.00000   22.52222  66.4%   9.4 1485s
 4413629 3128074   44.70667   66   20   67.00000   22.53333  66.4%   9.4 1490s
 4429196 3138877   33.22000   44   12   67.00000   22.54167  66.4%   9.4 1495s
 4442757 3148204   65.06182   93   11   67.00000   22.54848  66.3%   9.4 1500s
 4450928 3153872   46.13333   58   22   67.00000   22.55000  66.3%   9.4 1505s
 4466043 3164556   55.55246   58   31   67.00000   22.55000  66.3%   9.4 1510s
 4482969 3176359     cutoff   93        67.00000   22.55455  66.3%   9.4 1515s
 4495810 3185340 infeasible   87        67.00000   22.56061  66.3%   9.4 1520s
 4507704 3193739   48.09755   60   14   67.00000   22.56667  66.3%   9.4 1525s
 4526254 3206851   48.23333   68   13   67.00000   22.56667  66.3%   9.4 1530s
 4543782 3218952   23.06667   34   15   67.00000   22.57222  66.3%   9.4 1535s
 4557912 3228977   55.18067   71   23   67.00000   22.57898  66.3%   9.4 1540s
 4574499 3240624   35.60000   40   16   67.00000   22.58333  66.3%   9.4 1545s
 4590112 3251636   38.22222   42   31   67.00000   22.59167  66.3%   9.4 1550s
 4604780 3262054   33.05000   53   12   67.00000   22.60000  66.3%   9.4 1555s
 4617944 3271376   24.31212   36   13   67.00000   22.60000  66.3%   9.4 1560s
 4635480 3283553   23.91061   33   15   67.00000   22.60484  66.3%   9.4 1565s
 4650981 3294524   37.17500   47   16   67.00000   22.61667  66.2%   9.4 1570s
 4664503 3304102 infeasible   54        67.00000   22.62069  66.2%   9.4 1575s
 4679032 3314451   55.19677   81   17   67.00000   22.62576  66.2%   9.4 1580s
 4690142 3321998   24.54242   32   17   67.00000   22.63333  66.2%   9.4 1585s
 4699841 3328845   47.56226   49   29   67.00000   22.63333  66.2%   9.4 1590s
 4712351 3337514   63.03000   84   20   67.00000   22.63333  66.2%   9.4 1595s
 4723302 3345075 infeasible   43        67.00000   22.63333  66.2%   9.4 1600s
 4735040 3353379 infeasible   52        67.00000   22.63333  66.2%   9.4 1605s
 4744620 3360135   44.64167   52   24   67.00000   22.64275  66.2%   9.4 1610s
 4760109 3370871   49.57500   65   11   67.00000   22.65000  66.2%   9.4 1615s
 4777716 3383227   64.76239   77   20   67.00000   22.65309  66.2%   9.4 1620s
 4793358 3394123   43.84686   60   19   67.00000   22.66364  66.2%   9.4 1625s
 4806072 3402787   45.26667   57   18   67.00000   22.66667  66.2%   9.4 1630s
 4819669 3411958   23.49444   32   22   67.00000   22.67424  66.2%   9.4 1635s
 4832566 3421078   36.40736   47   14   67.00000   22.68000  66.1%   9.4 1640s
 4846705 3431044 infeasible   73        67.00000   22.68485  66.1%   9.4 1645s
 4863664 3442737   44.43125   54   24   67.00000   22.69444  66.1%   9.4 1650s
 4878036 3452682   64.85051   92   20   67.00000   22.70000  66.1%   9.4 1655s
 4889380 3460608   65.43574   96   20   67.00000   22.70000  66.1%   9.4 1660s
 4904356 3471422 infeasible   76        67.00000   22.70000  66.1%   9.4 1665s
 4918415 3481307 infeasible   65        67.00000   22.70833  66.1%   9.4 1670s
 4933040 3491640   48.17037   61   19   67.00000   22.71667  66.1%   9.4 1675s
 4948639 3502733   57.95278   67   31   67.00000   22.71667  66.1%   9.4 1680s
 4965434 3514623   24.01869   35   14   67.00000   22.72500  66.1%   9.4 1685s
 4981681 3525892   63.12500   84   27   67.00000   22.73030  66.1%   9.4 1690s
 4997527 3537001   41.40000   57   17   67.00000   22.73333  66.1%   9.4 1695s
 5009757 3545507   35.20000   39   25   67.00000   22.73333  66.1%   9.4 1700s
 5024190 3555408   64.85312   86   18   67.00000   22.73875  66.1%   9.4 1705s
 5040048 3566454   28.86667   41   15   67.00000   22.74507  66.1%   9.4 1710s
 5054463 3576689   45.64722   62   17   67.00000   22.75000  66.0%   9.4 1715s
 5070903 3588430 infeasible   56        67.00000   22.75833  66.0%   9.4 1720s
 5085945 3598845   36.53333   51   19   67.00000   22.76533  66.0%   9.4 1725s
 5100399 3609092 infeasible   65        67.00000   22.76667  66.0%   9.4 1730s
 5111335 3616835   37.01818   61   17   67.00000   22.77121  66.0%   9.4 1735s
 5126163 3627297 infeasible   51        67.00000   22.77778  66.0%   9.4 1740s
 5141144 3637820     cutoff   70        67.00000   22.78333  66.0%   9.4 1745s
 5157594 3649201   35.66762   50   13   67.00000   22.79167  66.0%   9.4 1750s
 5170009 3657880   59.83252   69   19   67.00000   22.79861  66.0%   9.4 1755s
 5187947 3670348   56.25152   82   17   67.00000   22.80000  66.0%   9.4 1760s
 5205710 3682707 infeasible   62        67.00000   22.80000  66.0%   9.4 1765s
 5220641 3693303   28.66111   39   17   67.00000   22.80000  66.0%   9.4 1770s
 5234168 3702890 infeasible   70        67.00000   22.80000  66.0%   9.4 1775s
 5244023 3710028   26.25000   34   17   67.00000   22.80000  66.0%   9.4 1780s
 5257323 3719267   57.83979   68   24   67.00000   22.80833  66.0%   9.4 1785s
 5273806 3730771   53.18406   67   19   67.00000   22.81333  66.0%   9.4 1790s
 5286181 3739401 infeasible   73        67.00000   22.81667  65.9%   9.4 1795s
 5299771 3748939   63.44130   70   31   67.00000   22.81944  65.9%   9.4 1800s

Explored 5300055 nodes (49840636 simplex iterations) in 1800.03 seconds
Thread count was 16 (of 16 available processors)

Solution count 8: 67 68 70 ... 77

Time limit reached
Best objective 6.700000000000e+01, best bound 2.300000000000e+01, gap 65.6716%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    988.7 MiB    988.7 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    988.7 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    988.7 MiB      0.0 MiB       m2 = m.construct()
    28    988.7 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    988.7 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    988.7 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    988.7 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    988.7 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    988.7 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    988.7 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    988.7 MiB      0.0 MiB       m2.update()
    44    988.7 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    988.7 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    988.7 MiB      0.0 MiB       if(set_binary):
    51    988.7 MiB      0.0 MiB           for x in set_binary:
    52    988.7 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    988.7 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   4436.1 MiB   3447.5 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   4436.1 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   4436.1 MiB      0.0 MiB       j = 0
    69   4436.1 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   4436.1 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   4436.1 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   4436.1 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   4436.1 MiB      0.0 MiB       if m2.status == 9:
    78   4436.1 MiB      0.0 MiB           result.timeout = True
    79   4436.1 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   4436.1 MiB      0.0 MiB           result.solution = True
    81   4436.1 MiB      0.0 MiB           result.feasible = True
    82   4436.1 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   4436.1 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   4436.1 MiB      0.0 MiB           for v in current_vars:
    85   4436.1 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   4436.1 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   4436.1 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   4436.1 MiB      0.0 MiB                   j = j+1
    91                             
    92   4436.1 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 01:24:06 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.tra,lab' -mdp /tmp/tmphb9k4upu

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.8999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmphb9k4upu"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.027 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      69 (1 initial)
Transitions: 147
Choices:     132

Transition matrix: 281 nodes (3 terminal), 147 minterms, vars: 7r/7c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 68, no = 1, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.006 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   1.000000e+00   0.000000e+00      0s
     565    1.9300000e+02   0.000000e+00   0.000000e+00      0s

Solved in 565 iterations and 0.03 seconds
Optimal objective  1.930000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1763.9 MiB   1763.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1763.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1763.9 MiB      0.0 MiB       m2 = m.construct()
    28   1763.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1763.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1763.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1763.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1763.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1763.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1763.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1763.9 MiB      0.0 MiB       m2.update()
    44   1763.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1763.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1763.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1763.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1763.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1763.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1763.9 MiB      0.0 MiB       j = 0
    69   1763.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1763.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1763.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1763.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1763.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1763.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1763.9 MiB      0.0 MiB           result.solution = True
    81   1763.9 MiB      0.0 MiB           result.feasible = True
    82   1763.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1763.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1763.9 MiB      0.0 MiB           for v in current_vars:
    85   1763.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1763.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1763.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1763.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1763.9 MiB      0.0 MiB       return result, res_vec



subsystem size:198

probability: 0.9999999999999999
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 01:24:07 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.tra,lab' -mdp /tmp/tmpzmlef_rg

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpzmlef_rg"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 79 iterations in 0.00 seconds (average 0.000051, setup 0.00)

Time for model construction: 0.037 seconds.

Warning: Deadlocks detected and fixed in 1 states

Type:        MDP
States:      199 (1 initial)
Transitions: 246
Choices:     199

Transition matrix: 500 nodes (3 terminal), 246 minterms, vars: 8r/8c/1nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 199, no = 0, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.006 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   1.000000e+00   0.000000e+00      0s
     565    1.9300000e+02   0.000000e+00   0.000000e+00      0s

Solved in 565 iterations and 0.03 seconds
Optimal objective  1.930000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1763.9 MiB   1763.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1763.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1763.9 MiB      0.0 MiB       m2 = m.construct()
    28   1763.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1763.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1763.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1763.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1763.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1763.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1763.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1763.9 MiB      0.0 MiB       m2.update()
    44   1763.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1763.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1763.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1763.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1763.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1763.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1763.9 MiB      0.0 MiB       j = 0
    69   1763.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1763.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1763.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1763.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1763.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1763.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1763.9 MiB      0.0 MiB           result.solution = True
    81   1763.9 MiB      0.0 MiB           result.feasible = True
    82   1763.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1763.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1763.9 MiB      0.0 MiB           for v in current_vars:
    85   1763.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1763.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1763.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1763.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1763.9 MiB      0.0 MiB       return result, res_vec



subsystem size:198

probability: 0.9999999999999999
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e-01, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 80 rows and 352 columns
Presolve time: 0.00s
Presolved: 449 rows, 704 columns, 1596 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    0.0000000e+00   1.000000e+00   0.000000e+00      0s
     180    1.9800000e+02   0.000000e+00   0.000000e+00      0s

Solved in 180 iterations and 0.01 seconds
Optimal objective  1.980000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1763.9 MiB   1763.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1763.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1763.9 MiB      0.0 MiB       m2 = m.construct()
    28   1763.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1763.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1763.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1763.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1763.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1763.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1763.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1763.9 MiB      0.0 MiB       m2.update()
    44   1763.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1763.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1763.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1763.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1763.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1763.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1763.9 MiB      0.0 MiB       j = 0
    69   1763.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1763.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1763.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1763.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1763.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1763.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1763.9 MiB      0.0 MiB           result.solution = True
    81   1763.9 MiB      0.0 MiB           result.feasible = True
    82   1763.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1763.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1763.9 MiB      0.0 MiB           for v in current_vars:
    85   1763.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1763.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1763.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1763.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1763.9 MiB      0.0 MiB       return result, res_vec



subsystem size:198

probability: 1.0
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 01:24:09 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.tra,lab' -mdp /tmp/tmpf_k7xrde

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpf_k7xrde"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 79 iterations in 0.00 seconds (average 0.000051, setup 0.00)

Time for model construction: 0.037 seconds.

Warning: Deadlocks detected and fixed in 1 states

Type:        MDP
States:      199 (1 initial)
Transitions: 246
Choices:     199

Transition matrix: 500 nodes (3 terminal), 246 minterms, vars: 8r/8c/1nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Prob1E: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 199, no = 0, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.006 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 529 rows, 1056 columns and 1756 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 287 rows and 572 columns
Presolve time: 0.00s
Presolved: 242 rows, 484 columns, 1076 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0   -8.0800000e+32   1.800000e+32   8.080000e+02      0s
     517   -2.4400000e+02   0.000000e+00   0.000000e+00      0s

Solved in 517 iterations and 0.01 seconds
Optimal objective -2.440000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1763.9 MiB   1763.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1763.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1763.9 MiB      0.0 MiB       m2 = m.construct()
    28   1763.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1763.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1763.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1763.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1763.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1763.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1763.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1763.9 MiB      0.0 MiB       m2.update()
    44   1763.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1763.9 MiB      0.0 MiB       if(zero_vars):
    47   1763.9 MiB      0.0 MiB           for x in zero_vars:
    48   1763.9 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1763.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1763.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1763.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1763.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1763.9 MiB      0.0 MiB       j = 0
    69   1763.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1763.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1763.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1763.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1763.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1763.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1763.9 MiB      0.0 MiB           result.solution = True
    81   1763.9 MiB      0.0 MiB           result.feasible = True
    82   1763.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1763.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1763.9 MiB      0.0 MiB           for v in current_vars:
    85   1763.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1763.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1763.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1763.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1763.9 MiB      0.0 MiB       return result, res_vec


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 2112 columns and 3868 nonzeros
Variable types: 1056 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 2e+02]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 428 rows and 700 columns
Presolve time: 0.01s
Presolved: 1157 rows, 1412 columns, 3016 nonzeros
Variable types: 704 continuous, 708 integer (708 binary)

Root relaxation: objective 3.781967e+00, 1397 iterations, 0.11 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.78197    0  278          -    3.78197      -     -    0s
H    0     0                     334.0000000    3.78197  98.9%     -    0s
H    0     2                     247.0000000    3.78197  98.5%     -    3s
     0     2    3.78197    0  209  247.00000    3.78197  98.5%     -    3s
H    3     8                     158.0000000    4.01666  97.5%   163    4s
     7    14    4.48361    3  165  158.00000    4.48361  97.2%   141    5s
H    9    14                     154.0000000    4.48361  97.1%   135    5s
H   12    14                     146.0000000    4.48361  96.9%   135    5s
H   42    34                     132.0000000    5.33069  96.0%  76.3    6s
H  244   195                     125.0000000    5.33069  95.7%  42.8    7s
H  270   217                     115.0000000    5.33069  95.4%  42.3    7s
H  509   438                     104.0000000    5.33069  94.9%  31.5    8s
H  944   808                      90.0000000    5.33069  94.1%  25.9    9s
H 1245  1050                      78.0000000    5.33069  93.2%  26.2    9s
  1655  1395   36.54211   85   80   78.00000    5.33069  93.2%  24.3   10s
H 3189  2444                      68.0000000    5.33069  92.2%  26.3   14s
  3190  2439   66.40978  139  278   68.00000    5.33069  92.2%  26.3   16s
  3196  2446 infeasible   17        68.00000    5.33069  92.2%  27.0   20s
  3403  2549   10.66247   29  104   68.00000    6.96870  89.8%  28.0   25s
  4915  3185   21.99214   44   89   68.00000    6.96870  89.8%  31.3   30s
  8033  4745   48.69955  127   65   68.00000    7.19570  89.4%  27.7   36s
 10755  6075   65.52281  173   58   68.00000    7.26821  89.3%  26.3   40s
 13475  8174   34.81398   55  141   68.00000    7.27016  89.3%  26.0   45s
 16241 10165   63.08296   93  129   68.00000    7.46915  89.0%  25.8   50s
 19858 13127   37.73930   71   71   68.00000    7.78185  88.6%  24.3   55s
 23041 15552   21.96123   38   89   68.00000    8.04579  88.2%  24.0   61s
 25305 17256   64.59604  122   71   68.00000    8.10598  88.1%  24.4   66s
 28014 19374   62.94258  117   76   68.00000    8.10803  88.1%  24.6   70s
 31490 22059     cutoff  110        68.00000    8.25850  87.9%  24.3   75s
 35463 25306   17.46943   37  151   68.00000    8.28465  87.8%  23.8   80s
 38604 27788   58.34428  104   70   68.00000    8.40082  87.6%  23.6   86s
 39898 28799   29.81570   50   86   68.00000    8.55558  87.4%  23.5   90s
 43342 31389   25.60832   54   94   68.00000    8.71083  87.2%  23.4   96s
 47304 34597    9.21083   24   96   68.00000    8.76165  87.1%  22.9  100s
 52230 38630   48.60355  113   82   68.00000    8.81050  87.0%  22.7  106s
 55115 40868   64.62199  114   79   68.00000    8.81717  87.0%  22.8  111s
 58313 43341 infeasible  110        68.00000    8.84154  87.0%  22.7  115s
 63487 47357   10.97182   31  103   68.00000    8.84154  87.0%  22.8  123s
 64883 48420    8.95546   27  105   68.00000    8.95546  86.8%  22.8  125s
 68642 51342   28.33908   64   83   68.00000    8.96915  86.8%  22.7  130s
 73912 55428   66.84100  111   81   68.00000    9.07934  86.6%  22.5  136s
 77350 58130   24.60726   54   77   68.00000    9.08139  86.6%  22.4  140s
 82464 62031   48.77332  114   83   68.00000    9.08139  86.6%  22.3  146s
 84386 63651   55.43436  129   61   68.00000    9.17754  86.5%  22.2  150s
 87445 66070   44.63865   70   92   68.00000    9.24772  86.4%  22.1  156s
 90446 68431   27.82042   57   85   68.00000    9.25486  86.4%  22.1  161s
 94367 71510   62.55520  140   83   68.00000    9.36226  86.2%  22.0  165s
 99110 75199     cutoff  133        68.00000    9.38119  86.2%  22.0  172s
 102737 78098   32.51327   50   96   68.00000    9.46915  86.1%  21.9  176s
 105725 80314   37.54905   85   78   68.00000    9.48994  86.0%  21.8  181s
 108869 82794   26.73488   49   91   68.00000    9.50597  86.0%  21.8  185s
 112208 85422   51.55383  111   61   68.00000    9.50597  86.0%  21.8  190s
 116750 89048   40.21464   81   93   68.00000    9.51869  86.0%  21.8  196s
 119572 91249   66.24589  111   92   68.00000    9.52969  86.0%  21.8  200s
 122869 93671   16.89619   42  103   68.00000    9.63577  85.8%  21.9  205s
 126763 96742   51.20448   97   82   68.00000    9.65901  85.8%  21.8  210s
 130425 99573 infeasible   38        68.00000    9.72122  85.7%  21.7  215s
 136104 104043   20.81450   38   93   68.00000    9.72659  85.7%  21.6  221s
 137659 105163   36.58816   75   73   68.00000    9.72661  85.7%  21.5  226s
 140142 107139   55.52049  121   67   68.00000    9.72661  85.7%  21.6  230s
 144971 110881   64.49282  125   65   68.00000    9.77288  85.6%  21.6  237s
 148080 113247   39.54019   76   96   68.00000    9.78942  85.6%  21.6  242s
 151442 115896   10.78226   29   95   68.00000    9.79148  85.6%  21.6  246s
 154291 118147   30.51398   78   65   68.00000    9.79881  85.6%  21.7  250s
 158568 121576   15.78447   41   85   68.00000    9.80068  85.6%  21.8  256s
 161486 123887   63.50543  116   53   68.00000    9.80173  85.6%  21.9  260s
 166650 127869 infeasible  123        68.00000    9.80875  85.6%  22.0  265s
 169619 130248   23.57145   57   68   68.00000    9.80875  85.6%  22.1  270s
 174736 134270   51.43623  121   75   68.00000    9.81490  85.6%  22.1  276s
 178216 136971     cutoff  153        68.00000    9.81490  85.6%  22.2  280s
 181605 139510   66.56936  118   87   68.00000    9.81490  85.6%  22.2  285s
 183554 140898   59.63751  114   71   68.00000    9.81490  85.6%  22.2  290s
 189092 145082   43.50734  103   75   68.00000    9.94977  85.4%  22.2  296s
 192313 147565   66.45405  151   61   68.00000    9.94977  85.4%  22.3  300s
 197075 151303   50.54259  101   73   68.00000    9.98928  85.3%  22.3  306s
 201023 154426   55.47898   96   75   68.00000   10.00653  85.3%  22.3  310s
 206262 158581   62.67687  108  101   68.00000   10.04451  85.2%  22.3  317s
 209335 161027   57.07454  107   84   68.00000   10.05330  85.2%  22.3  321s
 212692 163711   55.44594  105   58   68.00000   10.05667  85.2%  22.3  327s
 215954 166231   41.41302   66   89   68.00000   10.06421  85.2%  22.3  331s
 217183 167224   44.62799   75   75   68.00000   10.06614  85.2%  22.3  335s
 218570 168208   47.65020   85   83   68.00000   10.07521  85.2%  22.3  340s
 224092 172627   45.18528   73   96   68.00000   10.08282  85.2%  22.3  347s
 227430 175318   47.59067  109   71   68.00000   10.08282  85.2%  22.3  351s
 231122 178180   63.73537  103  102   68.00000   10.09258  85.2%  22.3  355s
 236237 182115   62.49290  114   79   68.00000   10.18583  85.0%  22.3  361s
 241714 186315   46.10706   79   79   68.00000   10.21510  85.0%  22.3  366s
 246737 190357   61.21711  104   89   68.00000   10.21510  85.0%  22.3  370s
 251542 194057   37.71329   91   93   68.00000   10.22456  85.0%  22.2  375s
 256476 197789   65.54816  148   60   68.00000   10.22456  85.0%  22.2  380s
 260071 200581 infeasible   58        68.00000   10.23566  84.9%  22.2  385s
 264983 204418   13.74641   33  116   68.00000   10.27068  84.9%  22.2  390s
 269452 207858   57.88146   56  123   68.00000   10.27827  84.9%  22.2  395s
 276366 213318   54.59023   99   81   68.00000   10.36602  84.8%  22.1  400s
 281892 217667   31.52044   48   96   68.00000   10.43992  84.6%  22.1  405s
 287337 222089   44.81883   79   95   68.00000   10.44955  84.6%  22.0  410s
 294197 227569   45.72566   72   91   68.00000   10.45872  84.6%  21.9  415s
 298891 231178   59.24645   98   70   68.00000   10.46746  84.6%  21.9  420s
 305331 236105   45.19484   81   78   68.00000   10.48906  84.6%  21.9  426s
 308278 238400   38.11538   57   69   68.00000   10.49759  84.6%  21.9  430s
 312962 241991 infeasible  119        68.00000   10.49931  84.6%  21.9  435s
 319372 247106   45.98788   98   70   68.00000   10.50813  84.5%  21.9  441s
 324440 251194   12.42638   31  103   68.00000   10.51677  84.5%  21.9  445s
 328568 254310   40.16398   66  112   68.00000   10.52776  84.5%  22.0  450s
 334983 259423   52.47610  106   63   68.00000   10.54989  84.5%  22.0  456s
 339650 263049   49.63908   89   94   68.00000   10.56473  84.5%  22.0  461s
 341480 264449   34.56326   63   86   68.00000   10.58003  84.4%  22.0  466s
 346616 268327   56.63535   66  123   68.00000   10.62615  84.4%  22.0  471s
 352781 273104   49.54247   85   62   68.00000   10.66484  84.3%  22.0  475s
 357672 276821   41.18799   67  139   68.00000   10.68583  84.3%  22.0  480s
 364454 282032   43.24824   67   70   68.00000   10.69935  84.3%  22.0  486s
 369551 285903   12.65051   32   97   68.00000   10.71083  84.2%  22.0  490s
 375812 290729   57.12869   91   82   68.00000   10.72456  84.2%  22.0  496s
 380687 294465   26.46005   44   85   68.00000   10.74053  84.2%  22.0  500s
 385645 298252   62.37375   98   70   68.00000   10.74892  84.2%  22.0  505s
 392003 303195   17.65403   36   92   68.00000   10.75870  84.2%  22.0  511s
 396852 307133   18.66489   40  101   68.00000   10.76305  84.2%  22.1  515s
 402888 311984   26.59295   54   99   68.00000   10.77537  84.2%  22.1  521s
 407355 315473   66.12322  113   96   68.00000   10.77578  84.2%  22.1  526s
 412397 319372 infeasible   45        68.00000   10.77578  84.2%  22.2  530s
 417597 323517   12.71609   35   94   68.00000   10.78110  84.1%  22.2  535s
 424277 328912   51.52754   93   52   68.00000   10.78346  84.1%  22.2  541s
 429426 333131   61.72281  118   83   68.00000   10.78621  84.1%  22.2  546s
 434280 337059   40.53907   89   69   68.00000   10.78739  84.1%  22.2  550s
 439347 341136   45.47878   80   56   68.00000   10.78870  84.1%  22.3  555s
 445174 345628   58.39417  106   59   68.00000   10.79295  84.1%  22.3  561s
 450248 349563   59.26046  118  123   68.00000   10.79548  84.1%  22.4  566s
 454913 353183   58.48697  108   74   68.00000   10.79548  84.1%  22.4  570s
 459545 356662   12.75291   31   90   68.00000   10.80356  84.1%  22.4  575s
 464116 360113   10.80356   33  111   68.00000   10.80356  84.1%  22.5  580s
 469540 364416   29.55435   67   66   68.00000   10.80875  84.1%  22.5  585s
 474657 368296   62.39540  143   40   68.00000   10.81092  84.1%  22.5  590s
 480173 372519 infeasible   32        68.00000   10.83523  84.1%  22.5  595s
 485541 376850   63.81808  121   77   68.00000   10.85037  84.0%  22.5  600s
 491571 381371   42.90555   63  146   68.00000   10.88582  84.0%  22.5  605s
 498056 386261   53.65116   84  117   68.00000   10.92435  83.9%  22.5  611s
 502885 389919 infeasible  121        68.00000   10.92435  83.9%  22.5  615s
 507989 393808   42.71575   71   82   68.00000   10.95158  83.9%  22.5  620s
 512546 397292   10.95158   33  110   68.00000   10.95158  83.9%  22.5  626s
 515860 399761   22.81547   52   85   68.00000   10.97068  83.9%  22.5  630s
 521267 403851   44.47817   77   65   68.00000   10.97565  83.9%  22.5  635s
 526260 407656   46.27070   73   59   68.00000   10.99384  83.8%  22.4  640s
 531420 411673   64.45682  128   51   68.00000   11.00268  83.8%  22.4  646s
 534540 414098   16.93459   35   91   68.00000   11.00968  83.8%  22.4  650s
 539371 417956   46.70268   82   89   68.00000   11.02402  83.8%  22.4  655s
 543493 421102   29.70126   55  137   68.00000   11.02655  83.8%  22.5  660s
 548487 425154   62.35223  128   63   68.00000   11.03374  83.8%  22.5  665s
 553061 428765   61.08519  115   81   68.00000   11.03836  83.8%  22.5  671s
 558348 433016   13.98667   41   93   68.00000   11.04303  83.8%  22.5  675s
 562818 436396   18.94102   41  105   68.00000   11.04735  83.8%  22.5  680s
 569311 441510   65.07281  116   72   68.00000   11.05245  83.7%  22.5  686s
 574859 446054   40.61635   78   83   68.00000   11.05462  83.7%  22.5  692s
 578131 448596 infeasible  130        68.00000   11.05791  83.7%  22.5  695s
 583846 453017   55.59974  103   87   68.00000   11.06476  83.7%  22.6  701s
 589238 457393   63.35436  138   47   68.00000   11.07194  83.7%  22.6  706s
 594303 461409   40.62930   81   79   68.00000   11.08165  83.7%  22.6  710s
 599162 465152   63.52588  119   74   68.00000   11.08200  83.7%  22.6  715s
 604396 469031   35.69980   72   76   68.00000   11.09665  83.7%  22.6  720s
 611906 474880   51.56446  101   85   68.00000   11.11772  83.7%  22.5  726s
 616953 478743   19.92009   32  158   68.00000   11.15706  83.6%  22.5  731s
 622066 482625   54.70702   98   82   68.00000   11.17404  83.6%  22.5  736s
 626408 485949   45.60872   87   60   68.00000   11.18038  83.6%  22.5  741s
 631766 490148   35.98429   45  145   68.00000   11.18433  83.6%  22.5  746s
 636860 494210   28.17450   63   98   68.00000   11.18624  83.5%  22.5  751s
 639760 496403   31.82120   61  108   68.00000   11.18971  83.5%  22.5  755s
 644868 500295   64.65134  111   78   68.00000   11.19007  83.5%  22.5  760s
 650047 504445   29.78027   47   85   68.00000   11.19471  83.5%  22.5  766s
 654648 507886   44.46076   46  154   68.00000   11.19471  83.5%  22.5  771s
 659870 512100   41.09449   79   61   68.00000   11.20035  83.5%  22.5  776s
 664665 515951 infeasible  123        68.00000   11.20035  83.5%  22.5  780s
 669280 519422   55.62149  101   74   68.00000   11.20831  83.5%  22.5  785s
 675898 524410   38.56846   72   67   68.00000   11.21144  83.5%  22.5  791s
 680880 528188     cutoff   58        68.00000   11.21649  83.5%  22.5  796s
 685939 532111   64.09410  117   73   68.00000   11.22166  83.5%  22.4  800s
 690801 535812   60.39919  124   50   68.00000   11.22465  83.5%  22.5  805s
 697243 540718   50.57016   53  123   68.00000   11.23493  83.5%  22.5  811s
 701432 543774   66.35936   60  118   68.00000   11.25270  83.5%  22.5  816s
 707047 548054 infeasible  116        68.00000   11.29267  83.4%  22.5  820s
 712160 551984   11.35414   31   97   68.00000   11.33614  83.3%  22.5  825s
 717625 556123   31.74158   56   84   68.00000   11.34129  83.3%  22.5  831s
 722939 560136   64.59425  120   81   68.00000   11.38707  83.3%  22.5  837s
 726160 562600   60.39394  101   73   68.00000   11.39618  83.2%  22.5  841s
 731675 566987   65.15436  110   96   68.00000   11.40355  83.2%  22.5  846s
 735047 569660   45.94961   62  137   68.00000   11.40396  83.2%  22.5  850s
 740402 573882   57.54854  112   60   68.00000   11.40396  83.2%  22.5  855s
 746122 578493   62.20288  104   83   68.00000   11.42355  83.2%  22.5  861s
 751239 582485   46.08417   94   68   68.00000   11.42770  83.2%  22.4  866s
 756049 586352   24.13440   51  104   68.00000   11.42770  83.2%  22.4  871s
 760875 590132   39.44589   62   83   68.00000   11.43848  83.2%  22.4  876s
 765267 593496   65.42148  119   82   68.00000   11.43931  83.2%  22.4  881s
 768472 596099   40.71359   74   94   68.00000   11.44341  83.2%  22.4  885s
 773595 600043 infeasible   98        68.00000   11.44521  83.2%  22.4  890s
 777998 603436   41.69891   71   80   68.00000   11.45267  83.2%  22.4  895s
 782839 607000   59.59136  113   73   68.00000   11.45872  83.1%  22.4  900s
 787883 610832   63.43454  122   47   68.00000   11.46204  83.1%  22.4  906s
 791364 613627   37.09951   74   88   68.00000   11.46292  83.1%  22.4  910s
 797182 617907   23.76706   61  105   68.00000   11.46788  83.1%  22.4  916s
 800610 620611   60.14789   81  129   68.00000   11.46788  83.1%  22.4  920s
 805520 624348   31.18725   57   95   68.00000   11.47661  83.1%  22.4  925s
 809142 627239 infeasible  109        68.00000   11.48195  83.1%  22.4  930s
 814506 631455   45.90659   82   87   68.00000   11.48406  83.1%  22.4  935s
 817746 633789 infeasible  122        68.00000   11.48880  83.1%  22.4  941s
 822799 637912   50.47767   84   82   68.00000   11.49304  83.1%  22.4  946s
 827328 641336   65.44865  126   56   68.00000   11.49497  83.1%  22.4  950s
 832552 645289   12.49371   32   99   68.00000   11.49763  83.1%  22.4  956s
 837314 648930   16.00165   37   90   68.00000   11.50191  83.1%  22.4  960s
 842200 652817 infeasible   85        68.00000   11.50403  83.1%  22.4  965s
 847035 656592   65.08175  124   67   68.00000   11.51475  83.1%  22.4  970s
 851573 659939   23.27284   47   80   68.00000   11.51869  83.1%  22.4  975s
 855932 663424   54.49781  113   71   68.00000   11.51869  83.1%  22.5  980s
 861284 667596   18.43828   39  101   68.00000   11.52776  83.0%  22.5  985s
 868980 673704 infeasible   65        68.00000   11.52969  83.0%  22.4  991s
 873573 677156   43.50547   76   87   68.00000   11.53928  83.0%  22.4  996s
 878273 680685   45.84072   68  126   68.00000   11.53928  83.0%  22.5 1000s
 883056 684443   42.66126   79   66   68.00000   11.55420  83.0%  22.5 1005s
 889969 689738   30.71486   56   85   68.00000   11.57394  83.0%  22.5 1011s
 893788 692733   65.14683  114   83   68.00000   11.59485  82.9%  22.5 1015s
 896890 694963   38.52234   76   78   68.00000   11.61105  82.9%  22.5 1020s
 904571 701070   59.68216  114   91   68.00000   11.64022  82.9%  22.4 1026s
 908788 704345   54.59095  103   52   68.00000   11.64743  82.9%  22.4 1031s
 913346 707706   37.31691   44  133   68.00000   11.65695  82.9%  22.4 1035s
 918457 711576   17.04396   39  105   68.00000   11.66368  82.8%  22.5 1041s
 923060 715002   66.56354   74  134   68.00000   11.66436  82.8%  22.5 1046s
 929163 720032   38.47002   62   80   68.00000   11.67770  82.8%  22.4 1051s
 934753 724237   54.11581   93   68   68.00000   11.68354  82.8%  22.4 1056s
 937764 726615   56.50033  106   52   68.00000   11.68559  82.8%  22.4 1060s
 941948 729780   53.49648  104   51   68.00000   11.68767  82.8%  22.4 1065s
 947135 733797   55.54751  105   61   68.00000   11.69547  82.8%  22.4 1070s
 952082 737674   61.53915  122   53   68.00000   11.69935  82.8%  22.4 1076s
 956833 741293   62.49366  112   57   68.00000   11.70546  82.8%  22.4 1082s
 960284 743933   21.16262   41  154   68.00000   11.70652  82.8%  22.4 1085s
 965123 747745   55.59176   98   76   68.00000   11.71457  82.8%  22.4 1091s
 969935 751490   63.51808  122   66   68.00000   11.71828  82.8%  22.4 1096s
 974860 755253   49.65447   89   74   68.00000   11.72248  82.8%  22.4 1101s
 977975 757694   40.16146   64   81   68.00000   11.72634  82.8%  22.4 1105s
 982806 761490   65.95210  122   88   68.00000   11.72946  82.8%  22.4 1112s
 984998 763197   42.60313   82   69   68.00000   11.73243  82.7%  22.4 1116s
 988485 765884   63.39470  119   51   68.00000   11.73243  82.7%  22.4 1120s
 993209 769655   64.01934  116   71   68.00000   11.73635  82.7%  22.4 1125s
 998119 773363 infeasible   91        68.00000   11.74084  82.7%  22.5 1130s
 1003168 777336   15.24277   37  136   68.00000   11.74479  82.7%  22.5 1136s
 1008105 781341   65.46796  134   70   68.00000   11.74541  82.7%  22.5 1140s
 1013214 785388   22.92365   50  101   68.00000   11.74622  82.7%  22.5 1145s
 1018284 789421   35.55115   86   85   68.00000   11.74725  82.7%  22.5 1150s
 1021995 792359   32.55966   75   75   68.00000   11.75051  82.7%  22.5 1155s
 1026554 795951   61.57931  118   80   68.00000   11.75206  82.7%  22.5 1160s
 1031690 800038   16.70401   43   81   68.00000   11.75368  82.7%  22.5 1165s
 1036530 803743   50.66838  110   83   68.00000   11.75368  82.7%  22.5 1170s
 1040926 807065   35.49318   77   66   68.00000   11.75368  82.7%  22.6 1176s
 1045967 811091   53.48193   98   69   68.00000   11.75868  82.7%  22.6 1181s
 1049509 813873   23.61012   46   83   68.00000   11.75870  82.7%  22.6 1185s
 1053596 816916   49.48592   99   73   68.00000   11.75998  82.7%  22.6 1190s
 1058730 820930   38.45055   81   91   68.00000   11.76142  82.7%  22.7 1195s
 1064038 825083   63.35730  125   49   68.00000   11.76271  82.7%  22.7 1201s
 1068894 828836   39.94886   91   47   68.00000   11.76279  82.7%  22.7 1206s
 1074503 833303   62.40663  137   60   68.00000   11.76668  82.7%  22.7 1210s
 1081217 838664   64.37090  106   79   68.00000   11.76854  82.7%  22.7 1215s
 1085961 842428   39.50642   80   77   68.00000   11.76919  82.7%  22.8 1220s
 1091754 847051   50.44070   91   62   68.00000   11.77053  82.7%  22.8 1226s
 1096335 850659   66.58001  114   73   68.00000   11.77154  82.7%  22.8 1230s
 1103637 856420   33.56729   77   80   68.00000   11.77192  82.7%  22.8 1236s
 1108121 859856   20.67365   48   95   68.00000   11.77371  82.7%  22.8 1240s
 1114982 865086 infeasible   60        68.00000   11.77552  82.7%  22.9 1246s
 1120512 869643   56.58618  117   91   68.00000   11.77619  82.7%  22.8 1250s
 1125172 873113   63.85183   83  140   68.00000   11.77781  82.7%  22.9 1255s
 1131809 878368   63.34498  111   72   68.00000   11.77824  82.7%  22.9 1261s
 1135167 880944   57.56905  111   98   68.00000   11.77824  82.7%  22.9 1265s
 1138793 883792     cutoff  121        68.00000   11.78006  82.7%  22.9 1270s
 1144297 888376   46.51774   90   82   68.00000   11.78006  82.7%  22.9 1275s
 1149205 892418   60.56559  110   70   68.00000   11.78124  82.7%  22.9 1281s
 1153989 896080 infeasible  113        68.00000   11.78162  82.7%  23.0 1285s
 1159127 900100   27.53474   66   76   68.00000   11.78288  82.7%  23.0 1290s
 1163694 903539 infeasible  126        68.00000   11.78327  82.7%  23.0 1295s
 1168980 907781   38.48833   74   84   68.00000   11.78421  82.7%  23.0 1300s
 1175265 912703   48.51581   88   73   68.00000   11.78621  82.7%  23.0 1305s
 1181806 917674   56.36183  115   55   68.00000   11.78644  82.7%  23.1 1310s
 1185505 920430   13.73705   36   86   68.00000   11.78737  82.7%  23.1 1315s
 1190627 924424   50.41567  106   60   68.00000   11.78815  82.7%  23.1 1320s
 1197615 929943   39.48243   81   74   68.00000   11.79031  82.7%  23.1 1325s
 1203829 934762   18.67153   46   84   68.00000   11.79169  82.7%  23.1 1331s
 1208952 938895   27.54162   60   74   68.00000   11.79236  82.7%  23.2 1335s
 1215791 944263   61.64768  122   93   68.00000   11.79384  82.7%  23.2 1341s
 1220601 948025   66.35322  137   43   68.00000   11.79635  82.7%  23.2 1345s
 1227201 953172   47.43876  102   76   68.00000   11.79787  82.7%  23.2 1350s
 1232580 957443   23.48925   42   91   68.00000   11.79787  82.7%  23.2 1355s
 1236864 960946   53.45437  101   76   68.00000   11.80291  82.6%  23.2 1360s
 1243076 965724   49.34965   92   76   68.00000   11.80875  82.6%  23.3 1366s
 1248489 970075   65.54292  116   72   68.00000   11.81023  82.6%  23.3 1370s
 1253665 974067   25.61627   66   81   68.00000   11.81285  82.6%  23.3 1375s
 1260864 979558   65.44291  126   58   68.00000   11.82228  82.6%  23.3 1381s
 1266393 983789   66.05993  111   73   68.00000   11.82824  82.6%  23.3 1385s
 1273116 989097   45.51475   78   82   68.00000   11.84271  82.6%  23.3 1390s
 1279641 994130   59.58989   95   74   68.00000   11.86128  82.6%  23.3 1396s
 1285192 998447     cutoff  103        68.00000   11.87012  82.5%  23.3 1401s
 1288702 1001266   37.90906   60   80   68.00000   11.88238  82.5%  23.2 1406s
 1294992 1006288   29.59325   49   97   68.00000   11.88682  82.5%  23.2 1410s
 1300455 1010624 infeasible   94        68.00000   11.88766  82.5%  23.2 1415s
 1307094 1015978   17.73490   39  105   68.00000   11.90082  82.5%  23.2 1420s
 1312770 1020300 infeasible   62        68.00000   11.90322  82.5%  23.2 1426s
 1317638 1024029   52.62551   93   73   68.00000   11.90454  82.5%  23.2 1431s
 1322630 1027818   51.27030   96   72   68.00000   11.90454  82.5%  23.2 1435s
 1330260 1033934   62.65589   92   67   68.00000   11.92230  82.5%  23.1 1441s
 1334884 1037669   38.64308   55  136   68.00000   11.92268  82.5%  23.1 1445s
 1338661 1040454   64.69494   74  117   68.00000   11.92273  82.5%  23.1 1450s
 1345229 1045552   45.85536   71   84   68.00000   11.92770  82.5%  23.1 1456s
 1350248 1049352   55.55864   94   81   68.00000   11.93471  82.4%  23.1 1460s
 1354751 1052667   43.86587   71   79   68.00000   11.94007  82.4%  23.1 1465s
 1359962 1056482   66.06337  110   79   68.00000   11.94605  82.4%  23.1 1470s
 1364599 1059890 infeasible   62        68.00000   11.94955  82.4%  23.1 1475s
 1370864 1064565 infeasible   63        68.00000   11.95695  82.4%  23.1 1480s
 1374024 1066873   52.20341   55  140   68.00000   11.95959  82.4%  23.1 1485s
 1380107 1071382   49.64179   84   66   68.00000   11.96842  82.4%  23.2 1490s
 1385644 1075509   13.94184   34  104   68.00000   11.97456  82.4%  23.2 1496s
 1391206 1079854   49.53876   87   61   68.00000   11.97843  82.4%  23.2 1501s
 1396170 1083668   18.83199   40  100   68.00000   11.98832  82.4%  23.2 1506s
 1401178 1087573   28.47561   52   92   68.00000   11.98979  82.4%  23.2 1510s
 1406698 1091948   35.92380   61   75   68.00000   11.99593  82.4%  23.1 1515s
 1413635 1097461 infeasible  131        68.00000   11.99648  82.4%  23.1 1521s
 1418121 1100824   28.98333   53   82   68.00000   12.00312  82.3%  23.1 1526s
 1421255 1103275   27.79561   58   92   68.00000   12.00602  82.3%  23.1 1530s
 1426038 1107007     cutoff  134        68.00000   12.00967  82.3%  23.1 1536s
 1430721 1110691 infeasible  122        68.00000   12.00967  82.3%  23.1 1541s
 1434016 1113278   63.79894  121   68   68.00000   12.00967  82.3%  23.2 1545s
 1438523 1116771   65.15455  119   91   68.00000   12.01628  82.3%  23.2 1551s
 1443714 1120815   32.44464   58   76   68.00000   12.01713  82.3%  23.2 1556s
 1446545 1123088   16.90608   39   89   68.00000   12.01713  82.3%  23.2 1562s
 1449087 1125092   65.56667  127   66   68.00000   12.01713  82.3%  23.2 1566s
 1453195 1128361   16.93615   36   91   68.00000   12.01931  82.3%  23.2 1570s
 1457152 1131419 infeasible   38        68.00000   12.02069  82.3%  23.2 1577s
 1461264 1134675   60.97460  104   71   68.00000   12.02245  82.3%  23.2 1581s
 1464681 1137245   24.88706   63  116   68.00000   12.02355  82.3%  23.2 1585s
 1469715 1141065   41.65540   75  104   68.00000   12.02355  82.3%  23.2 1591s
 1472749 1143422   64.59313  103   75   68.00000   12.02438  82.3%  23.2 1595s
 1477478 1147024   23.86658   55   95   68.00000   12.02616  82.3%  23.2 1601s
 1480984 1149757   15.90162   43   93   68.00000   12.02679  82.3%  23.2 1605s
 1486374 1154039   40.66104   89   88   68.00000   12.02811  82.3%  23.2 1611s
 1489769 1156707   56.56631   84   74   68.00000   12.02811  82.3%  23.2 1615s
 1494415 1160331   46.64054   84   84   68.00000   12.02811  82.3%  23.2 1621s
 1499184 1164136   27.78086   66   97   68.00000   12.02970  82.3%  23.2 1626s
 1502470 1166723   42.38051   79   90   68.00000   12.03221  82.3%  23.2 1630s
 1507383 1170615   19.84475   39   97   68.00000   12.03440  82.3%  23.2 1636s
 1510779 1173170   65.32013   69  110   68.00000   12.03631  82.3%  23.2 1641s
 1512609 1174558   30.56743   71   75   68.00000   12.03631  82.3%  23.2 1645s
 1517207 1177913   60.37285  132   49   68.00000   12.03788  82.3%  23.3 1651s
 1520873 1180771   19.25984   41   87   68.00000   12.03933  82.3%  23.3 1655s
 1525676 1184335   34.64068   59   83   68.00000   12.04034  82.3%  23.3 1660s
 1530380 1187850   23.89530   54   88   68.00000   12.04356  82.3%  23.3 1666s
 1535685 1192006   58.65062  104   89   68.00000   12.04451  82.3%  23.3 1671s
 1541084 1196245   51.38037  106   52   68.00000   12.04451  82.3%  23.3 1676s
 1546280 1200435   64.83729  109   81   68.00000   12.04451  82.3%  23.3 1681s
 1551139 1204197   21.09563   45   99   68.00000   12.04861  82.3%  23.3 1686s
 1554559 1206782   41.58497   66  120   68.00000   12.05138  82.3%  23.3 1690s
 1561191 1211812   51.42374  105   65   68.00000   12.05245  82.3%  23.3 1696s
 1565460 1214997   22.83332   50  108   68.00000   12.05300  82.3%  23.3 1701s
 1570536 1218877   39.80524   79   96   68.00000   12.05717  82.3%  23.3 1706s
 1574070 1221575   52.38536   97   51   68.00000   12.05965  82.3%  23.3 1710s
 1580120 1226116   31.54169   53   90   68.00000   12.06705  82.3%  23.3 1716s
 1582312 1227859   36.73076   71   76   68.00000   12.06705  82.3%  23.3 1720s
 1588008 1232308   39.48486   84   66   68.00000   12.06987  82.3%  23.3 1725s
 1592566 1235682   64.56398  125   75   68.00000   12.07314  82.2%  23.4 1730s
 1597886 1239747   56.46055  103   57   68.00000   12.07434  82.2%  23.4 1736s
 1602766 1243372   52.64766   93   90   68.00000   12.08165  82.2%  23.4 1741s
 1607927 1247167   62.57197  107   75   68.00000   12.08943  82.2%  23.4 1746s
 1614008 1252076   54.52459  111   68   68.00000   12.09160  82.2%  23.3 1751s
 1618995 1255834   65.41274  114   64   68.00000   12.12472  82.2%  23.3 1756s
 1624296 1259954   30.35268   58   95   68.00000   12.13582  82.2%  23.3 1761s
 1629134 1263730   26.85212   52   88   68.00000   12.14318  82.1%  23.3 1765s
 1634132 1267622   66.42816  121   51   68.00000   12.14399  82.1%  23.3 1770s
 1640749 1272638   16.01900   36   97   68.00000   12.15179  82.1%  23.3 1776s
 1642472 1273982   36.62757   68   76   68.00000   12.15320  82.1%  23.3 1780s
 1649069 1278960   56.19419   69  132   68.00000   12.15322  82.1%  23.3 1786s
 1654214 1282939   44.15457   71   74   68.00000   12.15932  82.1%  23.3 1791s
 1659013 1286725 infeasible   58        68.00000   12.15974  82.1%  23.3 1797s
 1662340 1289319   56.57195  103   83   68.00000   12.16123  82.1%  23.3 1800s

Explored 1664037 nodes (38802831 simplex iterations) in 1800.05 seconds
Thread count was 16 (of 16 available processors)

Solution count 10: 68 78 90 ... 158

Time limit reached
Best objective 6.800000000000e+01, best bound 1.300000000000e+01, gap 80.8824%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1763.9 MiB   1763.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1763.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1763.9 MiB      0.0 MiB       m2 = m.construct()
    28   1763.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1763.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1763.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1763.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1763.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1763.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1763.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1763.9 MiB      0.0 MiB       m2.update()
    44   1763.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1763.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1763.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1763.9 MiB      0.0 MiB       if(find_optimum):
    55   1763.9 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56   1763.9 MiB      0.0 MiB           m2.update()
    57   1763.9 MiB      0.0 MiB           new_obj = LinExpr(0)
    58   1763.9 MiB      0.0 MiB           for var in current_vars:
    59   1763.9 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60   1763.9 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61   1763.9 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62   1763.9 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1786.0 MiB     22.1 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1786.0 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1786.0 MiB      0.0 MiB       j = 0
    69   1786.0 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1786.0 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1786.0 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1786.0 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1786.0 MiB      0.0 MiB       if m2.status == 9:
    78   1786.0 MiB      0.0 MiB           result.timeout = True
    79   1786.0 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1786.0 MiB      0.0 MiB           result.solution = True
    81   1786.0 MiB      0.0 MiB           result.feasible = True
    82   1786.0 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1786.0 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1786.0 MiB      0.0 MiB           for v in current_vars:
    85   1786.0 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1786.0 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1786.0 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89   1786.0 MiB      0.0 MiB                       res_vec[j] = 0
    90   1786.0 MiB      0.0 MiB                   j = j+1
    91                             
    92   1786.0 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 01:54:13 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.tra,lab' -mdp /tmp/tmpwadbz4kz

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpwadbz4kz"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.024 seconds.

Warning: Deadlocks detected and fixed in 1 states

Type:        MDP
States:      69 (1 initial)
Transitions: 84
Choices:     69

Transition matrix: 253 nodes (3 terminal), 84 minterms, vars: 7r/7c/1nd

Prob0A: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 31 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 69, no = 0, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.006 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1585 rows, 1584 columns and 4117 nonzeros
Variable types: 528 continuous, 1056 integer (1056 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 2e+00]
Presolve removed 289 rows and 280 columns
Presolve time: 0.01s
Presolved: 1296 rows, 1304 columns, 3546 nonzeros
Variable types: 486 continuous, 818 integer (818 binary)

Root relaxation: objective 3.000000e+00, 12 iterations, 0.00 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0    3.00000    0    6          -    3.00000      -     -    0s
     0     2    5.66667    0   11          -    5.66667      -     -    0s
H 1986  1899                      83.0000000   13.22222  84.1%   9.9    1s
H 2414  2196                      74.0000000   13.22222  82.1%   9.7    2s
H 3172  2705                      72.0000000   13.22222  81.6%   9.5    3s
  5932  4199 infeasible   63        72.00000   14.33333  80.1%   9.9    5s
H 5934  4044                      69.0000000   14.33333  79.2%   9.9    5s
H 8651  5254                      68.0000000   16.00000  76.5%  10.3    6s
H14093  8818                      67.0000000   17.05556  74.5%  10.7    9s
 15672 10035   58.00000   50   10   67.00000   18.00000  73.1%  10.8   10s
 28945 20394   35.74068   33   37   67.00000   19.00000  71.6%  11.0   15s
 41977 30606   47.16663   40   34   67.00000   20.00000  70.1%  11.2   20s
 55470 40948   38.33333   35   15   67.00000   20.35185  69.6%  11.1   25s
 73717 54924   24.00000   23   18   67.00000   21.00000  68.7%  11.0   30s
 91746 68795   54.11111   50   15   67.00000   21.75000  67.5%  10.9   35s
H99063 73994                      66.0000000   22.00000  66.7%  11.0   38s
 103161 77217   34.00000   30   16   66.00000   22.00000  66.7%  11.0   40s
 118977 89089     cutoff   65        66.00000   22.00000  66.7%  10.8   45s
 136843 102616   55.00000   47   16   66.00000   22.33333  66.2%  10.8   50s
 154553 116098   58.33285   55   43   66.00000   22.99999  65.2%  10.8   55s
 169560 127507   46.33333   42    9   66.00000   23.00000  65.2%  10.9   60s
 190076 143161 infeasible   62        66.00000   23.00000  65.2%  10.8   65s
 207621 156188   24.33333   26   13   66.00000   23.00000  65.2%  10.7   70s
 224144 168893   44.33332   39   25   66.00000   23.33333  64.6%  10.7   75s
 239425 180416   48.66667   44   16   66.00000   23.55556  64.3%  10.7   80s
 256741 193622   63.83333   61   13   66.00000   23.99997  63.6%  10.7   85s
 275094 207360   44.33333   42   21   66.00000   24.00000  63.6%  10.8   90s
 293606 221319   64.33333   59   11   66.00000   24.00000  63.6%  10.8   95s
 310458 233972   42.00000   43   12   66.00000   24.00000  63.6%  10.7  100s
 323469 243687   43.00000   40   10   66.00000   24.00000  63.6%  10.7  105s
 339403 255608   42.16667   38   19   66.00000   24.00000  63.6%  10.7  110s
 356253 268231   39.77778   34   18   66.00000   24.00000  63.6%  10.6  115s
 372682 280399   33.21212   35   15   66.00000   24.33333  63.1%  10.6  120s
 390098 293612   57.33333   57   16   66.00000   24.49999  62.9%  10.6  125s
 408172 306997   33.50000   30   14   66.00000   24.66667  62.6%  10.6  130s
 423059 318170   58.85721   54   20   66.00000   24.86621  62.3%  10.6  135s
 437198 329062 infeasible   65        66.00000   25.00000  62.1%  10.6  140s
 449987 338616   38.33322   36   33   66.00000   25.00000  62.1%  10.7  145s
 466292 350734   34.00000   32   10   66.00000   25.00000  62.1%  10.7  150s
 479983 360807 infeasible   54        66.00000   25.00000  62.1%  10.7  155s
 497694 374192   33.33333   33   15   66.00000   25.00000  62.1%  10.6  160s
 515477 387358   58.16667   56   17   66.00000   25.00000  62.1%  10.6  165s
 534182 401344   29.00000   29   16   66.00000   25.00000  62.1%  10.6  170s
 549951 413208   60.33333   57   10   66.00000   25.00000  62.1%  10.6  175s
 561089 421573   40.00000   36   21   66.00000   25.00000  62.1%  10.5  180s
 575010 431710   58.00000   58   14   66.00000   25.00000  62.1%  10.5  185s
 589028 442238   63.33330   53   41   66.00000   25.08368  62.0%  10.5  190s
 603247 452745   51.55540   48   46   66.00000   25.22727  61.8%  10.5  195s
 615758 461985   47.33333   42   18   66.00000   25.33333  61.6%  10.5  200s
 629370 472229   63.48825   54   14   66.00000   25.33333  61.6%  10.5  205s
 646219 484528   47.33333   46   11   66.00000   25.50000  61.4%  10.5  210s
 663270 497234     cutoff   53        66.00000   25.66666  61.1%  10.5  215s
 679862 509609   28.16667   28   16   66.00000   25.66667  61.1%  10.5  220s
 692944 519504   32.00000   33   18   66.00000   25.77778  60.9%  10.5  225s
 709377 531557     cutoff   64        66.00000   25.99998  60.6%  10.5  230s
 726075 543797   37.66666   34   29   66.00000   26.00000  60.6%  10.6  235s
 744353 557467 infeasible   54        66.00000   26.00000  60.6%  10.6  240s
 761578 570068   49.66667   45   11   66.00000   26.00000  60.6%  10.6  245s
 776908 581174   62.50000   54    9   66.00000   26.00000  60.6%  10.6  250s
 796579 595870   49.00000   43   15   66.00000   26.00000  60.6%  10.6  255s
 814585 609201   63.16667   61    6   66.00000   26.00000  60.6%  10.6  260s
 829330 620076   33.33333   34   13   66.00000   26.00000  60.6%  10.6  265s
 842510 629856   29.50000   29   19   66.00000   26.00000  60.6%  10.5  270s
 858480 641566   41.00000   39   17   66.00000   26.00000  60.6%  10.5  275s
 874455 653554   30.76543   29   20   66.00000   26.00000  60.6%  10.5  280s
 891991 666510   53.00000   56   12   66.00000   26.00000  60.6%  10.5  285s
 908798 678820   54.00000   47   19   66.00000   26.00000  60.6%  10.5  290s
 926215 691718   56.00000   49    8   66.00000   26.00000  60.6%  10.5  295s
 942830 703864   58.66667   50   16   66.00000   26.00000  60.6%  10.5  300s
 961255 717250   48.33333   47   25   66.00000   26.11111  60.4%  10.4  305s
 974597 727085   57.00000   51   12   66.00000   26.16667  60.4%  10.4  310s
 988719 737358 infeasible   56        66.00000   26.27776  60.2%  10.4  315s
 1006384 750407   30.33333   31   12   66.00000   26.33333  60.1%  10.4  320s
 1025130 764114   56.16667   49   15   66.00000   26.33333  60.1%  10.4  325s
 1041702 775969 infeasible   38        66.00000   26.41667  60.0%  10.4  330s
 1053068 784176   42.33308   39   37   66.00000   26.50000  59.8%  10.4  335s
 1063596 791816 infeasible   54        66.00000   26.50000  59.8%  10.4  340s
 1071660 797980   46.99999   49   23   66.00000   26.55556  59.8%  10.4  345s
 1086370 808761   38.99997   38   22   66.00000   26.66665  59.6%  10.4  350s
 1098205 817422   27.66667   26   21   66.00000   26.66667  59.6%  10.4  355s
 1113265 828510   35.00000   34   12   66.00000   26.66667  59.6%  10.4  360s
 1125173 837239   43.00000   39   21   66.00000   26.70684  59.5%  10.4  365s
 1138207 846619     cutoff   57        66.00000   26.77778  59.4%  10.4  370s
 1153122 857563     cutoff   59        66.00000   26.88889  59.3%  10.4  375s
 1166504 867389     cutoff   57        66.00000   26.99998  59.1%  10.4  380s
 1179892 877201   35.99997   36   36   66.00000   26.99999  59.1%  10.5  385s
 1189684 884171   46.33325   44   34   66.00000   26.99999  59.1%  10.5  390s
 1199416 891295   33.49999   31   20   66.00000   27.00000  59.1%  10.5  395s
 1209175 898486   43.00000   37   22   66.00000   27.00000  59.1%  10.5  400s
 1220015 906313   63.55514   53   31   66.00000   27.00000  59.1%  10.5  405s
 1236325 918072   63.66667   60   22   66.00000   27.00000  59.1%  10.5  410s
 1252553 930071     cutoff   57        66.00000   27.00000  59.1%  10.5  415s
 1266534 940080   50.16667   47   14   66.00000   27.00000  59.1%  10.5  420s
 1281445 950755   36.33333   35   14   66.00000   27.00000  59.1%  10.5  425s
 1299238 963786   61.00000   52   10   66.00000   27.00000  59.1%  10.5  430s
 1313322 973953   63.00000   63   12   66.00000   27.00000  59.1%  10.5  435s
 1328471 984838   37.77778   38   23   66.00000   27.00000  59.1%  10.5  440s
 1341702 994668   33.00000   34   19   66.00000   27.00000  59.1%  10.5  445s
 1357244 1006129   45.00000   39   19   66.00000   27.00000  59.1%  10.5  450s
 1369779 1015129   51.33333   47   13   66.00000   27.00000  59.1%  10.5  455s
 1385229 1026510   49.00000   43    9   66.00000   27.00000  59.1%  10.4  460s
 1401152 1038335   48.00000   42   15   66.00000   27.00000  59.1%  10.4  465s
 1416515 1049586   56.00000   50    8   66.00000   27.00000  59.1%  10.4  470s
 1429892 1059307   50.25000   46   19   66.00000   27.00000  59.1%  10.4  475s
 1445686 1070946   33.33333   32   18   66.00000   27.00000  59.1%  10.4  480s
 1459682 1081444   33.33333   34   10   66.00000   27.00000  59.1%  10.4  485s
 1468143 1087469   53.00000   48   16   66.00000   27.00000  59.1%  10.4  490s
 1480734 1096710   43.50000   46   17   66.00000   27.00000  59.1%  10.4  495s
 1491660 1104546   64.33333   57   16   66.00000   27.00000  59.1%  10.4  500s
 1503474 1113141   54.33327   50   29   66.00000   27.00000  59.1%  10.4  505s
 1519030 1124534   55.33333   50   10   66.00000   27.00000  59.1%  10.4  510s
 1534881 1136293   46.77778   39   24   66.00000   27.00000  59.1%  10.4  515s
 1547775 1145889   35.33333   33   15   66.00000   27.00000  59.1%  10.4  520s
 1563470 1157362   64.99998   56   23   66.00000   27.00000  59.1%  10.4  525s
 1578007 1168024   43.00000   42    9   66.00000   27.00000  59.1%  10.3  530s
 1592060 1178539 infeasible   59        66.00000   27.01851  59.1%  10.3  535s
 1603548 1186801 infeasible   60        66.00000   27.06250  59.0%  10.3  540s
 1616807 1196586   28.50000   29   21   66.00000   27.12500  58.9%  10.3  545s
 1627978 1204646   34.00000   31   10   66.00000   27.16667  58.8%  10.4  550s
 1642268 1215003   39.00000   36    9   66.00000   27.16667  58.8%  10.3  555s
 1656756 1225479   28.58333   29   26   66.00000   27.25000  58.7%  10.3  560s
 1671927 1236522   61.55549   53   32   66.00000   27.33333  58.6%  10.4  565s
 1684235 1245770 infeasible   55        66.00000   27.33333  58.6%  10.4  570s
 1697342 1255438   58.00000   51    8   66.00000   27.33333  58.6%  10.4  575s
 1707402 1262773   52.33333   48   10   66.00000   27.33333  58.6%  10.4  580s
 1720991 1272681   28.00000   30    8   66.00000   27.33333  58.6%  10.3  585s
 1734517 1282673 infeasible   56        66.00000   27.33333  58.6%  10.3  590s
 1747480 1292243   50.62487   45   42   66.00000   27.40909  58.5%  10.3  595s
 1761040 1302412   44.99982   45   39   66.00000   27.49999  58.3%  10.3  600s
 1776369 1313490   62.33333   54   23   66.00000   27.50000  58.3%  10.3  605s
 1793132 1325773   62.33332   57   28   66.00000   27.55554  58.2%  10.3  610s
 1809754 1337626   47.00000   45    9   66.00000   27.61111  58.2%  10.3  615s
 1823648 1347846   31.00000   30   20   66.00000   27.66666  58.1%  10.4  620s
 1837587 1358050   33.22222   32   29   66.00000   27.66667  58.1%  10.4  625s
 1851149 1367890   32.05556   31   19   66.00000   27.66667  58.1%  10.4  630s
 1866522 1378823   44.33333   43   13   66.00000   27.66667  58.1%  10.4  635s
 1880300 1388553   28.00000   27   22   66.00000   27.66667  58.1%  10.3  640s
 1892303 1397020   51.99971   45   45   66.00000   27.77776  57.9%  10.4  645s
 1907299 1407970   60.16667   53   21   66.00000   27.77778  57.9%  10.4  650s
 1918847 1416370   57.55556   55   16   66.00000   27.83333  57.8%  10.4  655s
 1934835 1427906   58.33333   53   14   66.00000   27.88888  57.7%  10.4  660s
 1951379 1439834   48.33326   48   39   66.00000   27.99997  57.6%  10.4  665s
 1962440 1447807   34.99998   32   38   66.00000   27.99998  57.6%  10.4  670s
 1974122 1456527   46.33332   44   41   66.00000   27.99999  57.6%  10.4  675s
 1989272 1467496   29.99999   30   27   66.00000   27.99999  57.6%  10.4  680s
 2002422 1476865   62.12430   55   52   66.00000   27.99999  57.6%  10.4  685s
 2016824 1487396   57.83320   49   39   66.00000   27.99999  57.6%  10.4  690s
 2029108 1496150   28.99999   31   20   66.00000   28.00000  57.6%  10.5  695s
 2042794 1506278   59.99977   54   37   66.00000   28.00000  57.6%  10.5  700s
 2055355 1515517   40.99999   39   18   66.00000   28.00000  57.6%  10.5  705s
 2065934 1523196   61.99987   70   18   66.00000   28.00000  57.6%  10.5  710s
 2077905 1531880   32.66665   32   36   66.00000   28.00000  57.6%  10.5  715s
 2089154 1540120   62.99960   54   50   66.00000   28.00000  57.6%  10.5  720s
 2101682 1549319   30.33333   31   10   66.00000   28.00000  57.6%  10.5  725s
 2114915 1558625 infeasible   63        66.00000   28.00000  57.6%  10.5  730s
 2124214 1565350 infeasible   55        66.00000   28.00000  57.6%  10.5  735s
 2138086 1575529   36.66667   35   16   66.00000   28.00000  57.6%  10.5  740s
 2152235 1585894   42.00000   39   10   66.00000   28.00000  57.6%  10.5  745s
 2166291 1596220   36.33333   34   12   66.00000   28.00000  57.6%  10.5  750s
 2180892 1606856   50.33333   45   18   66.00000   28.00000  57.6%  10.5  755s
 2191317 1614415   50.66654   49   30   66.00000   28.00000  57.6%  10.5  760s
 2206631 1625662 infeasible   58        66.00000   28.00000  57.6%  10.5  765s
 2220245 1635445   60.00000   53    9   66.00000   28.00000  57.6%  10.5  770s
 2231374 1643509   59.26153   55   22   66.00000   28.00000  57.6%  10.5  775s
 2247073 1654723   61.50000   51   22   66.00000   28.00000  57.6%  10.5  780s
 2261512 1665337   45.00000   42    9   66.00000   28.00000  57.6%  10.5  785s
 2273031 1673728   62.33333   56   10   66.00000   28.00000  57.6%  10.4  790s
 2288016 1684546   51.33333   48   14   66.00000   28.00000  57.6%  10.4  795s
 2304087 1696570   62.50000   62   23   66.00000   28.00000  57.6%  10.4  800s
 2317589 1706298   55.66667   53   15   66.00000   28.00000  57.6%  10.4  805s
 2332582 1717047   45.00000   39    8   66.00000   28.00000  57.6%  10.4  810s
 2345860 1726833   62.60606   58   15   66.00000   28.00000  57.6%  10.4  815s
 2361112 1738019   50.00000   42   22   66.00000   28.00000  57.6%  10.4  820s
 2373104 1746851   31.05556   32   18   66.00000   28.00000  57.6%  10.4  825s
 2386502 1756659   45.83333   40   16   66.00000   28.00000  57.6%  10.4  830s
 2402121 1768010   51.99998   42   27   66.00000   28.00000  57.6%  10.4  835s
 2414714 1777106   46.00000   44   18   66.00000   28.00000  57.6%  10.4  840s
 2427533 1786510   37.50000   34   17   66.00000   28.00000  57.6%  10.4  845s
 2438438 1794416   31.66667   29   17   66.00000   28.00000  57.6%  10.4  850s
 2454533 1806119   58.33333   54   11   66.00000   28.00000  57.6%  10.4  855s
 2468199 1815956   41.33333   38   12   66.00000   28.00000  57.6%  10.4  860s
 2483491 1827014   56.50000   48   14   66.00000   28.00000  57.6%  10.4  865s
 2500696 1839709   62.83332   56   22   66.00000   28.00000  57.6%  10.4  870s
 2516362 1851120   64.00000   58   16   66.00000   28.00000  57.6%  10.4  875s
 2529717 1860669   43.33333   37   10   66.00000   28.00000  57.6%  10.4  880s
 2540882 1868525   58.33333   51   19   66.00000   28.00000  57.6%  10.4  885s
 2552958 1877246   55.00000   47   15   66.00000   28.00000  57.6%  10.4  890s
 2566518 1886797   33.00000   33   14   66.00000   28.00000  57.6%  10.4  895s
 2585678 1900703   37.33333   37   17   66.00000   28.00000  57.6%  10.4  900s
H2592578 1895705                      65.0000000   28.00000  56.9%  10.4  903s
 2595289 1897710 infeasible   69        65.00000   28.00000  56.9%  10.4  905s
 2608019 1906787   49.33333   46   11   65.00000   28.00000  56.9%  10.4  910s
 2621886 1916858   60.33333   53   11   65.00000   28.00000  56.9%  10.4  915s
 2637892 1928136   33.00000   34   16   65.00000   28.00000  56.9%  10.3  920s
 2651405 1937896   63.00000   56   12   65.00000   28.00000  56.9%  10.3  925s
 2664820 1947302   51.00000   48   10   65.00000   28.00000  56.9%  10.3  930s
 2680222 1958310   41.00000   43   13   65.00000   28.00000  56.9%  10.3  935s
 2692791 1967151   63.50000   66   11   65.00000   28.00000  56.9%  10.3  940s
 2705500 1976270   34.75000   34   16   65.00000   28.01852  56.9%  10.3  945s
 2719222 1986035   51.16667   51   34   65.00000   28.05556  56.8%  10.3  950s
 2732210 1995128   46.43515   45   29   65.00000   28.11111  56.8%  10.3  955s
 2745327 2004621   57.99978   51   46   65.00000   28.13636  56.7%  10.3  960s
 2759243 2014574   48.66667   54   13   65.00000   28.16667  56.7%  10.3  965s
 2771421 2023219   45.33333   41   15   65.00000   28.16667  56.7%  10.3  970s
 2784785 2032879   49.00000   47   13   65.00000   28.16667  56.7%  10.3  975s
 2802579 2045492   36.99994   34   43   65.00000   28.22222  56.6%  10.3  980s
 2817835 2056388   41.22222   36   22   65.00000   28.26872  56.5%  10.3  985s
 2831734 2066266   62.83320   52   35   65.00000   28.33332  56.4%  10.4  990s
 2844269 2075058   57.99962   53   34   65.00000   28.33333  56.4%  10.4  995s
 2858976 2085268   49.66667   46   22   65.00000   28.33333  56.4%  10.4 1000s
 2876391 2097545   31.00000   30   22   65.00000   28.33333  56.4%  10.4 1005s
 2888751 2106468   36.33333   37   13   65.00000   28.33333  56.4%  10.4 1010s
 2901875 2115891   61.09451   58    9   65.00000   28.33333  56.4%  10.4 1015s
 2915766 2125779   42.33333   38   11   65.00000   28.33333  56.4%  10.3 1020s
 2931099 2136630   52.66667   44   19   65.00000   28.33333  56.4%  10.3 1025s
 2945026 2146497   62.33333   56    6   65.00000   28.33333  56.4%  10.3 1030s
 2959433 2156787   58.00000   53   13   65.00000   28.39400  56.3%  10.3 1035s
 2971994 2165538   43.00000   42   18   65.00000   28.44444  56.2%  10.3 1040s
 2982740 2173183   45.27272   41   23   65.00000   28.49999  56.2%  10.4 1045s
 2996318 2182839 infeasible   57        65.00000   28.50000  56.2%  10.4 1050s
 3010308 2192472   31.73333   29   18   65.00000   28.50000  56.2%  10.4 1055s
 3019908 2199343 infeasible   51        65.00000   28.50000  56.2%  10.4 1060s
 3032391 2208063   51.99973   49   30   65.00000   28.55553  56.1%  10.4 1065s
 3045448 2217621   63.00000   54   24   65.00000   28.55556  56.1%  10.4 1070s
 3059780 2227948   54.33329   52   19   65.00000   28.58333  56.0%  10.4 1075s
 3072560 2236859   41.33332   40   34   65.00000   28.66665  55.9%  10.4 1080s
 3085902 2246356   62.00000   56   13   65.00000   28.66666  55.9%  10.4 1085s
 3100357 2256669   61.88889   56   19   65.00000   28.66667  55.9%  10.4 1090s
 3111896 2264528   33.33333   32   23   65.00000   28.66667  55.9%  10.4 1095s
 3125533 2274235   59.33333   50   18   65.00000   28.66667  55.9%  10.4 1100s
 3141225 2285300   47.33325   43   21   65.00000   28.66667  55.9%  10.4 1105s
 3154076 2294303   58.33333   49   14   65.00000   28.66667  55.9%  10.4 1110s
 3169021 2304996   63.00000   68   16   65.00000   28.66667  55.9%  10.4 1115s
 3181177 2313487   62.33330   59   29   65.00000   28.74999  55.8%  10.4 1120s
 3194412 2323116   31.33332   31   20   65.00000   28.77777  55.7%  10.4 1125s
 3207953 2332602   49.00000   43   18   65.00000   28.77778  55.7%  10.4 1130s
 3218351 2339943   52.99977   47   33   65.00000   28.83330  55.6%  10.4 1135s
 3230501 2348652   62.86111   61   24   65.00000   28.83333  55.6%  10.4 1140s
 3244864 2358866   55.00000   52   19   65.00000   28.83333  55.6%  10.4 1145s
 3259707 2369442   60.33333   59   10   65.00000   28.88889  55.6%  10.4 1150s
 3275241 2380379   58.32044   51   45   65.00000   28.96430  55.4%  10.4 1155s
 3287317 2389121   35.99998   33   23   65.00000   28.99997  55.4%  10.4 1160s
 3298570 2396930   33.33322   34   29   65.00000   28.99997  55.4%  10.4 1165s
 3312862 2406970   38.99993   39   29   65.00000   28.99998  55.4%  10.4 1170s
 3325373 2415606   45.24993   48   30   65.00000   28.99999  55.4%  10.4 1175s
 3338460 2424639   41.99991   41   31   65.00000   28.99999  55.4%  10.4 1180s
 3352307 2434477   57.33296   49   49   65.00000   28.99999  55.4%  10.4 1185s
 3365900 2444029   44.99998   42   25   65.00000   28.99999  55.4%  10.4 1190s
 3379785 2453929   61.11105   65   33   65.00000   28.99999  55.4%  10.4 1195s
 3392494 2462749   38.33331   36   33   65.00000   28.99999  55.4%  10.5 1200s
 3406344 2472619   42.99998   38   35   65.00000   28.99999  55.4%  10.5 1205s
 3417656 2480825   53.99994   48   41   65.00000   28.99999  55.4%  10.5 1210s
 3431540 2490599   37.99999   35   33   65.00000   29.00000  55.4%  10.5 1215s
 3444938 2500078   56.11106   47   40   65.00000   29.00000  55.4%  10.5 1220s
 3456246 2507918   50.99998   45   28   65.00000   29.00000  55.4%  10.5 1225s
 3470954 2518411   43.99998   40   36   65.00000   29.00000  55.4%  10.5 1230s
 3485261 2528527   33.11110   30   22   65.00000   29.00000  55.4%  10.5 1235s
 3494536 2535055   62.58291   54   36   65.00000   29.00000  55.4%  10.5 1240s
 3509650 2545578     cutoff   62        65.00000   29.00000  55.4%  10.5 1245s
 3520892 2553273   43.99997   41   27   65.00000   29.00000  55.4%  10.5 1250s
 3537327 2565009   36.50000   33   14   65.00000   29.00000  55.4%  10.5 1255s
 3553142 2576165   59.33333   54   19   65.00000   29.00000  55.4%  10.5 1260s
 3567250 2586202   47.33333   46   12   65.00000   29.00000  55.4%  10.5 1265s
 3580507 2595420   50.00000   46   14   65.00000   29.00000  55.4%  10.5 1270s
 3595232 2605446   61.55556   52   27   65.00000   29.00000  55.4%  10.5 1275s
 3609218 2615239   55.00000   51   18   65.00000   29.00000  55.4%  10.5 1280s
 3624538 2626251   55.33333   50   12   65.00000   29.00000  55.4%  10.5 1285s
 3637527 2635272   61.00000   51    8   65.00000   29.00000  55.4%  10.5 1290s
 3650146 2644206   46.63636   45   18   65.00000   29.00000  55.4%  10.5 1296s
 3663291 2653113   39.00000   35   21   65.00000   29.00000  55.4%  10.5 1300s
 3676867 2662898   43.00000   37   10   65.00000   29.00000  55.4%  10.5 1305s
 3692123 2673547 infeasible   60        65.00000   29.00000  55.4%  10.5 1310s
 3707619 2684681   40.00000   38   16   65.00000   29.00000  55.4%  10.5 1315s
 3721306 2694184   59.50000   54   17   65.00000   29.00000  55.4%  10.5 1320s
 3736820 2705165     cutoff   57        65.00000   29.00000  55.4%  10.5 1325s
 3752126 2715890   38.66667   35   22   65.00000   29.00000  55.4%  10.5 1330s
 3763919 2724271   41.00000   41   11   65.00000   29.00000  55.4%  10.5 1335s
 3773367 2730678 infeasible   57        65.00000   29.00000  55.4%  10.5 1340s
 3786366 2740002   63.00000   61   14   65.00000   29.00000  55.4%  10.5 1346s
 3797997 2748244   34.00000   30   10   65.00000   29.00000  55.4%  10.5 1350s
 3812440 2758575   52.00000   44   26   65.00000   29.00000  55.4%  10.5 1355s
 3827390 2769481   46.00000   43   15   65.00000   29.00000  55.4%  10.5 1360s
 3839182 2778089   57.00000   47   17   65.00000   29.00000  55.4%  10.5 1365s
 3852884 2787831   59.33332   49   30   65.00000   29.00000  55.4%  10.5 1370s
 3868400 2798704     cutoff   56        65.00000   29.00000  55.4%  10.5 1375s
 3879249 2806309   51.00000   43   12   65.00000   29.00000  55.4%  10.5 1380s
 3893105 2816080   39.00000   37   12   65.00000   29.00000  55.4%  10.5 1385s
 3906701 2826079   43.66667   40   15   65.00000   29.00000  55.4%  10.5 1390s
 3918464 2834366 infeasible   67        65.00000   29.00000  55.4%  10.5 1395s
 3930778 2842997   41.33333   44   16   65.00000   29.00000  55.4%  10.5 1400s
 3944114 2852226   53.33333   55   21   65.00000   29.00000  55.4%  10.5 1405s
 3956428 2860709   60.33333   55   14   65.00000   29.00000  55.4%  10.5 1410s
 3966125 2867701   36.00000   35   15   65.00000   29.00000  55.4%  10.5 1415s
 3977446 2875640   57.99998   51   23   65.00000   29.00000  55.4%  10.5 1420s
 3991876 2885919   33.00000   31    9   65.00000   29.00000  55.4%  10.5 1425s
 4005175 2895239   52.00000   45   10   65.00000   29.00000  55.4%  10.4 1430s
 4018819 2905038   47.33333   42   10   65.00000   29.00000  55.4%  10.4 1435s
 4031923 2914222   57.33333   51   18   65.00000   29.00000  55.4%  10.4 1440s
 4047989 2925586   40.55556   38   13   65.00000   29.00000  55.4%  10.4 1445s
 4063167 2936491   32.66667   32   10   65.00000   29.00000  55.4%  10.4 1450s
 4078977 2947665   33.00000   35   12   65.00000   29.00000  55.4%  10.4 1455s
 4092573 2957409   54.33333   53   10   65.00000   29.00000  55.4%  10.4 1460s
 4107650 2967781   62.00000   56   12   65.00000   29.00000  55.4%  10.4 1465s
 4123112 2978594   41.50000   37   20   65.00000   29.00000  55.4%  10.4 1470s
 4134547 2986722   63.00000   55   18   65.00000   29.00000  55.4%  10.4 1475s
 4148618 2996664   34.33333   36   11   65.00000   29.00000  55.4%  10.4 1480s
 4162163 3006216   58.00000   52    4   65.00000   29.00000  55.4%  10.4 1485s
 4174157 3014613   53.33333   47   20   65.00000   29.00000  55.4%  10.4 1490s
 4186298 3023129 infeasible   56        65.00000   29.00000  55.4%  10.4 1495s
 4196373 3030429   46.33333   40   16   65.00000   29.00000  55.4%  10.4 1500s
 4209828 3039975   41.00000   35   17   65.00000   29.00000  55.4%  10.4 1505s
 4223086 3049581   49.33333   48   10   65.00000   29.00000  55.4%  10.4 1510s
 4236885 3059210 infeasible   69        65.00000   29.00000  55.4%  10.4 1515s
 4251941 3069914   45.00000   41   14   65.00000   29.00000  55.4%  10.4 1520s
 4267321 3080984   63.83333   53   18   65.00000   29.00000  55.4%  10.4 1525s
 4282981 3092228   50.99998   46   23   65.00000   29.00000  55.4%  10.4 1530s
 4296523 3102166   34.33333   32   10   65.00000   29.00000  55.4%  10.4 1535s
 4310146 3111659   43.99999   43   13   65.00000   29.00000  55.4%  10.4 1540s
 4325460 3122652   59.00000   57   10   65.00000   29.00000  55.4%  10.4 1545s
 4339302 3132655   59.83333   49   28   65.00000   29.00000  55.4%  10.4 1550s
 4352626 3141944   52.33333   50   12   65.00000   29.00000  55.4%  10.4 1555s
 4370046 3154115   60.00000   59   14   65.00000   29.00000  55.4%  10.4 1560s
 4383623 3163569   52.00000   50   15   65.00000   29.00000  55.4%  10.4 1565s
 4398647 3174164   48.33333   44   10   65.00000   29.00000  55.4%  10.4 1570s
 4412014 3183516   58.00000   51    8   65.00000   29.00000  55.4%  10.4 1575s
 4425342 3192786   37.33333   34   12   65.00000   29.00000  55.4%  10.4 1580s
 4441542 3204357   42.00000   37   16   65.00000   29.00000  55.4%  10.4 1585s
 4456502 3214771   31.33333   30   11   65.00000   29.00000  55.4%  10.4 1590s
 4470070 3224229   59.24989   52   32   65.00000   29.00000  55.4%  10.4 1595s
 4485404 3235137   38.66667   37   22   65.00000   29.00000  55.4%  10.4 1600s
 4500987 3246111   64.00000   59   10   65.00000   29.00000  55.4%  10.4 1605s
 4516738 3257349 infeasible   58        65.00000   29.00000  55.4%  10.4 1610s
 4532294 3268342   33.33333   32   14   65.00000   29.00000  55.4%  10.4 1615s
 4545805 3277888   40.00000   41    8   65.00000   29.00000  55.4%  10.4 1620s
 4560197 3287985   61.16667   54   13   65.00000   29.00000  55.4%  10.4 1625s
 4574426 3297895   60.50000   54   11   65.00000   29.03704  55.3%  10.4 1630s
 4589978 3308992   47.00000   44    8   65.00000   29.05556  55.3%  10.4 1635s
 4601384 3317050 infeasible   56        65.00000   29.07771  55.3%  10.4 1640s
 4615354 3326813   49.33330   48   28   65.00000   29.11110  55.2%  10.4 1645s
 4629045 3336421   62.33333   50   10   65.00000   29.11111  55.2%  10.4 1650s
 4642670 3345821 infeasible   55        65.00000   29.16665  55.1%  10.4 1655s
 4655636 3354888   35.33333   32   19   65.00000   29.16667  55.1%  10.4 1660s
 4669455 3364654   53.00000   46   19   65.00000   29.16667  55.1%  10.4 1665s
 4683643 3374674   48.99985   45   30   65.00000   29.16667  55.1%  10.4 1670s
 4697368 3384600 infeasible   58        65.00000   29.16667  55.1%  10.4 1675s
 4713981 3396423   54.85185   51   16   65.00000   29.16667  55.1%  10.4 1680s
 4730090 3407630   44.00000   41   14   65.00000   29.22222  55.0%  10.4 1685s
 4745971 3418815   47.11111   45   23   65.00000   29.25000  55.0%  10.4 1690s
 4762456 3430086   51.99997   47   24   65.00000   29.27777  55.0%  10.4 1695s
 4774514 3438400   38.55551   36   36   65.00000   29.33331  54.9%  10.4 1700s
 4788222 3448070   30.33332   30   30   65.00000   29.33332  54.9%  10.4 1705s
 4800365 3456541   62.12626   60   38   65.00000   29.33333  54.9%  10.4 1710s
 4809281 3462574   38.33333   38   11   65.00000   29.33333  54.9%  10.4 1715s
 4824462 3473251   39.77778   40   17   65.00000   29.33333  54.9%  10.4 1720s
 4837077 3481762     cutoff   55        65.00000   29.33333  54.9%  10.4 1725s
 4851434 3491583     cutoff   60        65.00000   29.33333  54.9%  10.4 1730s
 4864992 3501015   53.00000   50   18   65.00000   29.33333  54.9%  10.4 1735s
 4878813 3510917   58.58333   54   13   65.00000   29.33333  54.9%  10.4 1740s
 4891793 3519916   61.00000   56   13   65.00000   29.33333  54.9%  10.4 1745s
 4903710 3528356   33.50000   36   19   65.00000   29.33333  54.9%  10.4 1750s
 4918321 3538607   56.00000   48   15   65.00000   29.33333  54.9%  10.4 1755s
 4932841 3548705   45.00000   39   16   65.00000   29.33333  54.9%  10.4 1760s
 4947341 3558776   39.00000   38   15   65.00000   29.33333  54.9%  10.4 1765s
 4961525 3568993   48.33332   45   15   65.00000   29.33333  54.9%  10.4 1770s
 4975217 3578638   49.66667   46   19   65.00000   29.38889  54.8%  10.4 1775s
 4987702 3587270   61.77778   60   14   65.00000   29.41934  54.7%  10.4 1780s
 4999306 3595210   34.00000   31   17   65.00000   29.44444  54.7%  10.4 1785s
 5013524 3605228   59.99985   52   32   65.00000   29.49998  54.6%  10.4 1790s
 5025375 3613581 infeasible   62        65.00000   29.50000  54.6%  10.4 1795s
 5036193 3621082   33.00000   34   12   65.00000   29.50000  54.6%  10.4 1800s

Explored 5038131 nodes (52264174 simplex iterations) in 1800.03 seconds
Thread count was 16 (of 16 available processors)

Solution count 8: 65 66 67 ... 83

Time limit reached
Best objective 6.500000000000e+01, best bound 3.000000000000e+01, gap 53.8462%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    706.5 MiB    706.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    706.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    706.5 MiB      0.0 MiB       m2 = m.construct()
    28    706.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    706.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    706.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    706.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    706.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    706.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    706.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    706.5 MiB      0.0 MiB       m2.update()
    44    706.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    706.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    706.5 MiB      0.0 MiB       if(set_binary):
    51    706.5 MiB      0.0 MiB           for x in set_binary:
    52    706.5 MiB      0.0 MiB               current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    706.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   4301.4 MiB   3594.9 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   4301.4 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   4301.4 MiB      0.0 MiB       j = 0
    69   4301.4 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   4301.4 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   4301.4 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   4301.4 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   4301.4 MiB      0.0 MiB       if m2.status == 9:
    78   4301.4 MiB      0.0 MiB           result.timeout = True
    79   4301.4 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   4301.4 MiB      0.0 MiB           result.solution = True
    81   4301.4 MiB      0.0 MiB           result.feasible = True
    82   4301.4 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   4301.4 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   4301.4 MiB      0.0 MiB           for v in current_vars:
    85   4301.4 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   4301.4 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   4301.4 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   4301.4 MiB      0.0 MiB                   j = j+1
    91                             
    92   4301.4 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:24:20 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.tra,lab' -mdp /tmp/tmp2q3rdack

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmax-2-4-subsys-0.9999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp2q3rdack"...

1 property:
(1) "reach_min": Pmax=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmax=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 26 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.027 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      67 (1 initial)
Transitions: 143
Choices:     128

Transition matrix: 268 nodes (3 terminal), 143 minterms, vars: 7r/7c/2nd

Prob0A: 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1E: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 66, no = 1, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.007 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e-01   2.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     335    3.0200000e+01   0.000000e+00   0.000000e+00      0s

Solved in 335 iterations and 0.02 seconds
Optimal objective  3.020000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1356.9 MiB   1356.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1356.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1356.9 MiB      0.0 MiB       m2 = m.construct()
    28   1356.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1356.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1356.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1356.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1356.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1356.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1356.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1356.9 MiB      0.0 MiB       m2.update()
    44   1356.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1356.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1356.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1356.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1356.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1356.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1356.9 MiB      0.0 MiB       j = 0
    69   1356.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1356.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1356.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1356.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1356.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1356.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1356.9 MiB      0.0 MiB           result.solution = True
    81   1356.9 MiB      0.0 MiB           result.feasible = True
    82   1356.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1356.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1356.9 MiB      0.0 MiB           for v in current_vars:
    85   1356.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1356.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1356.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1356.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1356.9 MiB      0.0 MiB       return result, res_vec



subsystem size:283

pr_min: 0.1
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:24:21 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.1.tra,lab' -mdp /tmp/tmpdqpz5p5k

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.1.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.1.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpdqpz5p5k"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Time for model construction: 0.053 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      285 (1 initial)
Transitions: 669
Choices:     537

Transition matrix: 636 nodes (3 terminal), 669 minterms, vars: 9r/9c/2nd

Prob0E: 57 iterations in 0.00 seconds (average 0.000070, setup 0.00)

Prob1A: 30 iterations in 0.00 seconds (average 0.000133, setup 0.00)

yes = 22, no = 1, maybe = 262

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=674] [31.6 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.1 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.2 KB]
TOTAL: [41.9 KB]

Starting iterations...

Iterative method: 2820 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.28210448812756445

Time for model checking: 0.031 seconds.

Result: 0.28210448812756445 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e-01   2.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     335    3.0200000e+01   0.000000e+00   0.000000e+00      0s

Solved in 335 iterations and 0.02 seconds
Optimal objective  3.020000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1356.9 MiB   1356.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1356.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1356.9 MiB      0.0 MiB       m2 = m.construct()
    28   1356.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1356.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1356.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1356.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1356.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1356.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1356.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1356.9 MiB      0.0 MiB       m2.update()
    44   1356.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1356.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1356.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1356.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1356.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1356.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1356.9 MiB      0.0 MiB       j = 0
    69   1356.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1356.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1356.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1356.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1356.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1356.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1356.9 MiB      0.0 MiB           result.solution = True
    81   1356.9 MiB      0.0 MiB           result.feasible = True
    82   1356.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1356.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1356.9 MiB      0.0 MiB           for v in current_vars:
    85   1356.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1356.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1356.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1356.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1356.9 MiB      0.0 MiB       return result, res_vec



subsystem size:283

pr_min: 0.1
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [3e+00, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   2.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     256    2.3162473e+02   0.000000e+00   0.000000e+00      0s

Solved in 256 iterations and 0.01 seconds
Optimal objective  2.316247259e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1356.9 MiB   1356.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1356.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1356.9 MiB      0.0 MiB       m2 = m.construct()
    28   1356.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1356.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1356.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1356.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1356.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1356.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1356.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1356.9 MiB      0.0 MiB       m2.update()
    44   1356.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1356.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1356.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1356.9 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64   1356.9 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67   1356.9 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68   1356.9 MiB      0.0 MiB       j = 0
    69   1356.9 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71   1356.9 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73   1356.9 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75   1356.9 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77   1356.9 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79   1356.9 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80   1356.9 MiB      0.0 MiB           result.solution = True
    81   1356.9 MiB      0.0 MiB           result.feasible = True
    82   1356.9 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83   1356.9 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84   1356.9 MiB      0.0 MiB           for v in current_vars:
    85   1356.9 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86   1356.9 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87   1356.9 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90   1356.9 MiB      0.0 MiB                   j = j+1
    91                             
    92   1356.9 MiB      0.0 MiB       return result, res_vec



subsystem size:217

pr_min: 0.1
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:24:23 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.1.tra,lab' -mdp /tmp/tmpe6cwcy6o

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.1.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.1.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpe6cwcy6o"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.043 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      219 (1 initial)
Transitions: 520
Choices:     418

Transition matrix: 467 nodes (3 terminal), 520 minterms, vars: 8r/8c/2nd

Prob0E: 45 iterations in 0.00 seconds (average 0.000089, setup 0.00)

Prob1A: 24 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 16, no = 1, maybe = 202

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=526] [24.7 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [2.4 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.7 KB]
TOTAL: [32.6 KB]

Starting iterations...

Iterative method: 1632 iterations in 0.01 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.20914713312910405

Time for model checking: 0.02 seconds.

Result: 0.20914713312910405 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1313 rows, 1056 columns and 2805 nonzeros
Variable types: 528 continuous, 528 integer (528 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e-01, 1e+00]
Presolve removed 178 rows and 169 columns
Presolve time: 0.01s
Presolved: 1135 rows, 887 columns, 2460 nonzeros
Variable types: 414 continuous, 473 integer (473 binary)
Found heuristic solution: objective 527.0000000

Root relaxation: objective 3.290000e+01, 659 iterations, 0.03 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0   32.90000    0  286  527.00000   32.90000  93.8%     -    0s
     0     2   32.90000    0  286  527.00000   32.90000  93.8%     -    5s
H   36    14                     235.0000000   43.39086  81.5%  45.9    9s
H  111    63                     177.0000000   49.55901  72.0%  46.1    9s
   415   202  153.29917   31   77  177.00000   55.26384  68.8%  19.0   10s
H 1861  1124                     166.0000000   63.90892  61.5%   7.8   11s
  2145  1257  139.56728   47  286  166.00000   63.90892  61.5%   7.9   16s
  2148  1259   86.35303   19  265  166.00000   63.90892  61.5%   7.9   22s
  2149  1261     cutoff   13       166.00000   63.90892  61.5%   8.3   26s
  2951  1373  126.20449   73   90  166.00000   71.53700  56.9%  13.9   32s
  5470  2159  137.23467   89   90  166.00000   81.37084  51.0%  11.3   35s
 10408  3767  149.10877  106   85  166.00000  118.93214  28.4%  12.0   40s
 15112  2206 infeasible  116       166.00000  148.97124  10.3%  17.4   46s

Explored 18080 nodes (371443 simplex iterations) in 48.70 seconds
Thread count was 16 (of 16 available processors)

Solution count 4: 166 177 235 527 

Optimal solution found (tolerance 0.00e+00)
Best objective 1.660000000000e+02, best bound 1.660000000000e+02, gap 0.0000%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   1356.9 MiB   1356.9 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26   1356.9 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27   1356.9 MiB      0.0 MiB       m2 = m.construct()
    28   1356.9 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29   1356.9 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30   1356.9 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31   1356.9 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32   1356.9 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33   1356.9 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34   1356.9 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43   1356.9 MiB      0.0 MiB       m2.update()
    44   1356.9 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46   1356.9 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50   1356.9 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54   1356.9 MiB      0.0 MiB       if(find_optimum):
    55   1356.9 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56   1356.9 MiB      0.0 MiB           m2.update()
    57   1356.9 MiB      0.0 MiB           new_obj = LinExpr(0)
    58   1356.9 MiB      0.0 MiB           for var in current_vars:
    59   1356.9 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60   1356.9 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61   1356.9 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62   1356.9 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.6 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.6 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.6 MiB      0.0 MiB       j = 0
    69    190.6 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.6 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.6 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.6 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.6 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.6 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.6 MiB      0.0 MiB           result.solution = True
    81    190.6 MiB      0.0 MiB           result.feasible = True
    82    190.6 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.6 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.6 MiB      0.0 MiB           for v in current_vars:
    85    190.6 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.6 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.6 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89    190.6 MiB      0.0 MiB                       res_vec[j] = 0
    90    190.6 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.6 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:25:12 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.1.tra,lab' -mdp /tmp/tmpl806uzml

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.1.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.1.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpl806uzml"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 32 iterations in 0.00 seconds (average 0.000125, setup 0.00)

Time for model construction: 0.039 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      168 (1 initial)
Transitions: 386
Choices:     308

Transition matrix: 588 nodes (3 terminal), 386 minterms, vars: 8r/8c/2nd

Prob0E: 34 iterations in 0.00 seconds (average 0.000118, setup 0.00)

Prob1A: 19 iterations in 0.00 seconds (average 0.000211, setup 0.00)

yes = 16, no = 1, maybe = 151

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=621] [29.1 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [1.8 KB]
Creating vector for yes... [dist=2, compact] [0.3 KB]
Allocating iteration vectors... [3 x 1.3 KB]
TOTAL: [35.2 KB]

Starting iterations...

Iterative method: 764 iterations in 0.00 seconds (average 0.000005, setup 0.00)

Value in the initial state: 0.10449218688716494

Time for model checking: 0.014 seconds.

Result: 0.10449218688716494 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [2e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    2.0000000e-01   4.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     335    6.0400000e+01   0.000000e+00   0.000000e+00      0s

Solved in 335 iterations and 0.02 seconds
Optimal objective  6.040000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:283

pr_min: 0.2
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:25:13 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.2.tra,lab' -mdp /tmp/tmpjzb6nisw

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.2.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.2.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpjzb6nisw"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Time for model construction: 0.053 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      285 (1 initial)
Transitions: 669
Choices:     537

Transition matrix: 636 nodes (3 terminal), 669 minterms, vars: 9r/9c/2nd

Prob0E: 57 iterations in 0.01 seconds (average 0.000140, setup 0.00)

Prob1A: 30 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 22, no = 1, maybe = 262

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=674] [31.6 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.1 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.2 KB]
TOTAL: [41.9 KB]

Starting iterations...

Iterative method: 2820 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.28210448812756445

Time for model checking: 0.031 seconds.

Result: 0.28210448812756445 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [2e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    2.0000000e-01   4.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     335    6.0400000e+01   0.000000e+00   0.000000e+00      0s

Solved in 335 iterations and 0.02 seconds
Optimal objective  6.040000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:283

pr_min: 0.2
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [2e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   4.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     256    2.3162473e+02   0.000000e+00   0.000000e+00      0s

Solved in 256 iterations and 0.01 seconds
Optimal objective  2.316247259e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:217

pr_min: 0.2
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:25:15 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.2.tra,lab' -mdp /tmp/tmpmm61rrot

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.2.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.2.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpmm61rrot"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.042 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      219 (1 initial)
Transitions: 520
Choices:     418

Transition matrix: 467 nodes (3 terminal), 520 minterms, vars: 8r/8c/2nd

Prob0E: 45 iterations in 0.00 seconds (average 0.000089, setup 0.00)

Prob1A: 24 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 16, no = 1, maybe = 202

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=526] [24.7 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [2.4 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.7 KB]
TOTAL: [32.6 KB]

Starting iterations...

Iterative method: 1632 iterations in 0.01 seconds (average 0.000005, setup 0.00)

Value in the initial state: 0.20914713312910405

Time for model checking: 0.019 seconds.

Result: 0.20914713312910405 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1313 rows, 1056 columns and 2805 nonzeros
Variable types: 528 continuous, 528 integer (528 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [2e-01, 1e+00]
Presolve removed 188 rows and 179 columns
Presolve time: 0.02s
Presolved: 1125 rows, 877 columns, 2440 nonzeros
Variable types: 414 continuous, 463 integer (463 binary)
Found heuristic solution: objective 528.0000000

Root relaxation: objective 7.080000e+01, 667 iterations, 0.03 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0   70.80000    0  276  528.00000   70.80000  86.6%     -    0s
H    0     0                     258.0000000   70.80000  72.6%     -    1s
     0     2   71.60000    0  275  258.00000   71.60000  72.2%     -    4s
     2     3   72.40000    1  276  258.00000   72.40000  71.9%   5.5    7s
H    4     3                     249.0000000  120.99909  51.4%   2.8    8s
     6     7  129.62007   16  194  249.00000  122.73795  50.7%   111   10s
H   58    16                     193.0000000  134.56974  30.3%  31.7   14s
   617   125  186.99530   59  105  193.00000  148.30822  23.2%  15.5   15s

Explored 1586 nodes (30065 simplex iterations) in 16.51 seconds
Thread count was 16 (of 16 available processors)

Solution count 4: 193 249 258 528 

Optimal solution found (tolerance 0.00e+00)
Best objective 1.930000000000e+02, best bound 1.930000000000e+02, gap 0.0000%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55    190.5 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56    190.5 MiB      0.0 MiB           m2.update()
    57    190.5 MiB      0.0 MiB           new_obj = LinExpr(0)
    58    190.5 MiB      0.0 MiB           for var in current_vars:
    59    190.5 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60    190.5 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61    190.5 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62    190.5 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89    190.5 MiB      0.0 MiB                       res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:25:33 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.2.tra,lab' -mdp /tmp/tmpgvb0w9o1

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.2.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.2.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpgvb0w9o1"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 32 iterations in 0.00 seconds (average 0.000125, setup 0.00)

Time for model construction: 0.042 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      195 (1 initial)
Transitions: 450
Choices:     362

Transition matrix: 577 nodes (3 terminal), 450 minterms, vars: 8r/8c/2nd

Prob0E: 39 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1A: 22 iterations in 0.00 seconds (average 0.000182, setup 0.00)

yes = 16, no = 1, maybe = 178

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=625] [29.3 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [2.1 KB]
Creating vector for yes... [dist=2, compact] [0.4 KB]
Allocating iteration vectors... [3 x 1.5 KB]
TOTAL: [36.3 KB]

Starting iterations...

Iterative method: 1164 iterations in 0.00 seconds (average 0.000003, setup 0.00)

Value in the initial state: 0.2003906232675576

Time for model checking: 0.016 seconds.

Result: 0.2003906232675576 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [3e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    3.0000000e-01   6.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     337    9.0600000e+01   0.000000e+00   0.000000e+00      0s

Solved in 337 iterations and 0.02 seconds
Optimal objective  9.060000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:292

pr_min: 0.30000000000000004
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:25:33 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.30000000000000004.tra,lab' -mdp /tmp/tmp44mfvicg

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.30000000000000004.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.30000000000000004.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp44mfvicg"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Time for model construction: 0.054 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      294 (1 initial)
Transitions: 682
Choices:     550

Transition matrix: 705 nodes (3 terminal), 682 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 31 iterations in 0.00 seconds (average 0.000129, setup 0.00)

yes = 31, no = 1, maybe = 262

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=685] [32.1 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.1 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.3 KB]
TOTAL: [42.7 KB]

Starting iterations...

Iterative method: 2148 iterations in 0.01 seconds (average 0.000006, setup 0.00)

Value in the initial state: 0.5078431271261226

Time for model checking: 0.027 seconds.

Result: 0.5078431271261226 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [3e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    3.0000000e-01   6.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     337    9.0600000e+01   0.000000e+00   0.000000e+00      0s

Solved in 337 iterations and 0.02 seconds
Optimal objective  9.060000000e+01
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:292

pr_min: 0.30000000000000004
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [3e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   6.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     333    2.9200000e+02   0.000000e+00   0.000000e+00      0s

Solved in 333 iterations and 0.02 seconds
Optimal objective  2.920000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:292

pr_min: 0.30000000000000004
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:25:35 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.30000000000000004.tra,lab' -mdp /tmp/tmpi2r0c6k1

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.30000000000000004.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.30000000000000004.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpi2r0c6k1"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Time for model construction: 0.054 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      294 (1 initial)
Transitions: 682
Choices:     550

Transition matrix: 705 nodes (3 terminal), 682 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 31 iterations in 0.00 seconds (average 0.000129, setup 0.00)

yes = 31, no = 1, maybe = 262

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=685] [32.1 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.1 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.3 KB]
TOTAL: [42.7 KB]

Starting iterations...

Iterative method: 2148 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.5078431271261226

Time for model checking: 0.027 seconds.

Result: 0.5078431271261226 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1313 rows, 1056 columns and 2805 nonzeros
Variable types: 528 continuous, 528 integer (528 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [3e-01, 1e+00]
Presolve removed 188 rows and 179 columns
Presolve time: 0.01s
Presolved: 1125 rows, 877 columns, 2440 nonzeros
Variable types: 414 continuous, 463 integer (463 binary)
Found heuristic solution: objective 528.0000000

Root relaxation: objective 9.970000e+01, 661 iterations, 0.03 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0   99.70000    0  284  528.00000   99.70000  81.1%     -    0s
     0     2   99.70000    0  284  528.00000   99.70000  81.1%     -    5s
     6     9  177.86250   14  162  528.00000  166.76667  68.4%  92.0   10s
H   46    12                     265.0000000  173.44000  34.6%  24.3   10s
H  207    29                     257.0000000  180.61563  29.7%  22.6   13s
H  460    55                     233.0000000  190.14286  18.4%  18.4   14s
  1079     3  231.32878   95   70  233.00000  215.34978  7.58%  21.1   15s

Explored 1245 nodes (27111 simplex iterations) in 15.14 seconds
Thread count was 16 (of 16 available processors)

Solution count 4: 233 257 265 528 

Optimal solution found (tolerance 0.00e+00)
Best objective 2.330000000000e+02, best bound 2.330000000000e+02, gap 0.0000%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55    190.5 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56    190.5 MiB      0.0 MiB           m2.update()
    57    190.5 MiB      0.0 MiB           new_obj = LinExpr(0)
    58    190.5 MiB      0.0 MiB           for var in current_vars:
    59    190.5 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60    190.5 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61    190.5 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62    190.5 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89    190.5 MiB      0.0 MiB                       res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:25:51 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.30000000000000004.tra,lab' -mdp /tmp/tmpxiokq3yr

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.30000000000000004.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.30000000000000004.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpxiokq3yr"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 41 iterations in 0.00 seconds (average 0.000098, setup 0.00)

Time for model construction: 0.046 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      235 (1 initial)
Transitions: 520
Choices:     418

Transition matrix: 648 nodes (3 terminal), 520 minterms, vars: 8r/8c/2nd

Prob0E: 42 iterations in 0.00 seconds (average 0.000095, setup 0.00)

Prob1A: 28 iterations in 0.00 seconds (average 0.000143, setup 0.00)

yes = 16, no = 1, maybe = 218

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=8, nodes=700] [32.8 KB]
Adding sparse bits... [levels=8-8, num=2, compact=2/2] [2.4 KB]
Creating vector for yes... [dist=2, compact] [0.5 KB]
Allocating iteration vectors... [3 x 1.8 KB]
TOTAL: [41.2 KB]

Starting iterations...

Iterative method: 1455 iterations in 0.01 seconds (average 0.000005, setup 0.00)

Value in the initial state: 0.30305989293164004

Time for model checking: 0.02 seconds.

Result: 0.30305989293164004 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [4e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    4.0000000e-01   8.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     337    1.2080000e+02   0.000000e+00   0.000000e+00      0s

Solved in 337 iterations and 0.02 seconds
Optimal objective  1.208000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:292

pr_min: 0.4
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:25:52 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.4.tra,lab' -mdp /tmp/tmphcsr355_

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.4.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.4.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmphcsr355_"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Time for model construction: 0.054 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      294 (1 initial)
Transitions: 682
Choices:     550

Transition matrix: 705 nodes (3 terminal), 682 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 31 iterations in 0.00 seconds (average 0.000129, setup 0.00)

yes = 31, no = 1, maybe = 262

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=685] [32.1 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.1 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.3 KB]
TOTAL: [42.7 KB]

Starting iterations...

Iterative method: 2148 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.5078431271261226

Time for model checking: 0.028 seconds.

Result: 0.5078431271261226 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [4e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    4.0000000e-01   8.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     337    1.2080000e+02   0.000000e+00   0.000000e+00      0s

Solved in 337 iterations and 0.02 seconds
Optimal objective  1.208000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:292

pr_min: 0.4
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [4e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   8.000000e-01   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     330    2.9200000e+02   0.000000e+00   0.000000e+00      0s

Solved in 330 iterations and 0.01 seconds
Optimal objective  2.920000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:292

pr_min: 0.4
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:25:54 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.4.tra,lab' -mdp /tmp/tmpt2bmu_gg

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.4.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.4.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpt2bmu_gg"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.054 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      294 (1 initial)
Transitions: 682
Choices:     550

Transition matrix: 705 nodes (3 terminal), 682 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 31 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 31, no = 1, maybe = 262

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=685] [32.1 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.1 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.3 KB]
TOTAL: [42.7 KB]

Starting iterations...

Iterative method: 2148 iterations in 0.01 seconds (average 0.000006, setup 0.00)

Value in the initial state: 0.5078431271261226

Time for model checking: 0.027 seconds.

Result: 0.5078431271261226 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1313 rows, 1056 columns and 2805 nonzeros
Variable types: 528 continuous, 528 integer (528 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [4e-01, 1e+00]
Presolve removed 233 rows and 224 columns
Presolve time: 0.05s
Presolved: 1080 rows, 832 columns, 2348 nonzeros
Variable types: 414 continuous, 418 integer (418 binary)
Found heuristic solution: objective 528.0000000

Root relaxation: objective 1.544000e+02, 603 iterations, 0.03 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  154.40000    0  241  528.00000  154.40000  70.8%     -    0s
H    0     0                     304.0000000  154.40000  49.2%     -    0s
     0     2  170.00000    0  215  304.00000  170.00000  44.1%     -    1s
H   72    12                     273.0000000  215.57143  21.0%  25.0    4s
    84    11  218.00952   21  113  273.00000  218.00952  20.1%  25.7    6s

Explored 1511 nodes (38963 simplex iterations) in 8.47 seconds
Thread count was 16 (of 16 available processors)

Solution count 3: 273 304 528 

Optimal solution found (tolerance 0.00e+00)
Best objective 2.730000000000e+02, best bound 2.730000000000e+02, gap 0.0000%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55    190.5 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56    190.5 MiB      0.0 MiB           m2.update()
    57    190.5 MiB      0.0 MiB           new_obj = LinExpr(0)
    58    190.5 MiB      0.0 MiB           for var in current_vars:
    59    190.5 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60    190.5 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61    190.5 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62    190.5 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89    190.5 MiB      0.0 MiB                       res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:03 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.4.tra,lab' -mdp /tmp/tmpucuft3p7

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.4.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.4.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpucuft3p7"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 38 iterations in 0.00 seconds (average 0.000105, setup 0.00)

Time for model construction: 0.051 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      275 (1 initial)
Transitions: 630
Choices:     506

Transition matrix: 691 nodes (3 terminal), 630 minterms, vars: 9r/9c/2nd

Prob0E: 51 iterations in 0.01 seconds (average 0.000157, setup 0.00)

Prob1A: 31 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 16, no = 1, maybe = 258

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=743] [34.8 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [2.9 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.1 KB]
TOTAL: [44.8 KB]

Starting iterations...

Iterative method: 2220 iterations in 0.02 seconds (average 0.000005, setup 0.00)

Value in the initial state: 0.40016740564490944

Time for model checking: 0.028 seconds.

Result: 0.40016740564490944 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [5e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    5.0000000e-01   1.000000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     337    1.5100000e+02   0.000000e+00   0.000000e+00      0s

Solved in 337 iterations and 0.02 seconds
Optimal objective  1.510000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:292

pr_min: 0.5
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:04 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.5.tra,lab' -mdp /tmp/tmp9pixgnf9

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.5.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.5.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp9pixgnf9"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.054 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      294 (1 initial)
Transitions: 682
Choices:     550

Transition matrix: 705 nodes (3 terminal), 682 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 31 iterations in 0.00 seconds (average 0.000129, setup 0.00)

yes = 31, no = 1, maybe = 262

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=685] [32.1 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.1 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.3 KB]
TOTAL: [42.7 KB]

Starting iterations...

Iterative method: 2148 iterations in 0.01 seconds (average 0.000006, setup 0.00)

Value in the initial state: 0.5078431271261226

Time for model checking: 0.027 seconds.

Result: 0.5078431271261226 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [5e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    5.0000000e-01   1.000000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     337    1.5100000e+02   0.000000e+00   0.000000e+00      0s

Solved in 337 iterations and 0.02 seconds
Optimal objective  1.510000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:292

pr_min: 0.5
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [5e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   1.000000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     331    2.9200000e+02   0.000000e+00   0.000000e+00      0s

Solved in 331 iterations and 0.02 seconds
Optimal objective  2.920000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec



subsystem size:292

pr_min: 0.5
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:06 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.5.tra,lab' -mdp /tmp/tmpk16g6z9u

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.5.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.5.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpk16g6z9u"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000138, setup 0.00)

Time for model construction: 0.055 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      294 (1 initial)
Transitions: 682
Choices:     550

Transition matrix: 705 nodes (3 terminal), 682 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 31 iterations in 0.00 seconds (average 0.000129, setup 0.00)

yes = 31, no = 1, maybe = 262

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=685] [32.1 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.1 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.3 KB]
TOTAL: [42.7 KB]

Starting iterations...

Iterative method: 2148 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.5078431271261226

Time for model checking: 0.027 seconds.

Result: 0.5078431271261226 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1313 rows, 1056 columns and 2805 nonzeros
Variable types: 528 continuous, 528 integer (528 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [5e-01, 1e+00]
Presolve removed 274 rows and 280 columns
Presolve time: 0.09s
Presolved: 1039 rows, 776 columns, 2251 nonzeros
Variable types: 414 continuous, 362 integer (362 binary)
Found heuristic solution: objective 528.0000000

Root relaxation: objective 2.070000e+02, 568 iterations, 0.02 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  207.00000    0  176  528.00000  207.00000  60.8%     -    0s
H    0     0                     292.0000000  207.00000  29.1%     -    0s
     0     2  215.50000    0  159  292.00000  215.50000  26.2%     -    0s

Explored 180 nodes (7160 simplex iterations) in 4.39 seconds
Thread count was 16 (of 16 available processors)

Solution count 2: 292 528 

Optimal solution found (tolerance 0.00e+00)
Best objective 2.920000000000e+02, best bound 2.920000000000e+02, gap 0.0000%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.5 MiB    190.5 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.5 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.5 MiB      0.0 MiB       m2 = m.construct()
    28    190.5 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.5 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.5 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.5 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.5 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.5 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.5 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.5 MiB      0.0 MiB       m2.update()
    44    190.5 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.5 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.5 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.5 MiB      0.0 MiB       if(find_optimum):
    55    190.5 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56    190.5 MiB      0.0 MiB           m2.update()
    57    190.5 MiB      0.0 MiB           new_obj = LinExpr(0)
    58    190.5 MiB      0.0 MiB           for var in current_vars:
    59    190.5 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60    190.5 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61    190.5 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62    190.5 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.5 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.5 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.5 MiB      0.0 MiB       j = 0
    69    190.5 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.5 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.5 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.5 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.5 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.5 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.5 MiB      0.0 MiB           result.solution = True
    81    190.5 MiB      0.0 MiB           result.feasible = True
    82    190.5 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.5 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.5 MiB      0.0 MiB           for v in current_vars:
    85    190.5 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.5 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.5 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89    190.5 MiB      0.0 MiB                       res_vec[j] = 0
    90    190.5 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.5 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:11 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.5.tra,lab' -mdp /tmp/tmpfl8u3hmq

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.5.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.5.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpfl8u3hmq"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 29 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.054 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      294 (1 initial)
Transitions: 682
Choices:     550

Transition matrix: 705 nodes (3 terminal), 682 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 31 iterations in 0.00 seconds (average 0.000129, setup 0.00)

yes = 31, no = 1, maybe = 262

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=685] [32.1 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.1 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.3 KB]
TOTAL: [42.7 KB]

Starting iterations...

Iterative method: 2148 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.5078431271261226

Time for model checking: 0.028 seconds.

Result: 0.5078431271261226 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [6e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    6.0000000e-01   1.200000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     351    1.8320000e+02   0.000000e+00   0.000000e+00      0s

Solved in 351 iterations and 0.02 seconds
Optimal objective  1.832000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:308

pr_min: 0.6
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:12 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.6.tra,lab' -mdp /tmp/tmpm1tigd3g

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.6.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.6.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpm1tigd3g"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 32 iterations in 0.01 seconds (average 0.000250, setup 0.00)

Time for model construction: 0.055 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      310 (1 initial)
Transitions: 702
Choices:     566

Transition matrix: 696 nodes (3 terminal), 702 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 34 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 31, no = 1, maybe = 278

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=721] [33.8 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.2 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.4 KB]
TOTAL: [44.9 KB]

Starting iterations...

Iterative method: 2160 iterations in 0.01 seconds (average 0.000006, setup 0.00)

Value in the initial state: 0.6718954118086177

Time for model checking: 0.03 seconds.

Result: 0.6718954118086177 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [6e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    6.0000000e-01   1.200000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     351    1.8320000e+02   0.000000e+00   0.000000e+00      0s

Solved in 351 iterations and 0.02 seconds
Optimal objective  1.832000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:308

pr_min: 0.6
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [6e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   1.200000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     366    3.0800000e+02   0.000000e+00   0.000000e+00      0s

Solved in 366 iterations and 0.02 seconds
Optimal objective  3.080000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:308

pr_min: 0.6
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:14 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.6.tra,lab' -mdp /tmp/tmplk4ioafi

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.6.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.6.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmplk4ioafi"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 32 iterations in 0.00 seconds (average 0.000125, setup 0.00)

Time for model construction: 0.054 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      310 (1 initial)
Transitions: 702
Choices:     566

Transition matrix: 696 nodes (3 terminal), 702 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 34 iterations in 0.00 seconds (average 0.000118, setup 0.00)

yes = 31, no = 1, maybe = 278

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=721] [33.8 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.2 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.4 KB]
TOTAL: [44.9 KB]

Starting iterations...

Iterative method: 2160 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.6718954118086177

Time for model checking: 0.03 seconds.

Result: 0.6718954118086177 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1313 rows, 1056 columns and 2805 nonzeros
Variable types: 528 continuous, 528 integer (528 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [6e-01, 1e+00]
Presolve removed 294 rows and 312 columns
Presolve time: 0.14s
Presolved: 1019 rows, 744 columns, 2199 nonzeros
Variable types: 414 continuous, 330 integer (330 binary)
Found heuristic solution: objective 528.0000000

Root relaxation: objective 2.408000e+02, 536 iterations, 0.02 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  240.80000    0  156  528.00000  240.80000  54.4%     -    0s
H    0     0                     308.0000000  240.80000  21.8%     -    0s
     0     0  282.36833    0   41  308.00000  282.36833  8.32%     -    0s
     0     2  285.36677    0   33  308.00000  285.36677  7.35%     -    0s

Cutting planes:
  Cover: 1
  Implied bound: 2

Explored 120 nodes (3220 simplex iterations) in 1.10 seconds
Thread count was 16 (of 16 available processors)

Solution count 2: 308 528 

Optimal solution found (tolerance 0.00e+00)
Best objective 3.080000000000e+02, best bound 3.080000000000e+02, gap 0.0000%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55    190.2 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56    190.2 MiB      0.0 MiB           m2.update()
    57    190.2 MiB      0.0 MiB           new_obj = LinExpr(0)
    58    190.2 MiB      0.0 MiB           for var in current_vars:
    59    190.2 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60    190.2 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61    190.2 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62    190.2 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89    190.2 MiB      0.0 MiB                       res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:16 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.6.tra,lab' -mdp /tmp/tmpybey4k_n

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.6.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.6.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpybey4k_n"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 32 iterations in 0.00 seconds (average 0.000125, setup 0.00)

Time for model construction: 0.054 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      310 (1 initial)
Transitions: 702
Choices:     566

Transition matrix: 696 nodes (3 terminal), 702 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 34 iterations in 0.00 seconds (average 0.000118, setup 0.00)

yes = 31, no = 1, maybe = 278

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=721] [33.8 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.2 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.4 KB]
TOTAL: [44.9 KB]

Starting iterations...

Iterative method: 2160 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.6718954118086177

Time for model checking: 0.03 seconds.

Result: 0.6718954118086177 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [7e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    7.0000000e-01   1.400000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     364    2.1700000e+02   0.000000e+00   0.000000e+00      0s

Solved in 364 iterations and 0.02 seconds
Optimal objective  2.170000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:316

pr_min: 0.7
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:17 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7.tra,lab' -mdp /tmp/tmp31kds97k

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp31kds97k"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 35 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.055 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      318 (1 initial)
Transitions: 712
Choices:     574

Transition matrix: 728 nodes (3 terminal), 712 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 34 iterations in 0.00 seconds (average 0.000118, setup 0.00)

yes = 31, no = 1, maybe = 286

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=767] [36.0 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.3 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.5 KB]
TOTAL: [47.3 KB]

Starting iterations...

Iterative method: 2163 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.7126285792279754

Time for model checking: 0.031 seconds.

Result: 0.7126285792279754 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [7e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    7.0000000e-01   1.400000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     364    2.1700000e+02   0.000000e+00   0.000000e+00      0s

Solved in 364 iterations and 0.02 seconds
Optimal objective  2.170000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:316

pr_min: 0.7
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [7e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   1.400000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     362    3.1600000e+02   0.000000e+00   0.000000e+00      0s

Solved in 362 iterations and 0.02 seconds
Optimal objective  3.160000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:316

pr_min: 0.7
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:19 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7.tra,lab' -mdp /tmp/tmpn5jcvtf8

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpn5jcvtf8"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 35 iterations in 0.01 seconds (average 0.000229, setup 0.00)

Time for model construction: 0.055 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      318 (1 initial)
Transitions: 712
Choices:     574

Transition matrix: 728 nodes (3 terminal), 712 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 34 iterations in 0.00 seconds (average 0.000118, setup 0.00)

yes = 31, no = 1, maybe = 286

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=767] [36.0 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.3 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.5 KB]
TOTAL: [47.3 KB]

Starting iterations...

Iterative method: 2163 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.7126285792279754

Time for model checking: 0.031 seconds.

Result: 0.7126285792279754 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1313 rows, 1056 columns and 2805 nonzeros
Variable types: 528 continuous, 528 integer (528 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [7e-01, 1e+00]
Presolve removed 297 rows and 312 columns
Presolve time: 0.11s
Presolved: 1016 rows, 744 columns, 2196 nonzeros
Variable types: 414 continuous, 330 integer (330 binary)
Found heuristic solution: objective 528.0000000

Root relaxation: objective 2.602000e+02, 527 iterations, 0.02 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  260.20000    0  162  528.00000  260.20000  50.7%     -    0s
     0     2  272.20000    0  122  528.00000  272.20000  48.4%     -    2s
H    1     2                     324.0000000  273.40000  15.6%  43.0    2s
H    4     3                     316.0000000  301.74822  4.51%  10.8    2s

Explored 44 nodes (2583 simplex iterations) in 3.35 seconds
Thread count was 16 (of 16 available processors)

Solution count 3: 316 324 528 

Optimal solution found (tolerance 0.00e+00)
Best objective 3.160000000000e+02, best bound 3.160000000000e+02, gap 0.0000%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55    190.2 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56    190.2 MiB      0.0 MiB           m2.update()
    57    190.2 MiB      0.0 MiB           new_obj = LinExpr(0)
    58    190.2 MiB      0.0 MiB           for var in current_vars:
    59    190.2 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60    190.2 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61    190.2 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62    190.2 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89    190.2 MiB      0.0 MiB                       res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:23 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7.tra,lab' -mdp /tmp/tmpzblp5jj0

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpzblp5jj0"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 35 iterations in 0.01 seconds (average 0.000229, setup 0.00)

Time for model construction: 0.055 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      318 (1 initial)
Transitions: 712
Choices:     574

Transition matrix: 728 nodes (3 terminal), 712 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.01 seconds (average 0.000242, setup 0.00)

Prob1A: 34 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 31, no = 1, maybe = 286

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=767] [36.0 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.3 KB]
Creating vector for yes... [dist=2, compact] [0.6 KB]
Allocating iteration vectors... [3 x 2.5 KB]
TOTAL: [47.3 KB]

Starting iterations...

Iterative method: 2163 iterations in 0.02 seconds (average 0.000007, setup 0.00)

Value in the initial state: 0.7126285792279754

Time for model checking: 0.03 seconds.

Result: 0.7126285792279754 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [8e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    8.0000000e-01   1.600000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     374    2.5720000e+02   0.000000e+00   0.000000e+00      0s

Solved in 374 iterations and 0.02 seconds
Optimal objective  2.572000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:340

pr_min: 0.7999999999999999
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:24 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7999999999999999.tra,lab' -mdp /tmp/tmp_z8e_nm3

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp_z8e_nm3"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 38 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Time for model construction: 0.057 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      342 (1 initial)
Transitions: 742
Choices:     598

Transition matrix: 857 nodes (3 terminal), 742 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 40 iterations in 0.00 seconds (average 0.000100, setup 0.00)

yes = 31, no = 1, maybe = 310

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=900] [42.2 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.4 KB]
Creating vector for yes... [dist=2, compact] [0.7 KB]
Allocating iteration vectors... [3 x 2.7 KB]
TOTAL: [54.3 KB]

Starting iterations...

Iterative method: 2178 iterations in 0.01 seconds (average 0.000006, setup 0.00)

Value in the initial state: 0.8031372391549565

Time for model checking: 0.036 seconds.

Result: 0.8031372391549565 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [8e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    8.0000000e-01   1.600000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     374    2.5720000e+02   0.000000e+00   0.000000e+00      0s

Solved in 374 iterations and 0.02 seconds
Optimal objective  2.572000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:340

pr_min: 0.7999999999999999
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [8e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   1.600000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     391    3.4000000e+02   0.000000e+00   0.000000e+00      0s

Solved in 391 iterations and 0.02 seconds
Optimal objective  3.400000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:340

pr_min: 0.7999999999999999
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:26 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7999999999999999.tra,lab' -mdp /tmp/tmpjc4bd8sc

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpjc4bd8sc"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 38 iterations in 0.00 seconds (average 0.000105, setup 0.00)

Time for model construction: 0.056 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      342 (1 initial)
Transitions: 742
Choices:     598

Transition matrix: 857 nodes (3 terminal), 742 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 40 iterations in 0.01 seconds (average 0.000200, setup 0.00)

yes = 31, no = 1, maybe = 310

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=900] [42.2 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.4 KB]
Creating vector for yes... [dist=2, compact] [0.7 KB]
Allocating iteration vectors... [3 x 2.7 KB]
TOTAL: [54.3 KB]

Starting iterations...

Iterative method: 2178 iterations in 0.02 seconds (average 0.000009, setup 0.00)

Value in the initial state: 0.8031372391549565

Time for model checking: 0.036 seconds.

Result: 0.8031372391549565 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1313 rows, 1056 columns and 2805 nonzeros
Variable types: 528 continuous, 528 integer (528 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [8e-01, 1e+00]
Presolve removed 297 rows and 312 columns
Presolve time: 0.09s
Presolved: 1016 rows, 744 columns, 2196 nonzeros
Variable types: 414 continuous, 330 integer (330 binary)
Found heuristic solution: objective 528.0000000

Root relaxation: objective 2.860000e+02, 549 iterations, 0.02 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  286.00000    0  180  528.00000  286.00000  45.8%     -    0s
H    0     0                     340.0000000  286.00000  15.9%     -    0s
     0     0  313.92829    0   32  340.00000  313.92829  7.67%     -    0s
     0     2  315.14741    0   30  340.00000  315.14741  7.31%     -    0s

Explored 110 nodes (5128 simplex iterations) in 1.31 seconds
Thread count was 16 (of 16 available processors)

Solution count 2: 340 528 

Optimal solution found (tolerance 0.00e+00)
Best objective 3.400000000000e+02, best bound 3.400000000000e+02, gap 0.0000%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55    190.2 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56    190.2 MiB      0.0 MiB           m2.update()
    57    190.2 MiB      0.0 MiB           new_obj = LinExpr(0)
    58    190.2 MiB      0.0 MiB           for var in current_vars:
    59    190.2 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60    190.2 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61    190.2 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62    190.2 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89    190.2 MiB      0.0 MiB                       res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:28 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7999999999999999.tra,lab' -mdp /tmp/tmpfqsz2ucd

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.7999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpfqsz2ucd"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 38 iterations in 0.00 seconds (average 0.000105, setup 0.00)

Time for model construction: 0.057 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      342 (1 initial)
Transitions: 742
Choices:     598

Transition matrix: 857 nodes (3 terminal), 742 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 40 iterations in 0.01 seconds (average 0.000200, setup 0.00)

yes = 31, no = 1, maybe = 310

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=900] [42.2 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [3.4 KB]
Creating vector for yes... [dist=2, compact] [0.7 KB]
Allocating iteration vectors... [3 x 2.7 KB]
TOTAL: [54.3 KB]

Starting iterations...

Iterative method: 2178 iterations in 0.02 seconds (average 0.000009, setup 0.00)

Value in the initial state: 0.8031372391549565

Time for model checking: 0.036 seconds.

Result: 0.8031372391549565 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [9e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    9.0000000e-01   1.800000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     444    3.2460000e+02   0.000000e+00   0.000000e+00      0s

Solved in 444 iterations and 0.02 seconds
Optimal objective  3.246000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:420

pr_min: 0.8999999999999999
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:29 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.8999999999999999.tra,lab' -mdp /tmp/tmpfalfxzxr

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.8999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.8999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpfalfxzxr"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 53 iterations in 0.00 seconds (average 0.000075, setup 0.00)

Time for model construction: 0.063 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      422 (1 initial)
Transitions: 842
Choices:     678

Transition matrix: 965 nodes (3 terminal), 842 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000000, setup 0.00)

Prob1A: 55 iterations in 0.01 seconds (average 0.000145, setup 0.00)

yes = 31, no = 1, maybe = 390

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=1013] [47.5 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [4.0 KB]
Creating vector for yes... [dist=2, compact] [0.8 KB]
Allocating iteration vectors... [3 x 3.3 KB]
TOTAL: [62.2 KB]

Starting iterations...

Iterative method: 2214 iterations in 0.02 seconds (average 0.000011, setup 0.00)

Value in the initial state: 0.9015686090283453

Time for model checking: 0.041 seconds.

Result: 0.9015686090283453 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [9e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    9.0000000e-01   1.800000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     444    3.2460000e+02   0.000000e+00   0.000000e+00      0s

Solved in 444 iterations and 0.02 seconds
Optimal objective  3.246000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:420

pr_min: 0.8999999999999999
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+07]
  Bounds range     [0e+00, 0e+00]
  RHS range        [9e-01, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   1.800000e+00   0.000000e+00      0s
Extra 6 simplex iterations after uncrush
     473    4.1920436e+02   0.000000e+00   0.000000e+00      0s

Solved in 473 iterations and 0.02 seconds
Optimal objective  4.192043572e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec



subsystem size:420

pr_min: 0.8999999999999999
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:31 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.8999999999999999.tra,lab' -mdp /tmp/tmp6jh_bvmo

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.8999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.8999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp6jh_bvmo"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 53 iterations in 0.00 seconds (average 0.000075, setup 0.00)

Time for model construction: 0.063 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      422 (1 initial)
Transitions: 842
Choices:     678

Transition matrix: 965 nodes (3 terminal), 842 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 55 iterations in 0.01 seconds (average 0.000145, setup 0.00)

yes = 31, no = 1, maybe = 390

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=1013] [47.5 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [4.0 KB]
Creating vector for yes... [dist=2, compact] [0.8 KB]
Allocating iteration vectors... [3 x 3.3 KB]
TOTAL: [62.2 KB]

Starting iterations...

Iterative method: 2214 iterations in 0.02 seconds (average 0.000009, setup 0.00)

Value in the initial state: 0.9015686090283453

Time for model checking: 0.041 seconds.

Result: 0.9015686090283453 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1313 rows, 1056 columns and 2805 nonzeros
Variable types: 528 continuous, 528 integer (528 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [9e-01, 1e+00]
Presolve removed 297 rows and 312 columns
Presolve time: 0.05s
Presolved: 1016 rows, 744 columns, 2196 nonzeros
Variable types: 414 continuous, 330 integer (330 binary)
Found heuristic solution: objective 528.0000000

Root relaxation: objective 3.390000e+02, 716 iterations, 0.03 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  339.20000    0  238  528.00000  339.20000  35.8%     -    0s
     0     0  357.13001    0   76  528.00000  357.13001  32.4%     -    0s
H    0     0                     420.0000000  357.13001  15.0%     -    0s
     0     2  357.13001    0   76  420.00000  357.13001  15.0%     -    0s

Explored 836 nodes (26421 simplex iterations) in 2.18 seconds
Thread count was 16 (of 16 available processors)

Solution count 2: 420 528 

Optimal solution found (tolerance 0.00e+00)
Best objective 4.200000000000e+02, best bound 4.200000000000e+02, gap 0.0000%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.2 MiB    190.2 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.2 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.2 MiB      0.0 MiB       m2 = m.construct()
    28    190.2 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.2 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.2 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.2 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.2 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.2 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.2 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.2 MiB      0.0 MiB       m2.update()
    44    190.2 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.2 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.2 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.2 MiB      0.0 MiB       if(find_optimum):
    55    190.2 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56    190.2 MiB      0.0 MiB           m2.update()
    57    190.2 MiB      0.0 MiB           new_obj = LinExpr(0)
    58    190.2 MiB      0.0 MiB           for var in current_vars:
    59    190.2 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60    190.2 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61    190.2 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62    190.2 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.3 MiB      0.0 MiB       j = 0
    69    190.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.3 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.3 MiB      0.0 MiB           result.solution = True
    81    190.3 MiB      0.0 MiB           result.feasible = True
    82    190.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.3 MiB      0.0 MiB           for v in current_vars:
    85    190.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89    190.3 MiB      0.0 MiB                       res_vec[j] = 0
    90    190.3 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.3 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:34 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.8999999999999999.tra,lab' -mdp /tmp/tmpx39th02x

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.8999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.8999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpx39th02x"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 53 iterations in 0.00 seconds (average 0.000075, setup 0.00)

Time for model construction: 0.062 seconds.

Warning: Deadlocks detected and fixed in 2 states

Type:        MDP
States:      422 (1 initial)
Transitions: 842
Choices:     678

Transition matrix: 965 nodes (3 terminal), 842 minterms, vars: 9r/9c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 55 iterations in 0.01 seconds (average 0.000145, setup 0.00)

yes = 31, no = 1, maybe = 390

Computing remaining probabilities...
Engine: Hybrid

Building hybrid MTBDD matrices... [nm=2, levels=9, nodes=1013] [47.5 KB]
Adding sparse bits... [levels=9-9, num=2, compact=2/2] [4.0 KB]
Creating vector for yes... [dist=2, compact] [0.8 KB]
Allocating iteration vectors... [3 x 3.3 KB]
TOTAL: [62.2 KB]

Starting iterations...

Iterative method: 2214 iterations in 0.02 seconds (average 0.000009, setup 0.00)

Value in the initial state: 0.9015686090283453

Time for model checking: 0.041 seconds.

Result: 0.9015686090283453 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   2.000000e+00   0.000000e+00      0s
     514    5.2800000e+02   0.000000e+00   0.000000e+00      0s

Solved in 514 iterations and 0.03 seconds
Optimal objective  5.280000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.3 MiB    190.3 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.3 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.3 MiB      0.0 MiB       m2 = m.construct()
    28    190.3 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.3 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.3 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.3 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.3 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.3 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.3 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.3 MiB      0.0 MiB       m2.update()
    44    190.3 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.3 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.3 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.3 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.3 MiB      0.0 MiB       j = 0
    69    190.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.3 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.3 MiB      0.0 MiB           result.solution = True
    81    190.3 MiB      0.0 MiB           result.feasible = True
    82    190.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.3 MiB      0.0 MiB           for v in current_vars:
    85    190.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.3 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.3 MiB      0.0 MiB       return result, res_vec



subsystem size:528

pr_min: 0.9999999999999999
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:35 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.9999999999999999.tra,lab' -mdp /tmp/tmpqou3hvm9

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.9999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.9999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpqou3hvm9"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 73 iterations in 0.00 seconds (average 0.000055, setup 0.00)

Time for model construction: 0.072 seconds.

Warning: Deadlocks detected and fixed in 1 states

Type:        MDP
States:      529 (1 initial)
Transitions: 973
Choices:     785

Transition matrix: 458 nodes (3 terminal), 973 minterms, vars: 10r/10c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 1 iterations in 0.00 seconds (average 0.000000, setup 0.00)

yes = 529, no = 0, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.008 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


528
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   2.000000e+00   0.000000e+00      0s
     514    5.2800000e+02   0.000000e+00   0.000000e+00      0s

Solved in 514 iterations and 0.03 seconds
Optimal objective  5.280000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.3 MiB    190.3 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.3 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.3 MiB      0.0 MiB       m2 = m.construct()
    28    190.3 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.3 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.3 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.3 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.3 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.3 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.3 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.3 MiB      0.0 MiB       m2.update()
    44    190.3 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.3 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.3 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.3 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.3 MiB      0.0 MiB       j = 0
    69    190.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.3 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.3 MiB      0.0 MiB           result.solution = True
    81    190.3 MiB      0.0 MiB           result.feasible = True
    82    190.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.3 MiB      0.0 MiB           for v in current_vars:
    85    190.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.3 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.3 MiB      0.0 MiB       return result, res_vec



subsystem size:528

pr_min: 0.9999999999999999
Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 785 rows, 528 columns and 1749 nonzeros
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [0e+00, 0e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 89 rows and 80 columns
Presolve time: 0.00s
Presolved: 696 rows, 448 columns, 1580 nonzeros

Iteration    Objective       Primal Inf.    Dual Inf.      Time
       0    1.0000000e+00   2.000000e+00   0.000000e+00      0s
     514    5.2800000e+02   0.000000e+00   0.000000e+00      0s

Solved in 514 iterations and 0.03 seconds
Optimal objective  5.280000000e+02
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.3 MiB    190.3 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.3 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.3 MiB      0.0 MiB       m2 = m.construct()
    28    190.3 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.3 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.3 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.3 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.3 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.3 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.3 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.3 MiB      0.0 MiB       m2.update()
    44    190.3 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.3 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.3 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.3 MiB      0.0 MiB       if(find_optimum):
    55                                     i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56                                     m2.update()
    57                                     new_obj = LinExpr(0)
    58                                     for var in current_vars:
    59                                         rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60                                         m2.addConstr(var,sense="<=",rhs=rhs)
    61                                         new_obj.add(i[0,var.getAttr("VarName")])
    62                                     m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.3 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.3 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.3 MiB      0.0 MiB       j = 0
    69    190.3 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.3 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.3 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.3 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.3 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.3 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.3 MiB      0.0 MiB           result.solution = True
    81    190.3 MiB      0.0 MiB           result.feasible = True
    82    190.3 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.3 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.3 MiB      0.0 MiB           for v in current_vars:
    85    190.3 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.3 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.3 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.3 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.3 MiB      0.0 MiB       return result, res_vec



subsystem size:528

pr_min: 0.9999999999999999
PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:37 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.9999999999999999.tra,lab' -mdp /tmp/tmp7c8ffzxo

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.9999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.9999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmp7c8ffzxo"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 73 iterations in 0.01 seconds (average 0.000110, setup 0.00)

Time for model construction: 0.073 seconds.

Warning: Deadlocks detected and fixed in 1 states

Type:        MDP
States:      529 (1 initial)
Transitions: 973
Choices:     785

Transition matrix: 458 nodes (3 terminal), 973 minterms, vars: 10r/10c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 1 iterations in 0.00 seconds (average 0.004000, setup 0.00)

yes = 529, no = 0, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.007 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


Changed value of parameter NumericFocus to 3
   Prev: 0  Min: 0  Max: 3  Default: 0
Changed value of parameter TimeLimit to 1800.0
   Prev: 1e+100  Min: 0.0  Max: 1e+100  Default: 1e+100
Changed value of parameter IntFeasTol to 1e-09
   Prev: 1e-05  Min: 1e-09  Max: 0.1  Default: 1e-05
Changed value of parameter FeasibilityTol to 1e-09
   Prev: 1e-06  Min: 1e-09  Max: 0.01  Default: 1e-06
Changed value of parameter MIPGap to 0.0
   Prev: 0.0001  Min: 0.0  Max: 1e+100  Default: 0.0001
Changed value of parameter MIPGapAbs to 0.0
   Prev: 1e-10  Min: 0.0  Max: 1e+100  Default: 1e-10
Optimize a model with 1313 rows, 1056 columns and 2805 nonzeros
Variable types: 528 continuous, 528 integer (528 binary)
Coefficient statistics:
  Matrix range     [5e-01, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [1e+00, 1e+00]
  RHS range        [1e+00, 1e+00]
Presolve removed 299 rows and 313 columns
Presolve time: 0.01s
Presolved: 1014 rows, 743 columns, 2190 nonzeros
Variable types: 413 continuous, 330 integer (304 binary)
Found heuristic solution: objective 528.0000000

Explored 1 nodes (0 simplex iterations) in 0.08 seconds
Thread count was 16 (of 16 available processors)

Solution count 1: 528 

Optimal solution found (tolerance 0.00e+00)
Best objective 5.280000000000e+02, best bound 5.280000000000e+02, gap 0.0000%
Filename: /home/jantsch/farkas_github/MDP_gurobi.py

Line #    Mem usage    Increment   Line Contents
================================================
    24    190.3 MiB    190.3 MiB   @profile
    25                             def run_gurobi_with_cutoff(c,A_ub,rhs,find_optimum=False,rhs_multiplier=1,callback=None,zero_vars=None,set_binary=None):
    26    190.3 MiB      0.0 MiB       m = GurobiModel(c,A_ub,rhs)
    27    190.3 MiB      0.0 MiB       m2 = m.construct()
    28    190.3 MiB      0.0 MiB       m2.Params.NumericFocus = 3
    29    190.3 MiB      0.0 MiB       m2.setParam('TimeLimit', timeout)
    30    190.3 MiB      0.0 MiB       m2.setParam('IntFeasTol', 1e-9)
    31    190.3 MiB      0.0 MiB       m2.setParam('FeasibilityTol', 1e-9)
    32    190.3 MiB      0.0 MiB       m2.setParam('MIPGap',0)
    33    190.3 MiB      0.0 MiB       m2.setParam('MIPGapAbs',0)
    34    190.3 MiB      0.0 MiB       if not (callback == None):
    35                                     m2.setParam("Presolve",0)
    36                                     m2.setParam("PreDual",0)
    37                                     m2.setParam("DualReductions",0)
    38                                     m2.setParam("Method",0)
    39                                     m2.optimize(callback)
    40                                     #m2.setObjective(0)
    41                                     m2.optimize(callback2)
    42                             
    43    190.3 MiB      0.0 MiB       m2.update()
    44    190.3 MiB      0.0 MiB       current_vars = m2.getVars()
    45                             
    46    190.3 MiB      0.0 MiB       if(zero_vars):
    47                                     for x in zero_vars:
    48                                         current_vars[x].setAttr(GRB.Attr.UB,0.0)
    49                             
    50    190.3 MiB      0.0 MiB       if(set_binary):
    51                                     for x in set_binary:
    52                                         current_vars[x].setAttr(GRB.Attr.VType,GRB.BINARY)
    53                             
    54    190.3 MiB      0.0 MiB       if(find_optimum):
    55    190.3 MiB      0.0 MiB           i = m2.addVars(1,[var.getAttr("VarName") for var in current_vars],name="i",vtype=GRB.BINARY,obj=c)
    56    190.3 MiB      0.0 MiB           m2.update()
    57    190.3 MiB      0.0 MiB           new_obj = LinExpr(0)
    58    190.3 MiB      0.0 MiB           for var in current_vars:
    59    190.3 MiB      0.0 MiB               rhs = LinExpr(rhs_multiplier * i[0,var.getAttr("VarName")])
    60    190.3 MiB      0.0 MiB               m2.addConstr(var,sense="<=",rhs=rhs)
    61    190.3 MiB      0.0 MiB               new_obj.add(i[0,var.getAttr("VarName")])
    62    190.3 MiB      0.0 MiB           m2.setObjective(new_obj, GRB.MINIMIZE)
    63                             
    64    190.2 MiB      0.0 MiB       m2.optimize()
    65                             
    66                                 # save result into vector
    67    190.2 MiB      0.0 MiB       res_vec = np.zeros(len(current_vars))
    68    190.2 MiB      0.0 MiB       j = 0
    69    190.2 MiB      0.0 MiB       result = GurobiResult()
    70                             
    71    190.2 MiB      0.0 MiB       if m2.status == 11:
    72                                     result.interrupted = True
    73    190.2 MiB      0.0 MiB       if m2.status == 3:
    74                                     result.feasible = False
    75    190.2 MiB      0.0 MiB       if m2.status == 5:
    76                                     result.unbounded = True
    77    190.2 MiB      0.0 MiB       if m2.status == 9:
    78                                     result.timeout = True
    79    190.2 MiB      0.0 MiB       if (m2.status == 2) or ((m2.status == 9) and (m2.SolCount > 0)):
    80    190.2 MiB      0.0 MiB           result.solution = True
    81    190.2 MiB      0.0 MiB           result.feasible = True
    82    190.2 MiB      0.0 MiB           result.obj_val = m2.getAttr("ObjVal")
    83    190.2 MiB      0.0 MiB           result.lower_bound = m2.ObjBound
    84    190.2 MiB      0.0 MiB           for v in current_vars:
    85    190.2 MiB      0.0 MiB               if v.getAttr("VType") == GRB.CONTINUOUS:
    86    190.2 MiB      0.0 MiB                   if not find_optimum or (i[0,v.getAttr("VarName")].x == 1):
    87    190.2 MiB      0.0 MiB                       res_vec[j] = v.x
    88                                             else:
    89                                                 res_vec[j] = 0
    90    190.2 MiB      0.0 MiB                   j = j+1
    91                             
    92    190.2 MiB      0.0 MiB       return result, res_vec


PRISM
=====

Version: 4.5.dev
Date: Mon Feb 03 02:26:38 CET 2020
Hostname: obiwan
Memory limits: cudd=1g, java(heap)=981.5m
Command line: prism -e 1e-9 -importmodel '/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.9999999999999999.tra,lab' -mdp /tmp/tmpauujiwef

Importing model from "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.9999999999999999.tra", "/home/jantsch/farkas_github/subsys/consensus/consensus-prmin-2-4-subsys-0.9999999999999999.lab"...
Using specified model type: MDP

Parsing properties file "/tmp/tmpauujiwef"...

1 property:
(1) "reach_min": Pmin=? [ F "target" ]

---------------------------------------------------------------------

Model checking: "reach_min": Pmin=? [ F "target" ]

Building model...

Computing reachable states...

Reachability (BFS): 73 iterations in 0.00 seconds (average 0.000055, setup 0.00)

Time for model construction: 0.071 seconds.

Warning: Deadlocks detected and fixed in 1 states

Type:        MDP
States:      529 (1 initial)
Transitions: 973
Choices:     785

Transition matrix: 458 nodes (3 terminal), 973 minterms, vars: 10r/10c/2nd

Prob0E: 33 iterations in 0.00 seconds (average 0.000121, setup 0.00)

Prob1A: 1 iterations in 0.00 seconds (average 0.004000, setup 0.00)

yes = 529, no = 0, maybe = 0

Value in the initial state: 1.0

Time for model checking: 0.007 seconds.

Result: 1.0 (value in the initial state)

---------------------------------------------------------------------

Note: There was 1 warning during computation.


